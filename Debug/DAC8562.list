
DAC8562.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c04  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e00  08004e00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e00  08004e00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08004e78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004e78  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5cd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000182e  00000000  00000000  0002a665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8d4  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b841  00000000  00000000  000487f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3761  00000000  00000000  00054035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000244c  00000000  00000000  000f77e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ca8 	.word	0x08004ca8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08004ca8 	.word	0x08004ca8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_f2uiz>:
 8000240:	219e      	movs	r1, #158	; 0x9e
 8000242:	b510      	push	{r4, lr}
 8000244:	05c9      	lsls	r1, r1, #23
 8000246:	1c04      	adds	r4, r0, #0
 8000248:	f001 f8e6 	bl	8001418 <__aeabi_fcmpge>
 800024c:	2800      	cmp	r0, #0
 800024e:	d103      	bne.n	8000258 <__aeabi_f2uiz+0x18>
 8000250:	1c20      	adds	r0, r4, #0
 8000252:	f000 fc17 	bl	8000a84 <__aeabi_f2iz>
 8000256:	bd10      	pop	{r4, pc}
 8000258:	219e      	movs	r1, #158	; 0x9e
 800025a:	1c20      	adds	r0, r4, #0
 800025c:	05c9      	lsls	r1, r1, #23
 800025e:	f000 fa63 	bl	8000728 <__aeabi_fsub>
 8000262:	f000 fc0f 	bl	8000a84 <__aeabi_f2iz>
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	061b      	lsls	r3, r3, #24
 800026a:	469c      	mov	ip, r3
 800026c:	4460      	add	r0, ip
 800026e:	e7f2      	b.n	8000256 <__aeabi_f2uiz+0x16>

08000270 <__aeabi_d2uiz>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	2200      	movs	r2, #0
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <__aeabi_d2uiz+0x38>)
 8000276:	0004      	movs	r4, r0
 8000278:	000d      	movs	r5, r1
 800027a:	f001 f893 	bl	80013a4 <__aeabi_dcmpge>
 800027e:	2800      	cmp	r0, #0
 8000280:	d104      	bne.n	800028c <__aeabi_d2uiz+0x1c>
 8000282:	0020      	movs	r0, r4
 8000284:	0029      	movs	r1, r5
 8000286:	f000 fffd 	bl	8001284 <__aeabi_d2iz>
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <__aeabi_d2uiz+0x38>)
 800028e:	2200      	movs	r2, #0
 8000290:	0020      	movs	r0, r4
 8000292:	0029      	movs	r1, r5
 8000294:	f000 fc64 	bl	8000b60 <__aeabi_dsub>
 8000298:	f000 fff4 	bl	8001284 <__aeabi_d2iz>
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	061b      	lsls	r3, r3, #24
 80002a0:	469c      	mov	ip, r3
 80002a2:	4460      	add	r0, ip
 80002a4:	e7f1      	b.n	800028a <__aeabi_d2uiz+0x1a>
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	41e00000 	.word	0x41e00000

080002ac <__aeabi_fdiv>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	464f      	mov	r7, r9
 80002b0:	4646      	mov	r6, r8
 80002b2:	46d6      	mov	lr, sl
 80002b4:	0245      	lsls	r5, r0, #9
 80002b6:	b5c0      	push	{r6, r7, lr}
 80002b8:	0047      	lsls	r7, r0, #1
 80002ba:	1c0c      	adds	r4, r1, #0
 80002bc:	0a6d      	lsrs	r5, r5, #9
 80002be:	0e3f      	lsrs	r7, r7, #24
 80002c0:	0fc6      	lsrs	r6, r0, #31
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d100      	bne.n	80002c8 <__aeabi_fdiv+0x1c>
 80002c6:	e070      	b.n	80003aa <__aeabi_fdiv+0xfe>
 80002c8:	2fff      	cmp	r7, #255	; 0xff
 80002ca:	d100      	bne.n	80002ce <__aeabi_fdiv+0x22>
 80002cc:	e075      	b.n	80003ba <__aeabi_fdiv+0x10e>
 80002ce:	00eb      	lsls	r3, r5, #3
 80002d0:	2580      	movs	r5, #128	; 0x80
 80002d2:	04ed      	lsls	r5, r5, #19
 80002d4:	431d      	orrs	r5, r3
 80002d6:	2300      	movs	r3, #0
 80002d8:	4699      	mov	r9, r3
 80002da:	469a      	mov	sl, r3
 80002dc:	3f7f      	subs	r7, #127	; 0x7f
 80002de:	0260      	lsls	r0, r4, #9
 80002e0:	0a43      	lsrs	r3, r0, #9
 80002e2:	4698      	mov	r8, r3
 80002e4:	0063      	lsls	r3, r4, #1
 80002e6:	0e1b      	lsrs	r3, r3, #24
 80002e8:	0fe4      	lsrs	r4, r4, #31
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d04e      	beq.n	800038c <__aeabi_fdiv+0xe0>
 80002ee:	2bff      	cmp	r3, #255	; 0xff
 80002f0:	d046      	beq.n	8000380 <__aeabi_fdiv+0xd4>
 80002f2:	4642      	mov	r2, r8
 80002f4:	00d0      	lsls	r0, r2, #3
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	04d2      	lsls	r2, r2, #19
 80002fa:	4302      	orrs	r2, r0
 80002fc:	4690      	mov	r8, r2
 80002fe:	2200      	movs	r2, #0
 8000300:	3b7f      	subs	r3, #127	; 0x7f
 8000302:	0031      	movs	r1, r6
 8000304:	1aff      	subs	r7, r7, r3
 8000306:	464b      	mov	r3, r9
 8000308:	4061      	eors	r1, r4
 800030a:	b2c9      	uxtb	r1, r1
 800030c:	4313      	orrs	r3, r2
 800030e:	2b0f      	cmp	r3, #15
 8000310:	d900      	bls.n	8000314 <__aeabi_fdiv+0x68>
 8000312:	e0b5      	b.n	8000480 <__aeabi_fdiv+0x1d4>
 8000314:	486e      	ldr	r0, [pc, #440]	; (80004d0 <__aeabi_fdiv+0x224>)
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	58c3      	ldr	r3, [r0, r3]
 800031a:	469f      	mov	pc, r3
 800031c:	2300      	movs	r3, #0
 800031e:	4698      	mov	r8, r3
 8000320:	0026      	movs	r6, r4
 8000322:	4645      	mov	r5, r8
 8000324:	4692      	mov	sl, r2
 8000326:	4653      	mov	r3, sl
 8000328:	2b02      	cmp	r3, #2
 800032a:	d100      	bne.n	800032e <__aeabi_fdiv+0x82>
 800032c:	e089      	b.n	8000442 <__aeabi_fdiv+0x196>
 800032e:	2b03      	cmp	r3, #3
 8000330:	d100      	bne.n	8000334 <__aeabi_fdiv+0x88>
 8000332:	e09e      	b.n	8000472 <__aeabi_fdiv+0x1c6>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d018      	beq.n	800036a <__aeabi_fdiv+0xbe>
 8000338:	003b      	movs	r3, r7
 800033a:	337f      	adds	r3, #127	; 0x7f
 800033c:	2b00      	cmp	r3, #0
 800033e:	dd69      	ble.n	8000414 <__aeabi_fdiv+0x168>
 8000340:	076a      	lsls	r2, r5, #29
 8000342:	d004      	beq.n	800034e <__aeabi_fdiv+0xa2>
 8000344:	220f      	movs	r2, #15
 8000346:	402a      	ands	r2, r5
 8000348:	2a04      	cmp	r2, #4
 800034a:	d000      	beq.n	800034e <__aeabi_fdiv+0xa2>
 800034c:	3504      	adds	r5, #4
 800034e:	012a      	lsls	r2, r5, #4
 8000350:	d503      	bpl.n	800035a <__aeabi_fdiv+0xae>
 8000352:	4b60      	ldr	r3, [pc, #384]	; (80004d4 <__aeabi_fdiv+0x228>)
 8000354:	401d      	ands	r5, r3
 8000356:	003b      	movs	r3, r7
 8000358:	3380      	adds	r3, #128	; 0x80
 800035a:	2bfe      	cmp	r3, #254	; 0xfe
 800035c:	dd00      	ble.n	8000360 <__aeabi_fdiv+0xb4>
 800035e:	e070      	b.n	8000442 <__aeabi_fdiv+0x196>
 8000360:	01ad      	lsls	r5, r5, #6
 8000362:	0a6d      	lsrs	r5, r5, #9
 8000364:	b2d8      	uxtb	r0, r3
 8000366:	e002      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000368:	000e      	movs	r6, r1
 800036a:	2000      	movs	r0, #0
 800036c:	2500      	movs	r5, #0
 800036e:	05c0      	lsls	r0, r0, #23
 8000370:	4328      	orrs	r0, r5
 8000372:	07f6      	lsls	r6, r6, #31
 8000374:	4330      	orrs	r0, r6
 8000376:	bce0      	pop	{r5, r6, r7}
 8000378:	46ba      	mov	sl, r7
 800037a:	46b1      	mov	r9, r6
 800037c:	46a8      	mov	r8, r5
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4643      	mov	r3, r8
 8000382:	2b00      	cmp	r3, #0
 8000384:	d13f      	bne.n	8000406 <__aeabi_fdiv+0x15a>
 8000386:	2202      	movs	r2, #2
 8000388:	3fff      	subs	r7, #255	; 0xff
 800038a:	e003      	b.n	8000394 <__aeabi_fdiv+0xe8>
 800038c:	4643      	mov	r3, r8
 800038e:	2b00      	cmp	r3, #0
 8000390:	d12d      	bne.n	80003ee <__aeabi_fdiv+0x142>
 8000392:	2201      	movs	r2, #1
 8000394:	0031      	movs	r1, r6
 8000396:	464b      	mov	r3, r9
 8000398:	4061      	eors	r1, r4
 800039a:	b2c9      	uxtb	r1, r1
 800039c:	4313      	orrs	r3, r2
 800039e:	2b0f      	cmp	r3, #15
 80003a0:	d834      	bhi.n	800040c <__aeabi_fdiv+0x160>
 80003a2:	484d      	ldr	r0, [pc, #308]	; (80004d8 <__aeabi_fdiv+0x22c>)
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	58c3      	ldr	r3, [r0, r3]
 80003a8:	469f      	mov	pc, r3
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d113      	bne.n	80003d6 <__aeabi_fdiv+0x12a>
 80003ae:	2304      	movs	r3, #4
 80003b0:	4699      	mov	r9, r3
 80003b2:	3b03      	subs	r3, #3
 80003b4:	2700      	movs	r7, #0
 80003b6:	469a      	mov	sl, r3
 80003b8:	e791      	b.n	80002de <__aeabi_fdiv+0x32>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d105      	bne.n	80003ca <__aeabi_fdiv+0x11e>
 80003be:	2308      	movs	r3, #8
 80003c0:	4699      	mov	r9, r3
 80003c2:	3b06      	subs	r3, #6
 80003c4:	27ff      	movs	r7, #255	; 0xff
 80003c6:	469a      	mov	sl, r3
 80003c8:	e789      	b.n	80002de <__aeabi_fdiv+0x32>
 80003ca:	230c      	movs	r3, #12
 80003cc:	4699      	mov	r9, r3
 80003ce:	3b09      	subs	r3, #9
 80003d0:	27ff      	movs	r7, #255	; 0xff
 80003d2:	469a      	mov	sl, r3
 80003d4:	e783      	b.n	80002de <__aeabi_fdiv+0x32>
 80003d6:	0028      	movs	r0, r5
 80003d8:	f001 f828 	bl	800142c <__clzsi2>
 80003dc:	2776      	movs	r7, #118	; 0x76
 80003de:	1f43      	subs	r3, r0, #5
 80003e0:	409d      	lsls	r5, r3
 80003e2:	2300      	movs	r3, #0
 80003e4:	427f      	negs	r7, r7
 80003e6:	4699      	mov	r9, r3
 80003e8:	469a      	mov	sl, r3
 80003ea:	1a3f      	subs	r7, r7, r0
 80003ec:	e777      	b.n	80002de <__aeabi_fdiv+0x32>
 80003ee:	4640      	mov	r0, r8
 80003f0:	f001 f81c 	bl	800142c <__clzsi2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	1f43      	subs	r3, r0, #5
 80003f8:	409a      	lsls	r2, r3
 80003fa:	2376      	movs	r3, #118	; 0x76
 80003fc:	425b      	negs	r3, r3
 80003fe:	4690      	mov	r8, r2
 8000400:	1a1b      	subs	r3, r3, r0
 8000402:	2200      	movs	r2, #0
 8000404:	e77d      	b.n	8000302 <__aeabi_fdiv+0x56>
 8000406:	23ff      	movs	r3, #255	; 0xff
 8000408:	2203      	movs	r2, #3
 800040a:	e77a      	b.n	8000302 <__aeabi_fdiv+0x56>
 800040c:	000e      	movs	r6, r1
 800040e:	20ff      	movs	r0, #255	; 0xff
 8000410:	2500      	movs	r5, #0
 8000412:	e7ac      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000414:	2001      	movs	r0, #1
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	281b      	cmp	r0, #27
 800041a:	dca6      	bgt.n	800036a <__aeabi_fdiv+0xbe>
 800041c:	379e      	adds	r7, #158	; 0x9e
 800041e:	002a      	movs	r2, r5
 8000420:	40bd      	lsls	r5, r7
 8000422:	40c2      	lsrs	r2, r0
 8000424:	1e6b      	subs	r3, r5, #1
 8000426:	419d      	sbcs	r5, r3
 8000428:	4315      	orrs	r5, r2
 800042a:	076b      	lsls	r3, r5, #29
 800042c:	d004      	beq.n	8000438 <__aeabi_fdiv+0x18c>
 800042e:	230f      	movs	r3, #15
 8000430:	402b      	ands	r3, r5
 8000432:	2b04      	cmp	r3, #4
 8000434:	d000      	beq.n	8000438 <__aeabi_fdiv+0x18c>
 8000436:	3504      	adds	r5, #4
 8000438:	016b      	lsls	r3, r5, #5
 800043a:	d544      	bpl.n	80004c6 <__aeabi_fdiv+0x21a>
 800043c:	2001      	movs	r0, #1
 800043e:	2500      	movs	r5, #0
 8000440:	e795      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000442:	20ff      	movs	r0, #255	; 0xff
 8000444:	2500      	movs	r5, #0
 8000446:	e792      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000448:	2580      	movs	r5, #128	; 0x80
 800044a:	2600      	movs	r6, #0
 800044c:	20ff      	movs	r0, #255	; 0xff
 800044e:	03ed      	lsls	r5, r5, #15
 8000450:	e78d      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000452:	2300      	movs	r3, #0
 8000454:	4698      	mov	r8, r3
 8000456:	2080      	movs	r0, #128	; 0x80
 8000458:	03c0      	lsls	r0, r0, #15
 800045a:	4205      	tst	r5, r0
 800045c:	d009      	beq.n	8000472 <__aeabi_fdiv+0x1c6>
 800045e:	4643      	mov	r3, r8
 8000460:	4203      	tst	r3, r0
 8000462:	d106      	bne.n	8000472 <__aeabi_fdiv+0x1c6>
 8000464:	4645      	mov	r5, r8
 8000466:	4305      	orrs	r5, r0
 8000468:	026d      	lsls	r5, r5, #9
 800046a:	0026      	movs	r6, r4
 800046c:	20ff      	movs	r0, #255	; 0xff
 800046e:	0a6d      	lsrs	r5, r5, #9
 8000470:	e77d      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000472:	2080      	movs	r0, #128	; 0x80
 8000474:	03c0      	lsls	r0, r0, #15
 8000476:	4305      	orrs	r5, r0
 8000478:	026d      	lsls	r5, r5, #9
 800047a:	20ff      	movs	r0, #255	; 0xff
 800047c:	0a6d      	lsrs	r5, r5, #9
 800047e:	e776      	b.n	800036e <__aeabi_fdiv+0xc2>
 8000480:	4642      	mov	r2, r8
 8000482:	016b      	lsls	r3, r5, #5
 8000484:	0150      	lsls	r0, r2, #5
 8000486:	4283      	cmp	r3, r0
 8000488:	d219      	bcs.n	80004be <__aeabi_fdiv+0x212>
 800048a:	221b      	movs	r2, #27
 800048c:	2500      	movs	r5, #0
 800048e:	3f01      	subs	r7, #1
 8000490:	2601      	movs	r6, #1
 8000492:	001c      	movs	r4, r3
 8000494:	006d      	lsls	r5, r5, #1
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	2c00      	cmp	r4, #0
 800049a:	db01      	blt.n	80004a0 <__aeabi_fdiv+0x1f4>
 800049c:	4298      	cmp	r0, r3
 800049e:	d801      	bhi.n	80004a4 <__aeabi_fdiv+0x1f8>
 80004a0:	1a1b      	subs	r3, r3, r0
 80004a2:	4335      	orrs	r5, r6
 80004a4:	3a01      	subs	r2, #1
 80004a6:	2a00      	cmp	r2, #0
 80004a8:	d1f3      	bne.n	8000492 <__aeabi_fdiv+0x1e6>
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	4193      	sbcs	r3, r2
 80004ae:	431d      	orrs	r5, r3
 80004b0:	003b      	movs	r3, r7
 80004b2:	337f      	adds	r3, #127	; 0x7f
 80004b4:	000e      	movs	r6, r1
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	dd00      	ble.n	80004bc <__aeabi_fdiv+0x210>
 80004ba:	e741      	b.n	8000340 <__aeabi_fdiv+0x94>
 80004bc:	e7aa      	b.n	8000414 <__aeabi_fdiv+0x168>
 80004be:	221a      	movs	r2, #26
 80004c0:	2501      	movs	r5, #1
 80004c2:	1a1b      	subs	r3, r3, r0
 80004c4:	e7e4      	b.n	8000490 <__aeabi_fdiv+0x1e4>
 80004c6:	01ad      	lsls	r5, r5, #6
 80004c8:	2000      	movs	r0, #0
 80004ca:	0a6d      	lsrs	r5, r5, #9
 80004cc:	e74f      	b.n	800036e <__aeabi_fdiv+0xc2>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	08004cd4 	.word	0x08004cd4
 80004d4:	f7ffffff 	.word	0xf7ffffff
 80004d8:	08004d14 	.word	0x08004d14

080004dc <__aeabi_fmul>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	464f      	mov	r7, r9
 80004e0:	4646      	mov	r6, r8
 80004e2:	46d6      	mov	lr, sl
 80004e4:	0244      	lsls	r4, r0, #9
 80004e6:	0045      	lsls	r5, r0, #1
 80004e8:	b5c0      	push	{r6, r7, lr}
 80004ea:	0a64      	lsrs	r4, r4, #9
 80004ec:	1c0f      	adds	r7, r1, #0
 80004ee:	0e2d      	lsrs	r5, r5, #24
 80004f0:	0fc6      	lsrs	r6, r0, #31
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_fmul+0x1c>
 80004f6:	e08d      	b.n	8000614 <__aeabi_fmul+0x138>
 80004f8:	2dff      	cmp	r5, #255	; 0xff
 80004fa:	d100      	bne.n	80004fe <__aeabi_fmul+0x22>
 80004fc:	e092      	b.n	8000624 <__aeabi_fmul+0x148>
 80004fe:	2300      	movs	r3, #0
 8000500:	2080      	movs	r0, #128	; 0x80
 8000502:	4699      	mov	r9, r3
 8000504:	469a      	mov	sl, r3
 8000506:	00e4      	lsls	r4, r4, #3
 8000508:	04c0      	lsls	r0, r0, #19
 800050a:	4304      	orrs	r4, r0
 800050c:	3d7f      	subs	r5, #127	; 0x7f
 800050e:	0278      	lsls	r0, r7, #9
 8000510:	0a43      	lsrs	r3, r0, #9
 8000512:	4698      	mov	r8, r3
 8000514:	007b      	lsls	r3, r7, #1
 8000516:	0e1b      	lsrs	r3, r3, #24
 8000518:	0fff      	lsrs	r7, r7, #31
 800051a:	2b00      	cmp	r3, #0
 800051c:	d100      	bne.n	8000520 <__aeabi_fmul+0x44>
 800051e:	e070      	b.n	8000602 <__aeabi_fmul+0x126>
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d100      	bne.n	8000526 <__aeabi_fmul+0x4a>
 8000524:	e086      	b.n	8000634 <__aeabi_fmul+0x158>
 8000526:	4642      	mov	r2, r8
 8000528:	00d0      	lsls	r0, r2, #3
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	3b7f      	subs	r3, #127	; 0x7f
 800052e:	18ed      	adds	r5, r5, r3
 8000530:	2300      	movs	r3, #0
 8000532:	04d2      	lsls	r2, r2, #19
 8000534:	4302      	orrs	r2, r0
 8000536:	4690      	mov	r8, r2
 8000538:	469c      	mov	ip, r3
 800053a:	0031      	movs	r1, r6
 800053c:	464b      	mov	r3, r9
 800053e:	4079      	eors	r1, r7
 8000540:	1c68      	adds	r0, r5, #1
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d81c      	bhi.n	8000580 <__aeabi_fmul+0xa4>
 8000546:	4a76      	ldr	r2, [pc, #472]	; (8000720 <__aeabi_fmul+0x244>)
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	58d3      	ldr	r3, [r2, r3]
 800054c:	469f      	mov	pc, r3
 800054e:	0039      	movs	r1, r7
 8000550:	4644      	mov	r4, r8
 8000552:	46e2      	mov	sl, ip
 8000554:	4653      	mov	r3, sl
 8000556:	2b02      	cmp	r3, #2
 8000558:	d00f      	beq.n	800057a <__aeabi_fmul+0x9e>
 800055a:	2b03      	cmp	r3, #3
 800055c:	d100      	bne.n	8000560 <__aeabi_fmul+0x84>
 800055e:	e0d7      	b.n	8000710 <__aeabi_fmul+0x234>
 8000560:	2b01      	cmp	r3, #1
 8000562:	d137      	bne.n	80005d4 <__aeabi_fmul+0xf8>
 8000564:	2000      	movs	r0, #0
 8000566:	2400      	movs	r4, #0
 8000568:	05c0      	lsls	r0, r0, #23
 800056a:	4320      	orrs	r0, r4
 800056c:	07c9      	lsls	r1, r1, #31
 800056e:	4308      	orrs	r0, r1
 8000570:	bce0      	pop	{r5, r6, r7}
 8000572:	46ba      	mov	sl, r7
 8000574:	46b1      	mov	r9, r6
 8000576:	46a8      	mov	r8, r5
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057a:	20ff      	movs	r0, #255	; 0xff
 800057c:	2400      	movs	r4, #0
 800057e:	e7f3      	b.n	8000568 <__aeabi_fmul+0x8c>
 8000580:	0c26      	lsrs	r6, r4, #16
 8000582:	0424      	lsls	r4, r4, #16
 8000584:	0c22      	lsrs	r2, r4, #16
 8000586:	4644      	mov	r4, r8
 8000588:	0424      	lsls	r4, r4, #16
 800058a:	0c24      	lsrs	r4, r4, #16
 800058c:	4643      	mov	r3, r8
 800058e:	0027      	movs	r7, r4
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	4357      	muls	r7, r2
 8000594:	4374      	muls	r4, r6
 8000596:	435a      	muls	r2, r3
 8000598:	435e      	muls	r6, r3
 800059a:	1912      	adds	r2, r2, r4
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	429c      	cmp	r4, r3
 80005a2:	d903      	bls.n	80005ac <__aeabi_fmul+0xd0>
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	0252      	lsls	r2, r2, #9
 80005a8:	4694      	mov	ip, r2
 80005aa:	4466      	add	r6, ip
 80005ac:	043f      	lsls	r7, r7, #16
 80005ae:	041a      	lsls	r2, r3, #16
 80005b0:	0c3f      	lsrs	r7, r7, #16
 80005b2:	19d2      	adds	r2, r2, r7
 80005b4:	0194      	lsls	r4, r2, #6
 80005b6:	1e67      	subs	r7, r4, #1
 80005b8:	41bc      	sbcs	r4, r7
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	0e92      	lsrs	r2, r2, #26
 80005be:	199b      	adds	r3, r3, r6
 80005c0:	4314      	orrs	r4, r2
 80005c2:	019b      	lsls	r3, r3, #6
 80005c4:	431c      	orrs	r4, r3
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	d400      	bmi.n	80005cc <__aeabi_fmul+0xf0>
 80005ca:	e09b      	b.n	8000704 <__aeabi_fmul+0x228>
 80005cc:	2301      	movs	r3, #1
 80005ce:	0862      	lsrs	r2, r4, #1
 80005d0:	401c      	ands	r4, r3
 80005d2:	4314      	orrs	r4, r2
 80005d4:	0002      	movs	r2, r0
 80005d6:	327f      	adds	r2, #127	; 0x7f
 80005d8:	2a00      	cmp	r2, #0
 80005da:	dd64      	ble.n	80006a6 <__aeabi_fmul+0x1ca>
 80005dc:	0763      	lsls	r3, r4, #29
 80005de:	d004      	beq.n	80005ea <__aeabi_fmul+0x10e>
 80005e0:	230f      	movs	r3, #15
 80005e2:	4023      	ands	r3, r4
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	d000      	beq.n	80005ea <__aeabi_fmul+0x10e>
 80005e8:	3404      	adds	r4, #4
 80005ea:	0123      	lsls	r3, r4, #4
 80005ec:	d503      	bpl.n	80005f6 <__aeabi_fmul+0x11a>
 80005ee:	0002      	movs	r2, r0
 80005f0:	4b4c      	ldr	r3, [pc, #304]	; (8000724 <__aeabi_fmul+0x248>)
 80005f2:	3280      	adds	r2, #128	; 0x80
 80005f4:	401c      	ands	r4, r3
 80005f6:	2afe      	cmp	r2, #254	; 0xfe
 80005f8:	dcbf      	bgt.n	800057a <__aeabi_fmul+0x9e>
 80005fa:	01a4      	lsls	r4, r4, #6
 80005fc:	0a64      	lsrs	r4, r4, #9
 80005fe:	b2d0      	uxtb	r0, r2
 8000600:	e7b2      	b.n	8000568 <__aeabi_fmul+0x8c>
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d13d      	bne.n	8000684 <__aeabi_fmul+0x1a8>
 8000608:	464a      	mov	r2, r9
 800060a:	3301      	adds	r3, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4691      	mov	r9, r2
 8000610:	469c      	mov	ip, r3
 8000612:	e792      	b.n	800053a <__aeabi_fmul+0x5e>
 8000614:	2c00      	cmp	r4, #0
 8000616:	d129      	bne.n	800066c <__aeabi_fmul+0x190>
 8000618:	2304      	movs	r3, #4
 800061a:	4699      	mov	r9, r3
 800061c:	3b03      	subs	r3, #3
 800061e:	2500      	movs	r5, #0
 8000620:	469a      	mov	sl, r3
 8000622:	e774      	b.n	800050e <__aeabi_fmul+0x32>
 8000624:	2c00      	cmp	r4, #0
 8000626:	d11b      	bne.n	8000660 <__aeabi_fmul+0x184>
 8000628:	2308      	movs	r3, #8
 800062a:	4699      	mov	r9, r3
 800062c:	3b06      	subs	r3, #6
 800062e:	25ff      	movs	r5, #255	; 0xff
 8000630:	469a      	mov	sl, r3
 8000632:	e76c      	b.n	800050e <__aeabi_fmul+0x32>
 8000634:	4643      	mov	r3, r8
 8000636:	35ff      	adds	r5, #255	; 0xff
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10b      	bne.n	8000654 <__aeabi_fmul+0x178>
 800063c:	2302      	movs	r3, #2
 800063e:	464a      	mov	r2, r9
 8000640:	431a      	orrs	r2, r3
 8000642:	4691      	mov	r9, r2
 8000644:	469c      	mov	ip, r3
 8000646:	e778      	b.n	800053a <__aeabi_fmul+0x5e>
 8000648:	4653      	mov	r3, sl
 800064a:	0031      	movs	r1, r6
 800064c:	2b02      	cmp	r3, #2
 800064e:	d000      	beq.n	8000652 <__aeabi_fmul+0x176>
 8000650:	e783      	b.n	800055a <__aeabi_fmul+0x7e>
 8000652:	e792      	b.n	800057a <__aeabi_fmul+0x9e>
 8000654:	2303      	movs	r3, #3
 8000656:	464a      	mov	r2, r9
 8000658:	431a      	orrs	r2, r3
 800065a:	4691      	mov	r9, r2
 800065c:	469c      	mov	ip, r3
 800065e:	e76c      	b.n	800053a <__aeabi_fmul+0x5e>
 8000660:	230c      	movs	r3, #12
 8000662:	4699      	mov	r9, r3
 8000664:	3b09      	subs	r3, #9
 8000666:	25ff      	movs	r5, #255	; 0xff
 8000668:	469a      	mov	sl, r3
 800066a:	e750      	b.n	800050e <__aeabi_fmul+0x32>
 800066c:	0020      	movs	r0, r4
 800066e:	f000 fedd 	bl	800142c <__clzsi2>
 8000672:	2576      	movs	r5, #118	; 0x76
 8000674:	1f43      	subs	r3, r0, #5
 8000676:	409c      	lsls	r4, r3
 8000678:	2300      	movs	r3, #0
 800067a:	426d      	negs	r5, r5
 800067c:	4699      	mov	r9, r3
 800067e:	469a      	mov	sl, r3
 8000680:	1a2d      	subs	r5, r5, r0
 8000682:	e744      	b.n	800050e <__aeabi_fmul+0x32>
 8000684:	4640      	mov	r0, r8
 8000686:	f000 fed1 	bl	800142c <__clzsi2>
 800068a:	4642      	mov	r2, r8
 800068c:	1f43      	subs	r3, r0, #5
 800068e:	409a      	lsls	r2, r3
 8000690:	2300      	movs	r3, #0
 8000692:	1a2d      	subs	r5, r5, r0
 8000694:	4690      	mov	r8, r2
 8000696:	469c      	mov	ip, r3
 8000698:	3d76      	subs	r5, #118	; 0x76
 800069a:	e74e      	b.n	800053a <__aeabi_fmul+0x5e>
 800069c:	2480      	movs	r4, #128	; 0x80
 800069e:	2100      	movs	r1, #0
 80006a0:	20ff      	movs	r0, #255	; 0xff
 80006a2:	03e4      	lsls	r4, r4, #15
 80006a4:	e760      	b.n	8000568 <__aeabi_fmul+0x8c>
 80006a6:	2301      	movs	r3, #1
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	2b1b      	cmp	r3, #27
 80006ac:	dd00      	ble.n	80006b0 <__aeabi_fmul+0x1d4>
 80006ae:	e759      	b.n	8000564 <__aeabi_fmul+0x88>
 80006b0:	0022      	movs	r2, r4
 80006b2:	309e      	adds	r0, #158	; 0x9e
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	4084      	lsls	r4, r0
 80006b8:	0013      	movs	r3, r2
 80006ba:	1e62      	subs	r2, r4, #1
 80006bc:	4194      	sbcs	r4, r2
 80006be:	431c      	orrs	r4, r3
 80006c0:	0763      	lsls	r3, r4, #29
 80006c2:	d004      	beq.n	80006ce <__aeabi_fmul+0x1f2>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4023      	ands	r3, r4
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fmul+0x1f2>
 80006cc:	3404      	adds	r4, #4
 80006ce:	0163      	lsls	r3, r4, #5
 80006d0:	d51a      	bpl.n	8000708 <__aeabi_fmul+0x22c>
 80006d2:	2001      	movs	r0, #1
 80006d4:	2400      	movs	r4, #0
 80006d6:	e747      	b.n	8000568 <__aeabi_fmul+0x8c>
 80006d8:	2080      	movs	r0, #128	; 0x80
 80006da:	03c0      	lsls	r0, r0, #15
 80006dc:	4204      	tst	r4, r0
 80006de:	d009      	beq.n	80006f4 <__aeabi_fmul+0x218>
 80006e0:	4643      	mov	r3, r8
 80006e2:	4203      	tst	r3, r0
 80006e4:	d106      	bne.n	80006f4 <__aeabi_fmul+0x218>
 80006e6:	4644      	mov	r4, r8
 80006e8:	4304      	orrs	r4, r0
 80006ea:	0264      	lsls	r4, r4, #9
 80006ec:	0039      	movs	r1, r7
 80006ee:	20ff      	movs	r0, #255	; 0xff
 80006f0:	0a64      	lsrs	r4, r4, #9
 80006f2:	e739      	b.n	8000568 <__aeabi_fmul+0x8c>
 80006f4:	2080      	movs	r0, #128	; 0x80
 80006f6:	03c0      	lsls	r0, r0, #15
 80006f8:	4304      	orrs	r4, r0
 80006fa:	0264      	lsls	r4, r4, #9
 80006fc:	0031      	movs	r1, r6
 80006fe:	20ff      	movs	r0, #255	; 0xff
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	e731      	b.n	8000568 <__aeabi_fmul+0x8c>
 8000704:	0028      	movs	r0, r5
 8000706:	e765      	b.n	80005d4 <__aeabi_fmul+0xf8>
 8000708:	01a4      	lsls	r4, r4, #6
 800070a:	2000      	movs	r0, #0
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	e72b      	b.n	8000568 <__aeabi_fmul+0x8c>
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	03c0      	lsls	r0, r0, #15
 8000714:	4304      	orrs	r4, r0
 8000716:	0264      	lsls	r4, r4, #9
 8000718:	20ff      	movs	r0, #255	; 0xff
 800071a:	0a64      	lsrs	r4, r4, #9
 800071c:	e724      	b.n	8000568 <__aeabi_fmul+0x8c>
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	08004d54 	.word	0x08004d54
 8000724:	f7ffffff 	.word	0xf7ffffff

08000728 <__aeabi_fsub>:
 8000728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072a:	46ce      	mov	lr, r9
 800072c:	4647      	mov	r7, r8
 800072e:	0243      	lsls	r3, r0, #9
 8000730:	0a5b      	lsrs	r3, r3, #9
 8000732:	024e      	lsls	r6, r1, #9
 8000734:	00da      	lsls	r2, r3, #3
 8000736:	4694      	mov	ip, r2
 8000738:	0a72      	lsrs	r2, r6, #9
 800073a:	4691      	mov	r9, r2
 800073c:	0045      	lsls	r5, r0, #1
 800073e:	004a      	lsls	r2, r1, #1
 8000740:	b580      	push	{r7, lr}
 8000742:	0e2d      	lsrs	r5, r5, #24
 8000744:	001f      	movs	r7, r3
 8000746:	0fc4      	lsrs	r4, r0, #31
 8000748:	0e12      	lsrs	r2, r2, #24
 800074a:	0fc9      	lsrs	r1, r1, #31
 800074c:	09b6      	lsrs	r6, r6, #6
 800074e:	2aff      	cmp	r2, #255	; 0xff
 8000750:	d05b      	beq.n	800080a <__aeabi_fsub+0xe2>
 8000752:	2001      	movs	r0, #1
 8000754:	4041      	eors	r1, r0
 8000756:	428c      	cmp	r4, r1
 8000758:	d039      	beq.n	80007ce <__aeabi_fsub+0xa6>
 800075a:	1aa8      	subs	r0, r5, r2
 800075c:	2800      	cmp	r0, #0
 800075e:	dd5a      	ble.n	8000816 <__aeabi_fsub+0xee>
 8000760:	2a00      	cmp	r2, #0
 8000762:	d06a      	beq.n	800083a <__aeabi_fsub+0x112>
 8000764:	2dff      	cmp	r5, #255	; 0xff
 8000766:	d100      	bne.n	800076a <__aeabi_fsub+0x42>
 8000768:	e0d9      	b.n	800091e <__aeabi_fsub+0x1f6>
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4316      	orrs	r6, r2
 8000770:	281b      	cmp	r0, #27
 8000772:	dc00      	bgt.n	8000776 <__aeabi_fsub+0x4e>
 8000774:	e0e9      	b.n	800094a <__aeabi_fsub+0x222>
 8000776:	2001      	movs	r0, #1
 8000778:	4663      	mov	r3, ip
 800077a:	1a18      	subs	r0, r3, r0
 800077c:	0143      	lsls	r3, r0, #5
 800077e:	d400      	bmi.n	8000782 <__aeabi_fsub+0x5a>
 8000780:	e0b4      	b.n	80008ec <__aeabi_fsub+0x1c4>
 8000782:	0180      	lsls	r0, r0, #6
 8000784:	0987      	lsrs	r7, r0, #6
 8000786:	0038      	movs	r0, r7
 8000788:	f000 fe50 	bl	800142c <__clzsi2>
 800078c:	3805      	subs	r0, #5
 800078e:	4087      	lsls	r7, r0
 8000790:	4285      	cmp	r5, r0
 8000792:	dc00      	bgt.n	8000796 <__aeabi_fsub+0x6e>
 8000794:	e0cc      	b.n	8000930 <__aeabi_fsub+0x208>
 8000796:	1a2d      	subs	r5, r5, r0
 8000798:	48b5      	ldr	r0, [pc, #724]	; (8000a70 <__aeabi_fsub+0x348>)
 800079a:	4038      	ands	r0, r7
 800079c:	0743      	lsls	r3, r0, #29
 800079e:	d004      	beq.n	80007aa <__aeabi_fsub+0x82>
 80007a0:	230f      	movs	r3, #15
 80007a2:	4003      	ands	r3, r0
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d000      	beq.n	80007aa <__aeabi_fsub+0x82>
 80007a8:	3004      	adds	r0, #4
 80007aa:	0143      	lsls	r3, r0, #5
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_fsub+0x88>
 80007ae:	e0a0      	b.n	80008f2 <__aeabi_fsub+0x1ca>
 80007b0:	1c6a      	adds	r2, r5, #1
 80007b2:	2dfe      	cmp	r5, #254	; 0xfe
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fsub+0x90>
 80007b6:	e08d      	b.n	80008d4 <__aeabi_fsub+0x1ac>
 80007b8:	0180      	lsls	r0, r0, #6
 80007ba:	0a47      	lsrs	r7, r0, #9
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	05d0      	lsls	r0, r2, #23
 80007c0:	4338      	orrs	r0, r7
 80007c2:	07e4      	lsls	r4, r4, #31
 80007c4:	4320      	orrs	r0, r4
 80007c6:	bcc0      	pop	{r6, r7}
 80007c8:	46b9      	mov	r9, r7
 80007ca:	46b0      	mov	r8, r6
 80007cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ce:	1aa8      	subs	r0, r5, r2
 80007d0:	4680      	mov	r8, r0
 80007d2:	2800      	cmp	r0, #0
 80007d4:	dd45      	ble.n	8000862 <__aeabi_fsub+0x13a>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d070      	beq.n	80008bc <__aeabi_fsub+0x194>
 80007da:	2dff      	cmp	r5, #255	; 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fsub+0xb8>
 80007de:	e09e      	b.n	800091e <__aeabi_fsub+0x1f6>
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	04db      	lsls	r3, r3, #19
 80007e4:	431e      	orrs	r6, r3
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b1b      	cmp	r3, #27
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_fsub+0xc6>
 80007ec:	e0d2      	b.n	8000994 <__aeabi_fsub+0x26c>
 80007ee:	2001      	movs	r0, #1
 80007f0:	4460      	add	r0, ip
 80007f2:	0143      	lsls	r3, r0, #5
 80007f4:	d57a      	bpl.n	80008ec <__aeabi_fsub+0x1c4>
 80007f6:	3501      	adds	r5, #1
 80007f8:	2dff      	cmp	r5, #255	; 0xff
 80007fa:	d06b      	beq.n	80008d4 <__aeabi_fsub+0x1ac>
 80007fc:	2301      	movs	r3, #1
 80007fe:	4a9d      	ldr	r2, [pc, #628]	; (8000a74 <__aeabi_fsub+0x34c>)
 8000800:	4003      	ands	r3, r0
 8000802:	0840      	lsrs	r0, r0, #1
 8000804:	4010      	ands	r0, r2
 8000806:	4318      	orrs	r0, r3
 8000808:	e7c8      	b.n	800079c <__aeabi_fsub+0x74>
 800080a:	2e00      	cmp	r6, #0
 800080c:	d020      	beq.n	8000850 <__aeabi_fsub+0x128>
 800080e:	428c      	cmp	r4, r1
 8000810:	d023      	beq.n	800085a <__aeabi_fsub+0x132>
 8000812:	0028      	movs	r0, r5
 8000814:	38ff      	subs	r0, #255	; 0xff
 8000816:	2800      	cmp	r0, #0
 8000818:	d039      	beq.n	800088e <__aeabi_fsub+0x166>
 800081a:	1b57      	subs	r7, r2, r5
 800081c:	2d00      	cmp	r5, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fsub+0xfa>
 8000820:	e09d      	b.n	800095e <__aeabi_fsub+0x236>
 8000822:	4663      	mov	r3, ip
 8000824:	2b00      	cmp	r3, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fsub+0x102>
 8000828:	e0db      	b.n	80009e2 <__aeabi_fsub+0x2ba>
 800082a:	1e7b      	subs	r3, r7, #1
 800082c:	2f01      	cmp	r7, #1
 800082e:	d100      	bne.n	8000832 <__aeabi_fsub+0x10a>
 8000830:	e10d      	b.n	8000a4e <__aeabi_fsub+0x326>
 8000832:	2fff      	cmp	r7, #255	; 0xff
 8000834:	d071      	beq.n	800091a <__aeabi_fsub+0x1f2>
 8000836:	001f      	movs	r7, r3
 8000838:	e098      	b.n	800096c <__aeabi_fsub+0x244>
 800083a:	2e00      	cmp	r6, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fsub+0x118>
 800083e:	e0a7      	b.n	8000990 <__aeabi_fsub+0x268>
 8000840:	1e42      	subs	r2, r0, #1
 8000842:	2801      	cmp	r0, #1
 8000844:	d100      	bne.n	8000848 <__aeabi_fsub+0x120>
 8000846:	e0e6      	b.n	8000a16 <__aeabi_fsub+0x2ee>
 8000848:	28ff      	cmp	r0, #255	; 0xff
 800084a:	d068      	beq.n	800091e <__aeabi_fsub+0x1f6>
 800084c:	0010      	movs	r0, r2
 800084e:	e78f      	b.n	8000770 <__aeabi_fsub+0x48>
 8000850:	2001      	movs	r0, #1
 8000852:	4041      	eors	r1, r0
 8000854:	42a1      	cmp	r1, r4
 8000856:	d000      	beq.n	800085a <__aeabi_fsub+0x132>
 8000858:	e77f      	b.n	800075a <__aeabi_fsub+0x32>
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	4240      	negs	r0, r0
 800085e:	4680      	mov	r8, r0
 8000860:	44a8      	add	r8, r5
 8000862:	4640      	mov	r0, r8
 8000864:	2800      	cmp	r0, #0
 8000866:	d038      	beq.n	80008da <__aeabi_fsub+0x1b2>
 8000868:	1b51      	subs	r1, r2, r5
 800086a:	2d00      	cmp	r5, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x148>
 800086e:	e0ae      	b.n	80009ce <__aeabi_fsub+0x2a6>
 8000870:	2aff      	cmp	r2, #255	; 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fsub+0x14e>
 8000874:	e0df      	b.n	8000a36 <__aeabi_fsub+0x30e>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	4660      	mov	r0, ip
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	4318      	orrs	r0, r3
 800087e:	4684      	mov	ip, r0
 8000880:	291b      	cmp	r1, #27
 8000882:	dc00      	bgt.n	8000886 <__aeabi_fsub+0x15e>
 8000884:	e0d9      	b.n	8000a3a <__aeabi_fsub+0x312>
 8000886:	2001      	movs	r0, #1
 8000888:	0015      	movs	r5, r2
 800088a:	1980      	adds	r0, r0, r6
 800088c:	e7b1      	b.n	80007f2 <__aeabi_fsub+0xca>
 800088e:	20fe      	movs	r0, #254	; 0xfe
 8000890:	1c6a      	adds	r2, r5, #1
 8000892:	4210      	tst	r0, r2
 8000894:	d171      	bne.n	800097a <__aeabi_fsub+0x252>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d000      	beq.n	800089c <__aeabi_fsub+0x174>
 800089a:	e0a6      	b.n	80009ea <__aeabi_fsub+0x2c2>
 800089c:	4663      	mov	r3, ip
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x17c>
 80008a2:	e0d9      	b.n	8000a58 <__aeabi_fsub+0x330>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fsub+0x184>
 80008aa:	e788      	b.n	80007be <__aeabi_fsub+0x96>
 80008ac:	1b98      	subs	r0, r3, r6
 80008ae:	0143      	lsls	r3, r0, #5
 80008b0:	d400      	bmi.n	80008b4 <__aeabi_fsub+0x18c>
 80008b2:	e0e1      	b.n	8000a78 <__aeabi_fsub+0x350>
 80008b4:	4663      	mov	r3, ip
 80008b6:	000c      	movs	r4, r1
 80008b8:	1af0      	subs	r0, r6, r3
 80008ba:	e76f      	b.n	800079c <__aeabi_fsub+0x74>
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x19a>
 80008c0:	e0b7      	b.n	8000a32 <__aeabi_fsub+0x30a>
 80008c2:	0002      	movs	r2, r0
 80008c4:	3a01      	subs	r2, #1
 80008c6:	2801      	cmp	r0, #1
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x1a4>
 80008ca:	e09c      	b.n	8000a06 <__aeabi_fsub+0x2de>
 80008cc:	28ff      	cmp	r0, #255	; 0xff
 80008ce:	d026      	beq.n	800091e <__aeabi_fsub+0x1f6>
 80008d0:	4690      	mov	r8, r2
 80008d2:	e788      	b.n	80007e6 <__aeabi_fsub+0xbe>
 80008d4:	22ff      	movs	r2, #255	; 0xff
 80008d6:	2700      	movs	r7, #0
 80008d8:	e771      	b.n	80007be <__aeabi_fsub+0x96>
 80008da:	20fe      	movs	r0, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4210      	tst	r0, r2
 80008e0:	d064      	beq.n	80009ac <__aeabi_fsub+0x284>
 80008e2:	2aff      	cmp	r2, #255	; 0xff
 80008e4:	d0f6      	beq.n	80008d4 <__aeabi_fsub+0x1ac>
 80008e6:	0015      	movs	r5, r2
 80008e8:	4466      	add	r6, ip
 80008ea:	0870      	lsrs	r0, r6, #1
 80008ec:	0743      	lsls	r3, r0, #29
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fsub+0x1ca>
 80008f0:	e756      	b.n	80007a0 <__aeabi_fsub+0x78>
 80008f2:	08c3      	lsrs	r3, r0, #3
 80008f4:	2dff      	cmp	r5, #255	; 0xff
 80008f6:	d012      	beq.n	800091e <__aeabi_fsub+0x1f6>
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	0a5f      	lsrs	r7, r3, #9
 80008fc:	b2ea      	uxtb	r2, r5
 80008fe:	e75e      	b.n	80007be <__aeabi_fsub+0x96>
 8000900:	4662      	mov	r2, ip
 8000902:	2a00      	cmp	r2, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fsub+0x1e0>
 8000906:	e096      	b.n	8000a36 <__aeabi_fsub+0x30e>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d008      	beq.n	800091e <__aeabi_fsub+0x1f6>
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	4213      	tst	r3, r2
 8000912:	d004      	beq.n	800091e <__aeabi_fsub+0x1f6>
 8000914:	4648      	mov	r0, r9
 8000916:	4210      	tst	r0, r2
 8000918:	d101      	bne.n	800091e <__aeabi_fsub+0x1f6>
 800091a:	000c      	movs	r4, r1
 800091c:	464b      	mov	r3, r9
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0d8      	beq.n	80008d4 <__aeabi_fsub+0x1ac>
 8000922:	2780      	movs	r7, #128	; 0x80
 8000924:	03ff      	lsls	r7, r7, #15
 8000926:	431f      	orrs	r7, r3
 8000928:	027f      	lsls	r7, r7, #9
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	0a7f      	lsrs	r7, r7, #9
 800092e:	e746      	b.n	80007be <__aeabi_fsub+0x96>
 8000930:	2320      	movs	r3, #32
 8000932:	003a      	movs	r2, r7
 8000934:	1b45      	subs	r5, r0, r5
 8000936:	0038      	movs	r0, r7
 8000938:	3501      	adds	r5, #1
 800093a:	40ea      	lsrs	r2, r5
 800093c:	1b5d      	subs	r5, r3, r5
 800093e:	40a8      	lsls	r0, r5
 8000940:	1e43      	subs	r3, r0, #1
 8000942:	4198      	sbcs	r0, r3
 8000944:	2500      	movs	r5, #0
 8000946:	4310      	orrs	r0, r2
 8000948:	e728      	b.n	800079c <__aeabi_fsub+0x74>
 800094a:	2320      	movs	r3, #32
 800094c:	1a1b      	subs	r3, r3, r0
 800094e:	0032      	movs	r2, r6
 8000950:	409e      	lsls	r6, r3
 8000952:	40c2      	lsrs	r2, r0
 8000954:	0030      	movs	r0, r6
 8000956:	1e43      	subs	r3, r0, #1
 8000958:	4198      	sbcs	r0, r3
 800095a:	4310      	orrs	r0, r2
 800095c:	e70c      	b.n	8000778 <__aeabi_fsub+0x50>
 800095e:	2aff      	cmp	r2, #255	; 0xff
 8000960:	d0db      	beq.n	800091a <__aeabi_fsub+0x1f2>
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	4660      	mov	r0, ip
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4318      	orrs	r0, r3
 800096a:	4684      	mov	ip, r0
 800096c:	2f1b      	cmp	r7, #27
 800096e:	dd56      	ble.n	8000a1e <__aeabi_fsub+0x2f6>
 8000970:	2001      	movs	r0, #1
 8000972:	000c      	movs	r4, r1
 8000974:	0015      	movs	r5, r2
 8000976:	1a30      	subs	r0, r6, r0
 8000978:	e700      	b.n	800077c <__aeabi_fsub+0x54>
 800097a:	4663      	mov	r3, ip
 800097c:	1b9f      	subs	r7, r3, r6
 800097e:	017b      	lsls	r3, r7, #5
 8000980:	d43d      	bmi.n	80009fe <__aeabi_fsub+0x2d6>
 8000982:	2f00      	cmp	r7, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fsub+0x260>
 8000986:	e6fe      	b.n	8000786 <__aeabi_fsub+0x5e>
 8000988:	2400      	movs	r4, #0
 800098a:	2200      	movs	r2, #0
 800098c:	2700      	movs	r7, #0
 800098e:	e716      	b.n	80007be <__aeabi_fsub+0x96>
 8000990:	0005      	movs	r5, r0
 8000992:	e7af      	b.n	80008f4 <__aeabi_fsub+0x1cc>
 8000994:	0032      	movs	r2, r6
 8000996:	4643      	mov	r3, r8
 8000998:	4641      	mov	r1, r8
 800099a:	40da      	lsrs	r2, r3
 800099c:	2320      	movs	r3, #32
 800099e:	1a5b      	subs	r3, r3, r1
 80009a0:	409e      	lsls	r6, r3
 80009a2:	0030      	movs	r0, r6
 80009a4:	1e43      	subs	r3, r0, #1
 80009a6:	4198      	sbcs	r0, r3
 80009a8:	4310      	orrs	r0, r2
 80009aa:	e721      	b.n	80007f0 <__aeabi_fsub+0xc8>
 80009ac:	2d00      	cmp	r5, #0
 80009ae:	d1a7      	bne.n	8000900 <__aeabi_fsub+0x1d8>
 80009b0:	4663      	mov	r3, ip
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d059      	beq.n	8000a6a <__aeabi_fsub+0x342>
 80009b6:	2200      	movs	r2, #0
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x296>
 80009bc:	e6ff      	b.n	80007be <__aeabi_fsub+0x96>
 80009be:	0030      	movs	r0, r6
 80009c0:	4460      	add	r0, ip
 80009c2:	0143      	lsls	r3, r0, #5
 80009c4:	d592      	bpl.n	80008ec <__aeabi_fsub+0x1c4>
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <__aeabi_fsub+0x348>)
 80009c8:	3501      	adds	r5, #1
 80009ca:	4018      	ands	r0, r3
 80009cc:	e78e      	b.n	80008ec <__aeabi_fsub+0x1c4>
 80009ce:	4663      	mov	r3, ip
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d047      	beq.n	8000a64 <__aeabi_fsub+0x33c>
 80009d4:	1e4b      	subs	r3, r1, #1
 80009d6:	2901      	cmp	r1, #1
 80009d8:	d015      	beq.n	8000a06 <__aeabi_fsub+0x2de>
 80009da:	29ff      	cmp	r1, #255	; 0xff
 80009dc:	d02b      	beq.n	8000a36 <__aeabi_fsub+0x30e>
 80009de:	0019      	movs	r1, r3
 80009e0:	e74e      	b.n	8000880 <__aeabi_fsub+0x158>
 80009e2:	000c      	movs	r4, r1
 80009e4:	464b      	mov	r3, r9
 80009e6:	003d      	movs	r5, r7
 80009e8:	e784      	b.n	80008f4 <__aeabi_fsub+0x1cc>
 80009ea:	4662      	mov	r2, ip
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d18b      	bne.n	8000908 <__aeabi_fsub+0x1e0>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d192      	bne.n	800091a <__aeabi_fsub+0x1f2>
 80009f4:	2780      	movs	r7, #128	; 0x80
 80009f6:	2400      	movs	r4, #0
 80009f8:	22ff      	movs	r2, #255	; 0xff
 80009fa:	03ff      	lsls	r7, r7, #15
 80009fc:	e6df      	b.n	80007be <__aeabi_fsub+0x96>
 80009fe:	4663      	mov	r3, ip
 8000a00:	000c      	movs	r4, r1
 8000a02:	1af7      	subs	r7, r6, r3
 8000a04:	e6bf      	b.n	8000786 <__aeabi_fsub+0x5e>
 8000a06:	0030      	movs	r0, r6
 8000a08:	4460      	add	r0, ip
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	0143      	lsls	r3, r0, #5
 8000a0e:	d400      	bmi.n	8000a12 <__aeabi_fsub+0x2ea>
 8000a10:	e76c      	b.n	80008ec <__aeabi_fsub+0x1c4>
 8000a12:	2502      	movs	r5, #2
 8000a14:	e6f2      	b.n	80007fc <__aeabi_fsub+0xd4>
 8000a16:	4663      	mov	r3, ip
 8000a18:	2501      	movs	r5, #1
 8000a1a:	1b98      	subs	r0, r3, r6
 8000a1c:	e6ae      	b.n	800077c <__aeabi_fsub+0x54>
 8000a1e:	2320      	movs	r3, #32
 8000a20:	4664      	mov	r4, ip
 8000a22:	4660      	mov	r0, ip
 8000a24:	40fc      	lsrs	r4, r7
 8000a26:	1bdf      	subs	r7, r3, r7
 8000a28:	40b8      	lsls	r0, r7
 8000a2a:	1e43      	subs	r3, r0, #1
 8000a2c:	4198      	sbcs	r0, r3
 8000a2e:	4320      	orrs	r0, r4
 8000a30:	e79f      	b.n	8000972 <__aeabi_fsub+0x24a>
 8000a32:	0005      	movs	r5, r0
 8000a34:	e75e      	b.n	80008f4 <__aeabi_fsub+0x1cc>
 8000a36:	464b      	mov	r3, r9
 8000a38:	e771      	b.n	800091e <__aeabi_fsub+0x1f6>
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	4665      	mov	r5, ip
 8000a3e:	4660      	mov	r0, ip
 8000a40:	40cd      	lsrs	r5, r1
 8000a42:	1a59      	subs	r1, r3, r1
 8000a44:	4088      	lsls	r0, r1
 8000a46:	1e43      	subs	r3, r0, #1
 8000a48:	4198      	sbcs	r0, r3
 8000a4a:	4328      	orrs	r0, r5
 8000a4c:	e71c      	b.n	8000888 <__aeabi_fsub+0x160>
 8000a4e:	4663      	mov	r3, ip
 8000a50:	000c      	movs	r4, r1
 8000a52:	2501      	movs	r5, #1
 8000a54:	1af0      	subs	r0, r6, r3
 8000a56:	e691      	b.n	800077c <__aeabi_fsub+0x54>
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d095      	beq.n	8000988 <__aeabi_fsub+0x260>
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	464f      	mov	r7, r9
 8000a60:	2200      	movs	r2, #0
 8000a62:	e6ac      	b.n	80007be <__aeabi_fsub+0x96>
 8000a64:	464b      	mov	r3, r9
 8000a66:	000d      	movs	r5, r1
 8000a68:	e744      	b.n	80008f4 <__aeabi_fsub+0x1cc>
 8000a6a:	464f      	mov	r7, r9
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	e6a6      	b.n	80007be <__aeabi_fsub+0x96>
 8000a70:	fbffffff 	.word	0xfbffffff
 8000a74:	7dffffff 	.word	0x7dffffff
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x356>
 8000a7c:	e736      	b.n	80008ec <__aeabi_fsub+0x1c4>
 8000a7e:	2400      	movs	r4, #0
 8000a80:	2700      	movs	r7, #0
 8000a82:	e69c      	b.n	80007be <__aeabi_fsub+0x96>

08000a84 <__aeabi_f2iz>:
 8000a84:	0241      	lsls	r1, r0, #9
 8000a86:	0042      	lsls	r2, r0, #1
 8000a88:	0fc3      	lsrs	r3, r0, #31
 8000a8a:	0a49      	lsrs	r1, r1, #9
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	0e12      	lsrs	r2, r2, #24
 8000a90:	2a7e      	cmp	r2, #126	; 0x7e
 8000a92:	dd03      	ble.n	8000a9c <__aeabi_f2iz+0x18>
 8000a94:	2a9d      	cmp	r2, #157	; 0x9d
 8000a96:	dd02      	ble.n	8000a9e <__aeabi_f2iz+0x1a>
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <__aeabi_f2iz+0x3c>)
 8000a9a:	1898      	adds	r0, r3, r2
 8000a9c:	4770      	bx	lr
 8000a9e:	2080      	movs	r0, #128	; 0x80
 8000aa0:	0400      	lsls	r0, r0, #16
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	2a95      	cmp	r2, #149	; 0x95
 8000aa6:	dc07      	bgt.n	8000ab8 <__aeabi_f2iz+0x34>
 8000aa8:	2096      	movs	r0, #150	; 0x96
 8000aaa:	1a82      	subs	r2, r0, r2
 8000aac:	40d1      	lsrs	r1, r2
 8000aae:	4248      	negs	r0, r1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f3      	bne.n	8000a9c <__aeabi_f2iz+0x18>
 8000ab4:	0008      	movs	r0, r1
 8000ab6:	e7f1      	b.n	8000a9c <__aeabi_f2iz+0x18>
 8000ab8:	3a96      	subs	r2, #150	; 0x96
 8000aba:	4091      	lsls	r1, r2
 8000abc:	e7f7      	b.n	8000aae <__aeabi_f2iz+0x2a>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	7fffffff 	.word	0x7fffffff

08000ac4 <__aeabi_i2f>:
 8000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d013      	beq.n	8000af2 <__aeabi_i2f+0x2e>
 8000aca:	17c3      	asrs	r3, r0, #31
 8000acc:	18c6      	adds	r6, r0, r3
 8000ace:	405e      	eors	r6, r3
 8000ad0:	0fc4      	lsrs	r4, r0, #31
 8000ad2:	0030      	movs	r0, r6
 8000ad4:	f000 fcaa 	bl	800142c <__clzsi2>
 8000ad8:	239e      	movs	r3, #158	; 0x9e
 8000ada:	0005      	movs	r5, r0
 8000adc:	1a1b      	subs	r3, r3, r0
 8000ade:	2b96      	cmp	r3, #150	; 0x96
 8000ae0:	dc0f      	bgt.n	8000b02 <__aeabi_i2f+0x3e>
 8000ae2:	2808      	cmp	r0, #8
 8000ae4:	dd01      	ble.n	8000aea <__aeabi_i2f+0x26>
 8000ae6:	3d08      	subs	r5, #8
 8000ae8:	40ae      	lsls	r6, r5
 8000aea:	0276      	lsls	r6, r6, #9
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	b2d8      	uxtb	r0, r3
 8000af0:	e002      	b.n	8000af8 <__aeabi_i2f+0x34>
 8000af2:	2400      	movs	r4, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	2600      	movs	r6, #0
 8000af8:	05c0      	lsls	r0, r0, #23
 8000afa:	4330      	orrs	r0, r6
 8000afc:	07e4      	lsls	r4, r4, #31
 8000afe:	4320      	orrs	r0, r4
 8000b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b02:	2b99      	cmp	r3, #153	; 0x99
 8000b04:	dd0c      	ble.n	8000b20 <__aeabi_i2f+0x5c>
 8000b06:	2205      	movs	r2, #5
 8000b08:	0031      	movs	r1, r6
 8000b0a:	1a12      	subs	r2, r2, r0
 8000b0c:	40d1      	lsrs	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	0001      	movs	r1, r0
 8000b12:	0030      	movs	r0, r6
 8000b14:	311b      	adds	r1, #27
 8000b16:	4088      	lsls	r0, r1
 8000b18:	1e41      	subs	r1, r0, #1
 8000b1a:	4188      	sbcs	r0, r1
 8000b1c:	4302      	orrs	r2, r0
 8000b1e:	0016      	movs	r6, r2
 8000b20:	2d05      	cmp	r5, #5
 8000b22:	dc12      	bgt.n	8000b4a <__aeabi_i2f+0x86>
 8000b24:	0031      	movs	r1, r6
 8000b26:	4f0d      	ldr	r7, [pc, #52]	; (8000b5c <__aeabi_i2f+0x98>)
 8000b28:	4039      	ands	r1, r7
 8000b2a:	0772      	lsls	r2, r6, #29
 8000b2c:	d009      	beq.n	8000b42 <__aeabi_i2f+0x7e>
 8000b2e:	200f      	movs	r0, #15
 8000b30:	4030      	ands	r0, r6
 8000b32:	2804      	cmp	r0, #4
 8000b34:	d005      	beq.n	8000b42 <__aeabi_i2f+0x7e>
 8000b36:	3104      	adds	r1, #4
 8000b38:	014a      	lsls	r2, r1, #5
 8000b3a:	d502      	bpl.n	8000b42 <__aeabi_i2f+0x7e>
 8000b3c:	239f      	movs	r3, #159	; 0x9f
 8000b3e:	4039      	ands	r1, r7
 8000b40:	1b5b      	subs	r3, r3, r5
 8000b42:	0189      	lsls	r1, r1, #6
 8000b44:	0a4e      	lsrs	r6, r1, #9
 8000b46:	b2d8      	uxtb	r0, r3
 8000b48:	e7d6      	b.n	8000af8 <__aeabi_i2f+0x34>
 8000b4a:	1f6a      	subs	r2, r5, #5
 8000b4c:	4096      	lsls	r6, r2
 8000b4e:	0031      	movs	r1, r6
 8000b50:	4f02      	ldr	r7, [pc, #8]	; (8000b5c <__aeabi_i2f+0x98>)
 8000b52:	4039      	ands	r1, r7
 8000b54:	0772      	lsls	r2, r6, #29
 8000b56:	d0f4      	beq.n	8000b42 <__aeabi_i2f+0x7e>
 8000b58:	e7e9      	b.n	8000b2e <__aeabi_i2f+0x6a>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	fbffffff 	.word	0xfbffffff

08000b60 <__aeabi_dsub>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	4657      	mov	r7, sl
 8000b64:	464e      	mov	r6, r9
 8000b66:	4645      	mov	r5, r8
 8000b68:	46de      	mov	lr, fp
 8000b6a:	b5e0      	push	{r5, r6, r7, lr}
 8000b6c:	001e      	movs	r6, r3
 8000b6e:	0017      	movs	r7, r2
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	030b      	lsls	r3, r1, #12
 8000b74:	0d52      	lsrs	r2, r2, #21
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	4690      	mov	r8, r2
 8000b7a:	0f42      	lsrs	r2, r0, #29
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	0fcd      	lsrs	r5, r1, #31
 8000b80:	4ccd      	ldr	r4, [pc, #820]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000b82:	0331      	lsls	r1, r6, #12
 8000b84:	00c3      	lsls	r3, r0, #3
 8000b86:	4694      	mov	ip, r2
 8000b88:	0070      	lsls	r0, r6, #1
 8000b8a:	0f7a      	lsrs	r2, r7, #29
 8000b8c:	0a49      	lsrs	r1, r1, #9
 8000b8e:	00ff      	lsls	r7, r7, #3
 8000b90:	469a      	mov	sl, r3
 8000b92:	46b9      	mov	r9, r7
 8000b94:	0d40      	lsrs	r0, r0, #21
 8000b96:	0ff6      	lsrs	r6, r6, #31
 8000b98:	4311      	orrs	r1, r2
 8000b9a:	42a0      	cmp	r0, r4
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dsub+0x40>
 8000b9e:	e0b1      	b.n	8000d04 <__aeabi_dsub+0x1a4>
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4056      	eors	r6, r2
 8000ba4:	46b3      	mov	fp, r6
 8000ba6:	42b5      	cmp	r5, r6
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dsub+0x4c>
 8000baa:	e088      	b.n	8000cbe <__aeabi_dsub+0x15e>
 8000bac:	4642      	mov	r2, r8
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dsub+0x56>
 8000bb4:	e0ae      	b.n	8000d14 <__aeabi_dsub+0x1b4>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dsub+0x5c>
 8000bba:	e0c1      	b.n	8000d40 <__aeabi_dsub+0x1e0>
 8000bbc:	48be      	ldr	r0, [pc, #760]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000bbe:	4580      	cmp	r8, r0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dsub+0x64>
 8000bc2:	e151      	b.n	8000e68 <__aeabi_dsub+0x308>
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	0400      	lsls	r0, r0, #16
 8000bc8:	4301      	orrs	r1, r0
 8000bca:	2a38      	cmp	r2, #56	; 0x38
 8000bcc:	dd00      	ble.n	8000bd0 <__aeabi_dsub+0x70>
 8000bce:	e17b      	b.n	8000ec8 <__aeabi_dsub+0x368>
 8000bd0:	2a1f      	cmp	r2, #31
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dsub+0x76>
 8000bd4:	e1ee      	b.n	8000fb4 <__aeabi_dsub+0x454>
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	003e      	movs	r6, r7
 8000bda:	1a80      	subs	r0, r0, r2
 8000bdc:	000c      	movs	r4, r1
 8000bde:	40d6      	lsrs	r6, r2
 8000be0:	40d1      	lsrs	r1, r2
 8000be2:	4087      	lsls	r7, r0
 8000be4:	4662      	mov	r2, ip
 8000be6:	4084      	lsls	r4, r0
 8000be8:	1a52      	subs	r2, r2, r1
 8000bea:	1e78      	subs	r0, r7, #1
 8000bec:	4187      	sbcs	r7, r0
 8000bee:	4694      	mov	ip, r2
 8000bf0:	4334      	orrs	r4, r6
 8000bf2:	4327      	orrs	r7, r4
 8000bf4:	1bdc      	subs	r4, r3, r7
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	419b      	sbcs	r3, r3
 8000bfa:	4662      	mov	r2, ip
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	4699      	mov	r9, r3
 8000c02:	464b      	mov	r3, r9
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	d400      	bmi.n	8000c0a <__aeabi_dsub+0xaa>
 8000c08:	e118      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	0258      	lsls	r0, r3, #9
 8000c0e:	0a43      	lsrs	r3, r0, #9
 8000c10:	4699      	mov	r9, r3
 8000c12:	464b      	mov	r3, r9
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dsub+0xba>
 8000c18:	e137      	b.n	8000e8a <__aeabi_dsub+0x32a>
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	f000 fc06 	bl	800142c <__clzsi2>
 8000c20:	0001      	movs	r1, r0
 8000c22:	3908      	subs	r1, #8
 8000c24:	2320      	movs	r3, #32
 8000c26:	0022      	movs	r2, r4
 8000c28:	4648      	mov	r0, r9
 8000c2a:	1a5b      	subs	r3, r3, r1
 8000c2c:	40da      	lsrs	r2, r3
 8000c2e:	4088      	lsls	r0, r1
 8000c30:	408c      	lsls	r4, r1
 8000c32:	4643      	mov	r3, r8
 8000c34:	4310      	orrs	r0, r2
 8000c36:	4588      	cmp	r8, r1
 8000c38:	dd00      	ble.n	8000c3c <__aeabi_dsub+0xdc>
 8000c3a:	e136      	b.n	8000eaa <__aeabi_dsub+0x34a>
 8000c3c:	1ac9      	subs	r1, r1, r3
 8000c3e:	1c4b      	adds	r3, r1, #1
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_dsub+0xe6>
 8000c44:	e0ea      	b.n	8000e1c <__aeabi_dsub+0x2bc>
 8000c46:	2220      	movs	r2, #32
 8000c48:	0026      	movs	r6, r4
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	0001      	movs	r1, r0
 8000c4e:	4094      	lsls	r4, r2
 8000c50:	40de      	lsrs	r6, r3
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	4091      	lsls	r1, r2
 8000c58:	1e62      	subs	r2, r4, #1
 8000c5a:	4194      	sbcs	r4, r2
 8000c5c:	4681      	mov	r9, r0
 8000c5e:	4698      	mov	r8, r3
 8000c60:	4331      	orrs	r1, r6
 8000c62:	430c      	orrs	r4, r1
 8000c64:	0763      	lsls	r3, r4, #29
 8000c66:	d009      	beq.n	8000c7c <__aeabi_dsub+0x11c>
 8000c68:	230f      	movs	r3, #15
 8000c6a:	4023      	ands	r3, r4
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d005      	beq.n	8000c7c <__aeabi_dsub+0x11c>
 8000c70:	1d23      	adds	r3, r4, #4
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	41a4      	sbcs	r4, r4
 8000c76:	4264      	negs	r4, r4
 8000c78:	44a1      	add	r9, r4
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_dsub+0x124>
 8000c82:	e0de      	b.n	8000e42 <__aeabi_dsub+0x2e2>
 8000c84:	4641      	mov	r1, r8
 8000c86:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000c88:	3101      	adds	r1, #1
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dsub+0x130>
 8000c8e:	e0e7      	b.n	8000e60 <__aeabi_dsub+0x300>
 8000c90:	464b      	mov	r3, r9
 8000c92:	488a      	ldr	r0, [pc, #552]	; (8000ebc <__aeabi_dsub+0x35c>)
 8000c94:	08e4      	lsrs	r4, r4, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	075b      	lsls	r3, r3, #29
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	0d4a      	lsrs	r2, r1, #21
 8000ca4:	0b04      	lsrs	r4, r0, #12
 8000ca6:	0512      	lsls	r2, r2, #20
 8000ca8:	07ed      	lsls	r5, r5, #31
 8000caa:	4322      	orrs	r2, r4
 8000cac:	432a      	orrs	r2, r5
 8000cae:	0018      	movs	r0, r3
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cb4:	46bb      	mov	fp, r7
 8000cb6:	46b2      	mov	sl, r6
 8000cb8:	46a9      	mov	r9, r5
 8000cba:	46a0      	mov	r8, r4
 8000cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbe:	4642      	mov	r2, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	dd52      	ble.n	8000d6c <__aeabi_dsub+0x20c>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dsub+0x16c>
 8000cca:	e09c      	b.n	8000e06 <__aeabi_dsub+0x2a6>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dsub+0x172>
 8000cd0:	e0ca      	b.n	8000e68 <__aeabi_dsub+0x308>
 8000cd2:	2080      	movs	r0, #128	; 0x80
 8000cd4:	0400      	lsls	r0, r0, #16
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	2a38      	cmp	r2, #56	; 0x38
 8000cda:	dd00      	ble.n	8000cde <__aeabi_dsub+0x17e>
 8000cdc:	e149      	b.n	8000f72 <__aeabi_dsub+0x412>
 8000cde:	2a1f      	cmp	r2, #31
 8000ce0:	dc00      	bgt.n	8000ce4 <__aeabi_dsub+0x184>
 8000ce2:	e197      	b.n	8001014 <__aeabi_dsub+0x4b4>
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	000e      	movs	r6, r1
 8000ce8:	3820      	subs	r0, #32
 8000cea:	40c6      	lsrs	r6, r0
 8000cec:	2a20      	cmp	r2, #32
 8000cee:	d004      	beq.n	8000cfa <__aeabi_dsub+0x19a>
 8000cf0:	2040      	movs	r0, #64	; 0x40
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	430f      	orrs	r7, r1
 8000cf8:	46b9      	mov	r9, r7
 8000cfa:	464c      	mov	r4, r9
 8000cfc:	1e62      	subs	r2, r4, #1
 8000cfe:	4194      	sbcs	r4, r2
 8000d00:	4334      	orrs	r4, r6
 8000d02:	e13a      	b.n	8000f7a <__aeabi_dsub+0x41a>
 8000d04:	000a      	movs	r2, r1
 8000d06:	433a      	orrs	r2, r7
 8000d08:	d028      	beq.n	8000d5c <__aeabi_dsub+0x1fc>
 8000d0a:	46b3      	mov	fp, r6
 8000d0c:	42b5      	cmp	r5, r6
 8000d0e:	d02b      	beq.n	8000d68 <__aeabi_dsub+0x208>
 8000d10:	4a6b      	ldr	r2, [pc, #428]	; (8000ec0 <__aeabi_dsub+0x360>)
 8000d12:	4442      	add	r2, r8
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d05d      	beq.n	8000dd4 <__aeabi_dsub+0x274>
 8000d18:	4642      	mov	r2, r8
 8000d1a:	4644      	mov	r4, r8
 8000d1c:	1a82      	subs	r2, r0, r2
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d000      	beq.n	8000d24 <__aeabi_dsub+0x1c4>
 8000d22:	e0f5      	b.n	8000f10 <__aeabi_dsub+0x3b0>
 8000d24:	4665      	mov	r5, ip
 8000d26:	431d      	orrs	r5, r3
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dsub+0x1cc>
 8000d2a:	e19c      	b.n	8001066 <__aeabi_dsub+0x506>
 8000d2c:	1e55      	subs	r5, r2, #1
 8000d2e:	2a01      	cmp	r2, #1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x1d4>
 8000d32:	e1fb      	b.n	800112c <__aeabi_dsub+0x5cc>
 8000d34:	4c60      	ldr	r4, [pc, #384]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000d36:	42a2      	cmp	r2, r4
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dsub+0x1dc>
 8000d3a:	e1bd      	b.n	80010b8 <__aeabi_dsub+0x558>
 8000d3c:	002a      	movs	r2, r5
 8000d3e:	e0f0      	b.n	8000f22 <__aeabi_dsub+0x3c2>
 8000d40:	0008      	movs	r0, r1
 8000d42:	4338      	orrs	r0, r7
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dsub+0x1e8>
 8000d46:	e0c3      	b.n	8000ed0 <__aeabi_dsub+0x370>
 8000d48:	1e50      	subs	r0, r2, #1
 8000d4a:	2a01      	cmp	r2, #1
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dsub+0x1f0>
 8000d4e:	e1a8      	b.n	80010a2 <__aeabi_dsub+0x542>
 8000d50:	4c59      	ldr	r4, [pc, #356]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000d52:	42a2      	cmp	r2, r4
 8000d54:	d100      	bne.n	8000d58 <__aeabi_dsub+0x1f8>
 8000d56:	e087      	b.n	8000e68 <__aeabi_dsub+0x308>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	e736      	b.n	8000bca <__aeabi_dsub+0x6a>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4056      	eors	r6, r2
 8000d60:	46b3      	mov	fp, r6
 8000d62:	42b5      	cmp	r5, r6
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dsub+0x208>
 8000d66:	e721      	b.n	8000bac <__aeabi_dsub+0x4c>
 8000d68:	4a55      	ldr	r2, [pc, #340]	; (8000ec0 <__aeabi_dsub+0x360>)
 8000d6a:	4442      	add	r2, r8
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_dsub+0x212>
 8000d70:	e0b5      	b.n	8000ede <__aeabi_dsub+0x37e>
 8000d72:	4642      	mov	r2, r8
 8000d74:	4644      	mov	r4, r8
 8000d76:	1a82      	subs	r2, r0, r2
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_dsub+0x21e>
 8000d7c:	e138      	b.n	8000ff0 <__aeabi_dsub+0x490>
 8000d7e:	4e4e      	ldr	r6, [pc, #312]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000d80:	42b0      	cmp	r0, r6
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dsub+0x226>
 8000d84:	e1de      	b.n	8001144 <__aeabi_dsub+0x5e4>
 8000d86:	2680      	movs	r6, #128	; 0x80
 8000d88:	4664      	mov	r4, ip
 8000d8a:	0436      	lsls	r6, r6, #16
 8000d8c:	4334      	orrs	r4, r6
 8000d8e:	46a4      	mov	ip, r4
 8000d90:	2a38      	cmp	r2, #56	; 0x38
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_dsub+0x236>
 8000d94:	e196      	b.n	80010c4 <__aeabi_dsub+0x564>
 8000d96:	2a1f      	cmp	r2, #31
 8000d98:	dd00      	ble.n	8000d9c <__aeabi_dsub+0x23c>
 8000d9a:	e224      	b.n	80011e6 <__aeabi_dsub+0x686>
 8000d9c:	2620      	movs	r6, #32
 8000d9e:	1ab4      	subs	r4, r6, r2
 8000da0:	46a2      	mov	sl, r4
 8000da2:	4664      	mov	r4, ip
 8000da4:	4656      	mov	r6, sl
 8000da6:	40b4      	lsls	r4, r6
 8000da8:	46a1      	mov	r9, r4
 8000daa:	001c      	movs	r4, r3
 8000dac:	464e      	mov	r6, r9
 8000dae:	40d4      	lsrs	r4, r2
 8000db0:	4326      	orrs	r6, r4
 8000db2:	0034      	movs	r4, r6
 8000db4:	4656      	mov	r6, sl
 8000db6:	40b3      	lsls	r3, r6
 8000db8:	1e5e      	subs	r6, r3, #1
 8000dba:	41b3      	sbcs	r3, r6
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	40d3      	lsrs	r3, r2
 8000dc2:	18c9      	adds	r1, r1, r3
 8000dc4:	19e4      	adds	r4, r4, r7
 8000dc6:	42bc      	cmp	r4, r7
 8000dc8:	41bf      	sbcs	r7, r7
 8000dca:	427f      	negs	r7, r7
 8000dcc:	46b9      	mov	r9, r7
 8000dce:	4680      	mov	r8, r0
 8000dd0:	4489      	add	r9, r1
 8000dd2:	e0d8      	b.n	8000f86 <__aeabi_dsub+0x426>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	4c3b      	ldr	r4, [pc, #236]	; (8000ec4 <__aeabi_dsub+0x364>)
 8000dd8:	3001      	adds	r0, #1
 8000dda:	4220      	tst	r0, r4
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dsub+0x280>
 8000dde:	e0b4      	b.n	8000f4a <__aeabi_dsub+0x3ea>
 8000de0:	4640      	mov	r0, r8
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d000      	beq.n	8000de8 <__aeabi_dsub+0x288>
 8000de6:	e144      	b.n	8001072 <__aeabi_dsub+0x512>
 8000de8:	4660      	mov	r0, ip
 8000dea:	4318      	orrs	r0, r3
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dsub+0x290>
 8000dee:	e190      	b.n	8001112 <__aeabi_dsub+0x5b2>
 8000df0:	0008      	movs	r0, r1
 8000df2:	4338      	orrs	r0, r7
 8000df4:	d000      	beq.n	8000df8 <__aeabi_dsub+0x298>
 8000df6:	e1aa      	b.n	800114e <__aeabi_dsub+0x5ee>
 8000df8:	4661      	mov	r1, ip
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	0749      	lsls	r1, r1, #29
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	4661      	mov	r1, ip
 8000e02:	08cc      	lsrs	r4, r1, #3
 8000e04:	e027      	b.n	8000e56 <__aeabi_dsub+0x2f6>
 8000e06:	0008      	movs	r0, r1
 8000e08:	4338      	orrs	r0, r7
 8000e0a:	d061      	beq.n	8000ed0 <__aeabi_dsub+0x370>
 8000e0c:	1e50      	subs	r0, r2, #1
 8000e0e:	2a01      	cmp	r2, #1
 8000e10:	d100      	bne.n	8000e14 <__aeabi_dsub+0x2b4>
 8000e12:	e139      	b.n	8001088 <__aeabi_dsub+0x528>
 8000e14:	42a2      	cmp	r2, r4
 8000e16:	d027      	beq.n	8000e68 <__aeabi_dsub+0x308>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	e75d      	b.n	8000cd8 <__aeabi_dsub+0x178>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	391f      	subs	r1, #31
 8000e20:	40ca      	lsrs	r2, r1
 8000e22:	0011      	movs	r1, r2
 8000e24:	2b20      	cmp	r3, #32
 8000e26:	d003      	beq.n	8000e30 <__aeabi_dsub+0x2d0>
 8000e28:	2240      	movs	r2, #64	; 0x40
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4098      	lsls	r0, r3
 8000e2e:	4304      	orrs	r4, r0
 8000e30:	1e63      	subs	r3, r4, #1
 8000e32:	419c      	sbcs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	4699      	mov	r9, r3
 8000e38:	4698      	mov	r8, r3
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	0763      	lsls	r3, r4, #29
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dsub+0x2e2>
 8000e40:	e712      	b.n	8000c68 <__aeabi_dsub+0x108>
 8000e42:	464b      	mov	r3, r9
 8000e44:	464a      	mov	r2, r9
 8000e46:	08e4      	lsrs	r4, r4, #3
 8000e48:	075b      	lsls	r3, r3, #29
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	08d4      	lsrs	r4, r2, #3
 8000e4e:	4642      	mov	r2, r8
 8000e50:	4919      	ldr	r1, [pc, #100]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000e52:	428a      	cmp	r2, r1
 8000e54:	d00e      	beq.n	8000e74 <__aeabi_dsub+0x314>
 8000e56:	0324      	lsls	r4, r4, #12
 8000e58:	0552      	lsls	r2, r2, #21
 8000e5a:	0b24      	lsrs	r4, r4, #12
 8000e5c:	0d52      	lsrs	r2, r2, #21
 8000e5e:	e722      	b.n	8000ca6 <__aeabi_dsub+0x146>
 8000e60:	000a      	movs	r2, r1
 8000e62:	2400      	movs	r4, #0
 8000e64:	2300      	movs	r3, #0
 8000e66:	e71e      	b.n	8000ca6 <__aeabi_dsub+0x146>
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	4662      	mov	r2, ip
 8000e6c:	0752      	lsls	r2, r2, #29
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	4662      	mov	r2, ip
 8000e72:	08d4      	lsrs	r4, r2, #3
 8000e74:	001a      	movs	r2, r3
 8000e76:	4322      	orrs	r2, r4
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dsub+0x31c>
 8000e7a:	e1fc      	b.n	8001276 <__aeabi_dsub+0x716>
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0312      	lsls	r2, r2, #12
 8000e80:	4314      	orrs	r4, r2
 8000e82:	0324      	lsls	r4, r4, #12
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <__aeabi_dsub+0x358>)
 8000e86:	0b24      	lsrs	r4, r4, #12
 8000e88:	e70d      	b.n	8000ca6 <__aeabi_dsub+0x146>
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f000 face 	bl	800142c <__clzsi2>
 8000e90:	0001      	movs	r1, r0
 8000e92:	3118      	adds	r1, #24
 8000e94:	291f      	cmp	r1, #31
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_dsub+0x33a>
 8000e98:	e6c4      	b.n	8000c24 <__aeabi_dsub+0xc4>
 8000e9a:	3808      	subs	r0, #8
 8000e9c:	4084      	lsls	r4, r0
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	0020      	movs	r0, r4
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	4588      	cmp	r8, r1
 8000ea6:	dc00      	bgt.n	8000eaa <__aeabi_dsub+0x34a>
 8000ea8:	e6c8      	b.n	8000c3c <__aeabi_dsub+0xdc>
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__aeabi_dsub+0x35c>)
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	4010      	ands	r0, r2
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e6d6      	b.n	8000c64 <__aeabi_dsub+0x104>
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	000007ff 	.word	0x000007ff
 8000ebc:	ff7fffff 	.word	0xff7fffff
 8000ec0:	fffff801 	.word	0xfffff801
 8000ec4:	000007fe 	.word	0x000007fe
 8000ec8:	430f      	orrs	r7, r1
 8000eca:	1e7a      	subs	r2, r7, #1
 8000ecc:	4197      	sbcs	r7, r2
 8000ece:	e691      	b.n	8000bf4 <__aeabi_dsub+0x94>
 8000ed0:	4661      	mov	r1, ip
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	0749      	lsls	r1, r1, #29
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	4661      	mov	r1, ip
 8000eda:	08cc      	lsrs	r4, r1, #3
 8000edc:	e7b8      	b.n	8000e50 <__aeabi_dsub+0x2f0>
 8000ede:	4640      	mov	r0, r8
 8000ee0:	4cd3      	ldr	r4, [pc, #844]	; (8001230 <__aeabi_dsub+0x6d0>)
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	4220      	tst	r0, r4
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dsub+0x38a>
 8000ee8:	e0a2      	b.n	8001030 <__aeabi_dsub+0x4d0>
 8000eea:	4640      	mov	r0, r8
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dsub+0x392>
 8000ef0:	e101      	b.n	80010f6 <__aeabi_dsub+0x596>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	4318      	orrs	r0, r3
 8000ef6:	d100      	bne.n	8000efa <__aeabi_dsub+0x39a>
 8000ef8:	e15e      	b.n	80011b8 <__aeabi_dsub+0x658>
 8000efa:	0008      	movs	r0, r1
 8000efc:	4338      	orrs	r0, r7
 8000efe:	d000      	beq.n	8000f02 <__aeabi_dsub+0x3a2>
 8000f00:	e15f      	b.n	80011c2 <__aeabi_dsub+0x662>
 8000f02:	4661      	mov	r1, ip
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	0749      	lsls	r1, r1, #29
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	4661      	mov	r1, ip
 8000f0c:	08cc      	lsrs	r4, r1, #3
 8000f0e:	e7a2      	b.n	8000e56 <__aeabi_dsub+0x2f6>
 8000f10:	4dc8      	ldr	r5, [pc, #800]	; (8001234 <__aeabi_dsub+0x6d4>)
 8000f12:	42a8      	cmp	r0, r5
 8000f14:	d100      	bne.n	8000f18 <__aeabi_dsub+0x3b8>
 8000f16:	e0cf      	b.n	80010b8 <__aeabi_dsub+0x558>
 8000f18:	2580      	movs	r5, #128	; 0x80
 8000f1a:	4664      	mov	r4, ip
 8000f1c:	042d      	lsls	r5, r5, #16
 8000f1e:	432c      	orrs	r4, r5
 8000f20:	46a4      	mov	ip, r4
 8000f22:	2a38      	cmp	r2, #56	; 0x38
 8000f24:	dc56      	bgt.n	8000fd4 <__aeabi_dsub+0x474>
 8000f26:	2a1f      	cmp	r2, #31
 8000f28:	dd00      	ble.n	8000f2c <__aeabi_dsub+0x3cc>
 8000f2a:	e0d1      	b.n	80010d0 <__aeabi_dsub+0x570>
 8000f2c:	2520      	movs	r5, #32
 8000f2e:	001e      	movs	r6, r3
 8000f30:	1aad      	subs	r5, r5, r2
 8000f32:	4664      	mov	r4, ip
 8000f34:	40ab      	lsls	r3, r5
 8000f36:	40ac      	lsls	r4, r5
 8000f38:	40d6      	lsrs	r6, r2
 8000f3a:	1e5d      	subs	r5, r3, #1
 8000f3c:	41ab      	sbcs	r3, r5
 8000f3e:	4334      	orrs	r4, r6
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4664      	mov	r4, ip
 8000f44:	40d4      	lsrs	r4, r2
 8000f46:	1b09      	subs	r1, r1, r4
 8000f48:	e049      	b.n	8000fde <__aeabi_dsub+0x47e>
 8000f4a:	4660      	mov	r0, ip
 8000f4c:	1bdc      	subs	r4, r3, r7
 8000f4e:	1a46      	subs	r6, r0, r1
 8000f50:	42a3      	cmp	r3, r4
 8000f52:	4180      	sbcs	r0, r0
 8000f54:	4240      	negs	r0, r0
 8000f56:	4681      	mov	r9, r0
 8000f58:	0030      	movs	r0, r6
 8000f5a:	464e      	mov	r6, r9
 8000f5c:	1b80      	subs	r0, r0, r6
 8000f5e:	4681      	mov	r9, r0
 8000f60:	0200      	lsls	r0, r0, #8
 8000f62:	d476      	bmi.n	8001052 <__aeabi_dsub+0x4f2>
 8000f64:	464b      	mov	r3, r9
 8000f66:	4323      	orrs	r3, r4
 8000f68:	d000      	beq.n	8000f6c <__aeabi_dsub+0x40c>
 8000f6a:	e652      	b.n	8000c12 <__aeabi_dsub+0xb2>
 8000f6c:	2400      	movs	r4, #0
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e771      	b.n	8000e56 <__aeabi_dsub+0x2f6>
 8000f72:	4339      	orrs	r1, r7
 8000f74:	000c      	movs	r4, r1
 8000f76:	1e62      	subs	r2, r4, #1
 8000f78:	4194      	sbcs	r4, r2
 8000f7a:	18e4      	adds	r4, r4, r3
 8000f7c:	429c      	cmp	r4, r3
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	425b      	negs	r3, r3
 8000f82:	4463      	add	r3, ip
 8000f84:	4699      	mov	r9, r3
 8000f86:	464b      	mov	r3, r9
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0x42e>
 8000f8c:	e756      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	469c      	mov	ip, r3
 8000f92:	4ba8      	ldr	r3, [pc, #672]	; (8001234 <__aeabi_dsub+0x6d4>)
 8000f94:	44e0      	add	r8, ip
 8000f96:	4598      	cmp	r8, r3
 8000f98:	d038      	beq.n	800100c <__aeabi_dsub+0x4ac>
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	48a6      	ldr	r0, [pc, #664]	; (8001238 <__aeabi_dsub+0x6d8>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4003      	ands	r3, r0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	0863      	lsrs	r3, r4, #1
 8000fa6:	4014      	ands	r4, r2
 8000fa8:	431c      	orrs	r4, r3
 8000faa:	07c3      	lsls	r3, r0, #31
 8000fac:	431c      	orrs	r4, r3
 8000fae:	0843      	lsrs	r3, r0, #1
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	e657      	b.n	8000c64 <__aeabi_dsub+0x104>
 8000fb4:	0010      	movs	r0, r2
 8000fb6:	000e      	movs	r6, r1
 8000fb8:	3820      	subs	r0, #32
 8000fba:	40c6      	lsrs	r6, r0
 8000fbc:	2a20      	cmp	r2, #32
 8000fbe:	d004      	beq.n	8000fca <__aeabi_dsub+0x46a>
 8000fc0:	2040      	movs	r0, #64	; 0x40
 8000fc2:	1a82      	subs	r2, r0, r2
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	430f      	orrs	r7, r1
 8000fc8:	46b9      	mov	r9, r7
 8000fca:	464f      	mov	r7, r9
 8000fcc:	1e7a      	subs	r2, r7, #1
 8000fce:	4197      	sbcs	r7, r2
 8000fd0:	4337      	orrs	r7, r6
 8000fd2:	e60f      	b.n	8000bf4 <__aeabi_dsub+0x94>
 8000fd4:	4662      	mov	r2, ip
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	4193      	sbcs	r3, r2
 8000fde:	1afc      	subs	r4, r7, r3
 8000fe0:	42a7      	cmp	r7, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	427f      	negs	r7, r7
 8000fe6:	1bcb      	subs	r3, r1, r7
 8000fe8:	4699      	mov	r9, r3
 8000fea:	465d      	mov	r5, fp
 8000fec:	4680      	mov	r8, r0
 8000fee:	e608      	b.n	8000c02 <__aeabi_dsub+0xa2>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	431e      	orrs	r6, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x498>
 8000ff6:	e0be      	b.n	8001176 <__aeabi_dsub+0x616>
 8000ff8:	1e56      	subs	r6, r2, #1
 8000ffa:	2a01      	cmp	r2, #1
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x4a0>
 8000ffe:	e109      	b.n	8001214 <__aeabi_dsub+0x6b4>
 8001000:	4c8c      	ldr	r4, [pc, #560]	; (8001234 <__aeabi_dsub+0x6d4>)
 8001002:	42a2      	cmp	r2, r4
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x4a8>
 8001006:	e119      	b.n	800123c <__aeabi_dsub+0x6dc>
 8001008:	0032      	movs	r2, r6
 800100a:	e6c1      	b.n	8000d90 <__aeabi_dsub+0x230>
 800100c:	4642      	mov	r2, r8
 800100e:	2400      	movs	r4, #0
 8001010:	2300      	movs	r3, #0
 8001012:	e648      	b.n	8000ca6 <__aeabi_dsub+0x146>
 8001014:	2020      	movs	r0, #32
 8001016:	000c      	movs	r4, r1
 8001018:	1a80      	subs	r0, r0, r2
 800101a:	003e      	movs	r6, r7
 800101c:	4087      	lsls	r7, r0
 800101e:	4084      	lsls	r4, r0
 8001020:	40d6      	lsrs	r6, r2
 8001022:	1e78      	subs	r0, r7, #1
 8001024:	4187      	sbcs	r7, r0
 8001026:	40d1      	lsrs	r1, r2
 8001028:	4334      	orrs	r4, r6
 800102a:	433c      	orrs	r4, r7
 800102c:	448c      	add	ip, r1
 800102e:	e7a4      	b.n	8000f7a <__aeabi_dsub+0x41a>
 8001030:	4a80      	ldr	r2, [pc, #512]	; (8001234 <__aeabi_dsub+0x6d4>)
 8001032:	4290      	cmp	r0, r2
 8001034:	d100      	bne.n	8001038 <__aeabi_dsub+0x4d8>
 8001036:	e0e9      	b.n	800120c <__aeabi_dsub+0x6ac>
 8001038:	19df      	adds	r7, r3, r7
 800103a:	429f      	cmp	r7, r3
 800103c:	419b      	sbcs	r3, r3
 800103e:	4461      	add	r1, ip
 8001040:	425b      	negs	r3, r3
 8001042:	18c9      	adds	r1, r1, r3
 8001044:	07cc      	lsls	r4, r1, #31
 8001046:	087f      	lsrs	r7, r7, #1
 8001048:	084b      	lsrs	r3, r1, #1
 800104a:	4699      	mov	r9, r3
 800104c:	4680      	mov	r8, r0
 800104e:	433c      	orrs	r4, r7
 8001050:	e6f4      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 8001052:	1afc      	subs	r4, r7, r3
 8001054:	42a7      	cmp	r7, r4
 8001056:	41bf      	sbcs	r7, r7
 8001058:	4663      	mov	r3, ip
 800105a:	427f      	negs	r7, r7
 800105c:	1ac9      	subs	r1, r1, r3
 800105e:	1bcb      	subs	r3, r1, r7
 8001060:	4699      	mov	r9, r3
 8001062:	465d      	mov	r5, fp
 8001064:	e5d5      	b.n	8000c12 <__aeabi_dsub+0xb2>
 8001066:	08ff      	lsrs	r7, r7, #3
 8001068:	074b      	lsls	r3, r1, #29
 800106a:	465d      	mov	r5, fp
 800106c:	433b      	orrs	r3, r7
 800106e:	08cc      	lsrs	r4, r1, #3
 8001070:	e6ee      	b.n	8000e50 <__aeabi_dsub+0x2f0>
 8001072:	4662      	mov	r2, ip
 8001074:	431a      	orrs	r2, r3
 8001076:	d000      	beq.n	800107a <__aeabi_dsub+0x51a>
 8001078:	e082      	b.n	8001180 <__aeabi_dsub+0x620>
 800107a:	000b      	movs	r3, r1
 800107c:	433b      	orrs	r3, r7
 800107e:	d11b      	bne.n	80010b8 <__aeabi_dsub+0x558>
 8001080:	2480      	movs	r4, #128	; 0x80
 8001082:	2500      	movs	r5, #0
 8001084:	0324      	lsls	r4, r4, #12
 8001086:	e6f9      	b.n	8000e7c <__aeabi_dsub+0x31c>
 8001088:	19dc      	adds	r4, r3, r7
 800108a:	429c      	cmp	r4, r3
 800108c:	419b      	sbcs	r3, r3
 800108e:	4461      	add	r1, ip
 8001090:	4689      	mov	r9, r1
 8001092:	425b      	negs	r3, r3
 8001094:	4499      	add	r9, r3
 8001096:	464b      	mov	r3, r9
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	d444      	bmi.n	8001126 <__aeabi_dsub+0x5c6>
 800109c:	2301      	movs	r3, #1
 800109e:	4698      	mov	r8, r3
 80010a0:	e6cc      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 80010a2:	1bdc      	subs	r4, r3, r7
 80010a4:	4662      	mov	r2, ip
 80010a6:	42a3      	cmp	r3, r4
 80010a8:	419b      	sbcs	r3, r3
 80010aa:	1a51      	subs	r1, r2, r1
 80010ac:	425b      	negs	r3, r3
 80010ae:	1acb      	subs	r3, r1, r3
 80010b0:	4699      	mov	r9, r3
 80010b2:	2301      	movs	r3, #1
 80010b4:	4698      	mov	r8, r3
 80010b6:	e5a4      	b.n	8000c02 <__aeabi_dsub+0xa2>
 80010b8:	08ff      	lsrs	r7, r7, #3
 80010ba:	074b      	lsls	r3, r1, #29
 80010bc:	465d      	mov	r5, fp
 80010be:	433b      	orrs	r3, r7
 80010c0:	08cc      	lsrs	r4, r1, #3
 80010c2:	e6d7      	b.n	8000e74 <__aeabi_dsub+0x314>
 80010c4:	4662      	mov	r2, ip
 80010c6:	431a      	orrs	r2, r3
 80010c8:	0014      	movs	r4, r2
 80010ca:	1e63      	subs	r3, r4, #1
 80010cc:	419c      	sbcs	r4, r3
 80010ce:	e679      	b.n	8000dc4 <__aeabi_dsub+0x264>
 80010d0:	0015      	movs	r5, r2
 80010d2:	4664      	mov	r4, ip
 80010d4:	3d20      	subs	r5, #32
 80010d6:	40ec      	lsrs	r4, r5
 80010d8:	46a0      	mov	r8, r4
 80010da:	2a20      	cmp	r2, #32
 80010dc:	d005      	beq.n	80010ea <__aeabi_dsub+0x58a>
 80010de:	2540      	movs	r5, #64	; 0x40
 80010e0:	4664      	mov	r4, ip
 80010e2:	1aaa      	subs	r2, r5, r2
 80010e4:	4094      	lsls	r4, r2
 80010e6:	4323      	orrs	r3, r4
 80010e8:	469a      	mov	sl, r3
 80010ea:	4654      	mov	r4, sl
 80010ec:	1e63      	subs	r3, r4, #1
 80010ee:	419c      	sbcs	r4, r3
 80010f0:	4643      	mov	r3, r8
 80010f2:	4323      	orrs	r3, r4
 80010f4:	e773      	b.n	8000fde <__aeabi_dsub+0x47e>
 80010f6:	4662      	mov	r2, ip
 80010f8:	431a      	orrs	r2, r3
 80010fa:	d023      	beq.n	8001144 <__aeabi_dsub+0x5e4>
 80010fc:	000a      	movs	r2, r1
 80010fe:	433a      	orrs	r2, r7
 8001100:	d000      	beq.n	8001104 <__aeabi_dsub+0x5a4>
 8001102:	e0a0      	b.n	8001246 <__aeabi_dsub+0x6e6>
 8001104:	4662      	mov	r2, ip
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	0752      	lsls	r2, r2, #29
 800110a:	4313      	orrs	r3, r2
 800110c:	4662      	mov	r2, ip
 800110e:	08d4      	lsrs	r4, r2, #3
 8001110:	e6b0      	b.n	8000e74 <__aeabi_dsub+0x314>
 8001112:	000b      	movs	r3, r1
 8001114:	433b      	orrs	r3, r7
 8001116:	d100      	bne.n	800111a <__aeabi_dsub+0x5ba>
 8001118:	e728      	b.n	8000f6c <__aeabi_dsub+0x40c>
 800111a:	08ff      	lsrs	r7, r7, #3
 800111c:	074b      	lsls	r3, r1, #29
 800111e:	465d      	mov	r5, fp
 8001120:	433b      	orrs	r3, r7
 8001122:	08cc      	lsrs	r4, r1, #3
 8001124:	e697      	b.n	8000e56 <__aeabi_dsub+0x2f6>
 8001126:	2302      	movs	r3, #2
 8001128:	4698      	mov	r8, r3
 800112a:	e736      	b.n	8000f9a <__aeabi_dsub+0x43a>
 800112c:	1afc      	subs	r4, r7, r3
 800112e:	42a7      	cmp	r7, r4
 8001130:	41bf      	sbcs	r7, r7
 8001132:	4663      	mov	r3, ip
 8001134:	427f      	negs	r7, r7
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	1bcb      	subs	r3, r1, r7
 800113a:	4699      	mov	r9, r3
 800113c:	2301      	movs	r3, #1
 800113e:	465d      	mov	r5, fp
 8001140:	4698      	mov	r8, r3
 8001142:	e55e      	b.n	8000c02 <__aeabi_dsub+0xa2>
 8001144:	074b      	lsls	r3, r1, #29
 8001146:	08ff      	lsrs	r7, r7, #3
 8001148:	433b      	orrs	r3, r7
 800114a:	08cc      	lsrs	r4, r1, #3
 800114c:	e692      	b.n	8000e74 <__aeabi_dsub+0x314>
 800114e:	1bdc      	subs	r4, r3, r7
 8001150:	4660      	mov	r0, ip
 8001152:	42a3      	cmp	r3, r4
 8001154:	41b6      	sbcs	r6, r6
 8001156:	1a40      	subs	r0, r0, r1
 8001158:	4276      	negs	r6, r6
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	4681      	mov	r9, r0
 800115e:	0200      	lsls	r0, r0, #8
 8001160:	d560      	bpl.n	8001224 <__aeabi_dsub+0x6c4>
 8001162:	1afc      	subs	r4, r7, r3
 8001164:	42a7      	cmp	r7, r4
 8001166:	41bf      	sbcs	r7, r7
 8001168:	4663      	mov	r3, ip
 800116a:	427f      	negs	r7, r7
 800116c:	1ac9      	subs	r1, r1, r3
 800116e:	1bcb      	subs	r3, r1, r7
 8001170:	4699      	mov	r9, r3
 8001172:	465d      	mov	r5, fp
 8001174:	e576      	b.n	8000c64 <__aeabi_dsub+0x104>
 8001176:	08ff      	lsrs	r7, r7, #3
 8001178:	074b      	lsls	r3, r1, #29
 800117a:	433b      	orrs	r3, r7
 800117c:	08cc      	lsrs	r4, r1, #3
 800117e:	e667      	b.n	8000e50 <__aeabi_dsub+0x2f0>
 8001180:	000a      	movs	r2, r1
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	433a      	orrs	r2, r7
 8001186:	d100      	bne.n	800118a <__aeabi_dsub+0x62a>
 8001188:	e66f      	b.n	8000e6a <__aeabi_dsub+0x30a>
 800118a:	4662      	mov	r2, ip
 800118c:	0752      	lsls	r2, r2, #29
 800118e:	4313      	orrs	r3, r2
 8001190:	4662      	mov	r2, ip
 8001192:	08d4      	lsrs	r4, r2, #3
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	0312      	lsls	r2, r2, #12
 8001198:	4214      	tst	r4, r2
 800119a:	d007      	beq.n	80011ac <__aeabi_dsub+0x64c>
 800119c:	08c8      	lsrs	r0, r1, #3
 800119e:	4210      	tst	r0, r2
 80011a0:	d104      	bne.n	80011ac <__aeabi_dsub+0x64c>
 80011a2:	465d      	mov	r5, fp
 80011a4:	0004      	movs	r4, r0
 80011a6:	08fb      	lsrs	r3, r7, #3
 80011a8:	0749      	lsls	r1, r1, #29
 80011aa:	430b      	orrs	r3, r1
 80011ac:	0f5a      	lsrs	r2, r3, #29
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	08db      	lsrs	r3, r3, #3
 80011b2:	0752      	lsls	r2, r2, #29
 80011b4:	4313      	orrs	r3, r2
 80011b6:	e65d      	b.n	8000e74 <__aeabi_dsub+0x314>
 80011b8:	074b      	lsls	r3, r1, #29
 80011ba:	08ff      	lsrs	r7, r7, #3
 80011bc:	433b      	orrs	r3, r7
 80011be:	08cc      	lsrs	r4, r1, #3
 80011c0:	e649      	b.n	8000e56 <__aeabi_dsub+0x2f6>
 80011c2:	19dc      	adds	r4, r3, r7
 80011c4:	429c      	cmp	r4, r3
 80011c6:	419b      	sbcs	r3, r3
 80011c8:	4461      	add	r1, ip
 80011ca:	4689      	mov	r9, r1
 80011cc:	425b      	negs	r3, r3
 80011ce:	4499      	add	r9, r3
 80011d0:	464b      	mov	r3, r9
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	d400      	bmi.n	80011d8 <__aeabi_dsub+0x678>
 80011d6:	e631      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 80011d8:	464a      	mov	r2, r9
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <__aeabi_dsub+0x6d8>)
 80011dc:	401a      	ands	r2, r3
 80011de:	2301      	movs	r3, #1
 80011e0:	4691      	mov	r9, r2
 80011e2:	4698      	mov	r8, r3
 80011e4:	e62a      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 80011e6:	0016      	movs	r6, r2
 80011e8:	4664      	mov	r4, ip
 80011ea:	3e20      	subs	r6, #32
 80011ec:	40f4      	lsrs	r4, r6
 80011ee:	46a0      	mov	r8, r4
 80011f0:	2a20      	cmp	r2, #32
 80011f2:	d005      	beq.n	8001200 <__aeabi_dsub+0x6a0>
 80011f4:	2640      	movs	r6, #64	; 0x40
 80011f6:	4664      	mov	r4, ip
 80011f8:	1ab2      	subs	r2, r6, r2
 80011fa:	4094      	lsls	r4, r2
 80011fc:	4323      	orrs	r3, r4
 80011fe:	469a      	mov	sl, r3
 8001200:	4654      	mov	r4, sl
 8001202:	1e63      	subs	r3, r4, #1
 8001204:	419c      	sbcs	r4, r3
 8001206:	4643      	mov	r3, r8
 8001208:	431c      	orrs	r4, r3
 800120a:	e5db      	b.n	8000dc4 <__aeabi_dsub+0x264>
 800120c:	0002      	movs	r2, r0
 800120e:	2400      	movs	r4, #0
 8001210:	2300      	movs	r3, #0
 8001212:	e548      	b.n	8000ca6 <__aeabi_dsub+0x146>
 8001214:	19dc      	adds	r4, r3, r7
 8001216:	42bc      	cmp	r4, r7
 8001218:	41bf      	sbcs	r7, r7
 800121a:	4461      	add	r1, ip
 800121c:	4689      	mov	r9, r1
 800121e:	427f      	negs	r7, r7
 8001220:	44b9      	add	r9, r7
 8001222:	e738      	b.n	8001096 <__aeabi_dsub+0x536>
 8001224:	464b      	mov	r3, r9
 8001226:	4323      	orrs	r3, r4
 8001228:	d100      	bne.n	800122c <__aeabi_dsub+0x6cc>
 800122a:	e69f      	b.n	8000f6c <__aeabi_dsub+0x40c>
 800122c:	e606      	b.n	8000e3c <__aeabi_dsub+0x2dc>
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	000007fe 	.word	0x000007fe
 8001234:	000007ff 	.word	0x000007ff
 8001238:	ff7fffff 	.word	0xff7fffff
 800123c:	08ff      	lsrs	r7, r7, #3
 800123e:	074b      	lsls	r3, r1, #29
 8001240:	433b      	orrs	r3, r7
 8001242:	08cc      	lsrs	r4, r1, #3
 8001244:	e616      	b.n	8000e74 <__aeabi_dsub+0x314>
 8001246:	4662      	mov	r2, ip
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	0752      	lsls	r2, r2, #29
 800124c:	4313      	orrs	r3, r2
 800124e:	4662      	mov	r2, ip
 8001250:	08d4      	lsrs	r4, r2, #3
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0312      	lsls	r2, r2, #12
 8001256:	4214      	tst	r4, r2
 8001258:	d007      	beq.n	800126a <__aeabi_dsub+0x70a>
 800125a:	08c8      	lsrs	r0, r1, #3
 800125c:	4210      	tst	r0, r2
 800125e:	d104      	bne.n	800126a <__aeabi_dsub+0x70a>
 8001260:	465d      	mov	r5, fp
 8001262:	0004      	movs	r4, r0
 8001264:	08fb      	lsrs	r3, r7, #3
 8001266:	0749      	lsls	r1, r1, #29
 8001268:	430b      	orrs	r3, r1
 800126a:	0f5a      	lsrs	r2, r3, #29
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	0752      	lsls	r2, r2, #29
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	4313      	orrs	r3, r2
 8001274:	e5fe      	b.n	8000e74 <__aeabi_dsub+0x314>
 8001276:	2300      	movs	r3, #0
 8001278:	4a01      	ldr	r2, [pc, #4]	; (8001280 <__aeabi_dsub+0x720>)
 800127a:	001c      	movs	r4, r3
 800127c:	e513      	b.n	8000ca6 <__aeabi_dsub+0x146>
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff

08001284 <__aeabi_d2iz>:
 8001284:	000a      	movs	r2, r1
 8001286:	b530      	push	{r4, r5, lr}
 8001288:	4c13      	ldr	r4, [pc, #76]	; (80012d8 <__aeabi_d2iz+0x54>)
 800128a:	0053      	lsls	r3, r2, #1
 800128c:	0309      	lsls	r1, r1, #12
 800128e:	0005      	movs	r5, r0
 8001290:	0b09      	lsrs	r1, r1, #12
 8001292:	2000      	movs	r0, #0
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	0fd2      	lsrs	r2, r2, #31
 8001298:	42a3      	cmp	r3, r4
 800129a:	dd04      	ble.n	80012a6 <__aeabi_d2iz+0x22>
 800129c:	480f      	ldr	r0, [pc, #60]	; (80012dc <__aeabi_d2iz+0x58>)
 800129e:	4283      	cmp	r3, r0
 80012a0:	dd02      	ble.n	80012a8 <__aeabi_d2iz+0x24>
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <__aeabi_d2iz+0x5c>)
 80012a4:	18d0      	adds	r0, r2, r3
 80012a6:	bd30      	pop	{r4, r5, pc}
 80012a8:	2080      	movs	r0, #128	; 0x80
 80012aa:	0340      	lsls	r0, r0, #13
 80012ac:	4301      	orrs	r1, r0
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <__aeabi_d2iz+0x60>)
 80012b0:	1ac0      	subs	r0, r0, r3
 80012b2:	281f      	cmp	r0, #31
 80012b4:	dd08      	ble.n	80012c8 <__aeabi_d2iz+0x44>
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <__aeabi_d2iz+0x64>)
 80012b8:	1ac3      	subs	r3, r0, r3
 80012ba:	40d9      	lsrs	r1, r3
 80012bc:	000b      	movs	r3, r1
 80012be:	4258      	negs	r0, r3
 80012c0:	2a00      	cmp	r2, #0
 80012c2:	d1f0      	bne.n	80012a6 <__aeabi_d2iz+0x22>
 80012c4:	0018      	movs	r0, r3
 80012c6:	e7ee      	b.n	80012a6 <__aeabi_d2iz+0x22>
 80012c8:	4c08      	ldr	r4, [pc, #32]	; (80012ec <__aeabi_d2iz+0x68>)
 80012ca:	40c5      	lsrs	r5, r0
 80012cc:	46a4      	mov	ip, r4
 80012ce:	4463      	add	r3, ip
 80012d0:	4099      	lsls	r1, r3
 80012d2:	000b      	movs	r3, r1
 80012d4:	432b      	orrs	r3, r5
 80012d6:	e7f2      	b.n	80012be <__aeabi_d2iz+0x3a>
 80012d8:	000003fe 	.word	0x000003fe
 80012dc:	0000041d 	.word	0x0000041d
 80012e0:	7fffffff 	.word	0x7fffffff
 80012e4:	00000433 	.word	0x00000433
 80012e8:	00000413 	.word	0x00000413
 80012ec:	fffffbed 	.word	0xfffffbed

080012f0 <__aeabi_ui2d>:
 80012f0:	b510      	push	{r4, lr}
 80012f2:	1e04      	subs	r4, r0, #0
 80012f4:	d010      	beq.n	8001318 <__aeabi_ui2d+0x28>
 80012f6:	f000 f899 	bl	800142c <__clzsi2>
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <__aeabi_ui2d+0x48>)
 80012fc:	1a1b      	subs	r3, r3, r0
 80012fe:	280a      	cmp	r0, #10
 8001300:	dc11      	bgt.n	8001326 <__aeabi_ui2d+0x36>
 8001302:	220b      	movs	r2, #11
 8001304:	0021      	movs	r1, r4
 8001306:	1a12      	subs	r2, r2, r0
 8001308:	40d1      	lsrs	r1, r2
 800130a:	3015      	adds	r0, #21
 800130c:	030a      	lsls	r2, r1, #12
 800130e:	055b      	lsls	r3, r3, #21
 8001310:	4084      	lsls	r4, r0
 8001312:	0b12      	lsrs	r2, r2, #12
 8001314:	0d5b      	lsrs	r3, r3, #21
 8001316:	e001      	b.n	800131c <__aeabi_ui2d+0x2c>
 8001318:	2300      	movs	r3, #0
 800131a:	2200      	movs	r2, #0
 800131c:	051b      	lsls	r3, r3, #20
 800131e:	4313      	orrs	r3, r2
 8001320:	0020      	movs	r0, r4
 8001322:	0019      	movs	r1, r3
 8001324:	bd10      	pop	{r4, pc}
 8001326:	0022      	movs	r2, r4
 8001328:	380b      	subs	r0, #11
 800132a:	4082      	lsls	r2, r0
 800132c:	055b      	lsls	r3, r3, #21
 800132e:	0312      	lsls	r2, r2, #12
 8001330:	2400      	movs	r4, #0
 8001332:	0b12      	lsrs	r2, r2, #12
 8001334:	0d5b      	lsrs	r3, r3, #21
 8001336:	e7f1      	b.n	800131c <__aeabi_ui2d+0x2c>
 8001338:	0000041e 	.word	0x0000041e

0800133c <__aeabi_cdrcmple>:
 800133c:	4684      	mov	ip, r0
 800133e:	0010      	movs	r0, r2
 8001340:	4662      	mov	r2, ip
 8001342:	468c      	mov	ip, r1
 8001344:	0019      	movs	r1, r3
 8001346:	4663      	mov	r3, ip
 8001348:	e000      	b.n	800134c <__aeabi_cdcmpeq>
 800134a:	46c0      	nop			; (mov r8, r8)

0800134c <__aeabi_cdcmpeq>:
 800134c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800134e:	f000 f9e3 	bl	8001718 <__ledf2>
 8001352:	2800      	cmp	r0, #0
 8001354:	d401      	bmi.n	800135a <__aeabi_cdcmpeq+0xe>
 8001356:	2100      	movs	r1, #0
 8001358:	42c8      	cmn	r0, r1
 800135a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800135c <__aeabi_dcmpeq>:
 800135c:	b510      	push	{r4, lr}
 800135e:	f000 f933 	bl	80015c8 <__eqdf2>
 8001362:	4240      	negs	r0, r0
 8001364:	3001      	adds	r0, #1
 8001366:	bd10      	pop	{r4, pc}

08001368 <__aeabi_dcmplt>:
 8001368:	b510      	push	{r4, lr}
 800136a:	f000 f9d5 	bl	8001718 <__ledf2>
 800136e:	2800      	cmp	r0, #0
 8001370:	db01      	blt.n	8001376 <__aeabi_dcmplt+0xe>
 8001372:	2000      	movs	r0, #0
 8001374:	bd10      	pop	{r4, pc}
 8001376:	2001      	movs	r0, #1
 8001378:	bd10      	pop	{r4, pc}
 800137a:	46c0      	nop			; (mov r8, r8)

0800137c <__aeabi_dcmple>:
 800137c:	b510      	push	{r4, lr}
 800137e:	f000 f9cb 	bl	8001718 <__ledf2>
 8001382:	2800      	cmp	r0, #0
 8001384:	dd01      	ble.n	800138a <__aeabi_dcmple+0xe>
 8001386:	2000      	movs	r0, #0
 8001388:	bd10      	pop	{r4, pc}
 800138a:	2001      	movs	r0, #1
 800138c:	bd10      	pop	{r4, pc}
 800138e:	46c0      	nop			; (mov r8, r8)

08001390 <__aeabi_dcmpgt>:
 8001390:	b510      	push	{r4, lr}
 8001392:	f000 f95b 	bl	800164c <__gedf2>
 8001396:	2800      	cmp	r0, #0
 8001398:	dc01      	bgt.n	800139e <__aeabi_dcmpgt+0xe>
 800139a:	2000      	movs	r0, #0
 800139c:	bd10      	pop	{r4, pc}
 800139e:	2001      	movs	r0, #1
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)

080013a4 <__aeabi_dcmpge>:
 80013a4:	b510      	push	{r4, lr}
 80013a6:	f000 f951 	bl	800164c <__gedf2>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	da01      	bge.n	80013b2 <__aeabi_dcmpge+0xe>
 80013ae:	2000      	movs	r0, #0
 80013b0:	bd10      	pop	{r4, pc}
 80013b2:	2001      	movs	r0, #1
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)

080013b8 <__aeabi_cfrcmple>:
 80013b8:	4684      	mov	ip, r0
 80013ba:	0008      	movs	r0, r1
 80013bc:	4661      	mov	r1, ip
 80013be:	e7ff      	b.n	80013c0 <__aeabi_cfcmpeq>

080013c0 <__aeabi_cfcmpeq>:
 80013c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013c2:	f000 f8bd 	bl	8001540 <__lesf2>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d401      	bmi.n	80013ce <__aeabi_cfcmpeq+0xe>
 80013ca:	2100      	movs	r1, #0
 80013cc:	42c8      	cmn	r0, r1
 80013ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013d0 <__aeabi_fcmpeq>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	f000 f849 	bl	8001468 <__eqsf2>
 80013d6:	4240      	negs	r0, r0
 80013d8:	3001      	adds	r0, #1
 80013da:	bd10      	pop	{r4, pc}

080013dc <__aeabi_fcmplt>:
 80013dc:	b510      	push	{r4, lr}
 80013de:	f000 f8af 	bl	8001540 <__lesf2>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	db01      	blt.n	80013ea <__aeabi_fcmplt+0xe>
 80013e6:	2000      	movs	r0, #0
 80013e8:	bd10      	pop	{r4, pc}
 80013ea:	2001      	movs	r0, #1
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)

080013f0 <__aeabi_fcmple>:
 80013f0:	b510      	push	{r4, lr}
 80013f2:	f000 f8a5 	bl	8001540 <__lesf2>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	dd01      	ble.n	80013fe <__aeabi_fcmple+0xe>
 80013fa:	2000      	movs	r0, #0
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	2001      	movs	r0, #1
 8001400:	bd10      	pop	{r4, pc}
 8001402:	46c0      	nop			; (mov r8, r8)

08001404 <__aeabi_fcmpgt>:
 8001404:	b510      	push	{r4, lr}
 8001406:	f000 f855 	bl	80014b4 <__gesf2>
 800140a:	2800      	cmp	r0, #0
 800140c:	dc01      	bgt.n	8001412 <__aeabi_fcmpgt+0xe>
 800140e:	2000      	movs	r0, #0
 8001410:	bd10      	pop	{r4, pc}
 8001412:	2001      	movs	r0, #1
 8001414:	bd10      	pop	{r4, pc}
 8001416:	46c0      	nop			; (mov r8, r8)

08001418 <__aeabi_fcmpge>:
 8001418:	b510      	push	{r4, lr}
 800141a:	f000 f84b 	bl	80014b4 <__gesf2>
 800141e:	2800      	cmp	r0, #0
 8001420:	da01      	bge.n	8001426 <__aeabi_fcmpge+0xe>
 8001422:	2000      	movs	r0, #0
 8001424:	bd10      	pop	{r4, pc}
 8001426:	2001      	movs	r0, #1
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <__clzsi2>:
 800142c:	211c      	movs	r1, #28
 800142e:	2301      	movs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	4298      	cmp	r0, r3
 8001434:	d301      	bcc.n	800143a <__clzsi2+0xe>
 8001436:	0c00      	lsrs	r0, r0, #16
 8001438:	3910      	subs	r1, #16
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	4298      	cmp	r0, r3
 800143e:	d301      	bcc.n	8001444 <__clzsi2+0x18>
 8001440:	0a00      	lsrs	r0, r0, #8
 8001442:	3908      	subs	r1, #8
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	4298      	cmp	r0, r3
 8001448:	d301      	bcc.n	800144e <__clzsi2+0x22>
 800144a:	0900      	lsrs	r0, r0, #4
 800144c:	3904      	subs	r1, #4
 800144e:	a202      	add	r2, pc, #8	; (adr r2, 8001458 <__clzsi2+0x2c>)
 8001450:	5c10      	ldrb	r0, [r2, r0]
 8001452:	1840      	adds	r0, r0, r1
 8001454:	4770      	bx	lr
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	02020304 	.word	0x02020304
 800145c:	01010101 	.word	0x01010101
	...

08001468 <__eqsf2>:
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	0042      	lsls	r2, r0, #1
 800146c:	0245      	lsls	r5, r0, #9
 800146e:	024e      	lsls	r6, r1, #9
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	0fc3      	lsrs	r3, r0, #31
 8001474:	0a6d      	lsrs	r5, r5, #9
 8001476:	2001      	movs	r0, #1
 8001478:	0e12      	lsrs	r2, r2, #24
 800147a:	0a76      	lsrs	r6, r6, #9
 800147c:	0e24      	lsrs	r4, r4, #24
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	2aff      	cmp	r2, #255	; 0xff
 8001482:	d006      	beq.n	8001492 <__eqsf2+0x2a>
 8001484:	2cff      	cmp	r4, #255	; 0xff
 8001486:	d003      	beq.n	8001490 <__eqsf2+0x28>
 8001488:	42a2      	cmp	r2, r4
 800148a:	d101      	bne.n	8001490 <__eqsf2+0x28>
 800148c:	42b5      	cmp	r5, r6
 800148e:	d006      	beq.n	800149e <__eqsf2+0x36>
 8001490:	bd70      	pop	{r4, r5, r6, pc}
 8001492:	2d00      	cmp	r5, #0
 8001494:	d1fc      	bne.n	8001490 <__eqsf2+0x28>
 8001496:	2cff      	cmp	r4, #255	; 0xff
 8001498:	d1fa      	bne.n	8001490 <__eqsf2+0x28>
 800149a:	2e00      	cmp	r6, #0
 800149c:	d1f8      	bne.n	8001490 <__eqsf2+0x28>
 800149e:	428b      	cmp	r3, r1
 80014a0:	d006      	beq.n	80014b0 <__eqsf2+0x48>
 80014a2:	2001      	movs	r0, #1
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	d1f3      	bne.n	8001490 <__eqsf2+0x28>
 80014a8:	0028      	movs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e7ef      	b.n	8001490 <__eqsf2+0x28>
 80014b0:	2000      	movs	r0, #0
 80014b2:	e7ed      	b.n	8001490 <__eqsf2+0x28>

080014b4 <__gesf2>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	0042      	lsls	r2, r0, #1
 80014b8:	0245      	lsls	r5, r0, #9
 80014ba:	024e      	lsls	r6, r1, #9
 80014bc:	004c      	lsls	r4, r1, #1
 80014be:	0fc3      	lsrs	r3, r0, #31
 80014c0:	0a6d      	lsrs	r5, r5, #9
 80014c2:	0e12      	lsrs	r2, r2, #24
 80014c4:	0a76      	lsrs	r6, r6, #9
 80014c6:	0e24      	lsrs	r4, r4, #24
 80014c8:	0fc8      	lsrs	r0, r1, #31
 80014ca:	2aff      	cmp	r2, #255	; 0xff
 80014cc:	d01b      	beq.n	8001506 <__gesf2+0x52>
 80014ce:	2cff      	cmp	r4, #255	; 0xff
 80014d0:	d00e      	beq.n	80014f0 <__gesf2+0x3c>
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d11b      	bne.n	800150e <__gesf2+0x5a>
 80014d6:	2c00      	cmp	r4, #0
 80014d8:	d101      	bne.n	80014de <__gesf2+0x2a>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d01c      	beq.n	8001518 <__gesf2+0x64>
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d00c      	beq.n	80014fc <__gesf2+0x48>
 80014e2:	4283      	cmp	r3, r0
 80014e4:	d01c      	beq.n	8001520 <__gesf2+0x6c>
 80014e6:	2102      	movs	r1, #2
 80014e8:	1e58      	subs	r0, r3, #1
 80014ea:	4008      	ands	r0, r1
 80014ec:	3801      	subs	r0, #1
 80014ee:	bd70      	pop	{r4, r5, r6, pc}
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	d122      	bne.n	800153a <__gesf2+0x86>
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d1f4      	bne.n	80014e2 <__gesf2+0x2e>
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d1f2      	bne.n	80014e2 <__gesf2+0x2e>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d1f6      	bne.n	80014ee <__gesf2+0x3a>
 8001500:	2001      	movs	r0, #1
 8001502:	4240      	negs	r0, r0
 8001504:	e7f3      	b.n	80014ee <__gesf2+0x3a>
 8001506:	2d00      	cmp	r5, #0
 8001508:	d117      	bne.n	800153a <__gesf2+0x86>
 800150a:	2cff      	cmp	r4, #255	; 0xff
 800150c:	d0f0      	beq.n	80014f0 <__gesf2+0x3c>
 800150e:	2c00      	cmp	r4, #0
 8001510:	d1e7      	bne.n	80014e2 <__gesf2+0x2e>
 8001512:	2e00      	cmp	r6, #0
 8001514:	d1e5      	bne.n	80014e2 <__gesf2+0x2e>
 8001516:	e7e6      	b.n	80014e6 <__gesf2+0x32>
 8001518:	2000      	movs	r0, #0
 800151a:	2d00      	cmp	r5, #0
 800151c:	d0e7      	beq.n	80014ee <__gesf2+0x3a>
 800151e:	e7e2      	b.n	80014e6 <__gesf2+0x32>
 8001520:	42a2      	cmp	r2, r4
 8001522:	dc05      	bgt.n	8001530 <__gesf2+0x7c>
 8001524:	dbea      	blt.n	80014fc <__gesf2+0x48>
 8001526:	42b5      	cmp	r5, r6
 8001528:	d802      	bhi.n	8001530 <__gesf2+0x7c>
 800152a:	d3e7      	bcc.n	80014fc <__gesf2+0x48>
 800152c:	2000      	movs	r0, #0
 800152e:	e7de      	b.n	80014ee <__gesf2+0x3a>
 8001530:	4243      	negs	r3, r0
 8001532:	4158      	adcs	r0, r3
 8001534:	0040      	lsls	r0, r0, #1
 8001536:	3801      	subs	r0, #1
 8001538:	e7d9      	b.n	80014ee <__gesf2+0x3a>
 800153a:	2002      	movs	r0, #2
 800153c:	4240      	negs	r0, r0
 800153e:	e7d6      	b.n	80014ee <__gesf2+0x3a>

08001540 <__lesf2>:
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	0042      	lsls	r2, r0, #1
 8001544:	0245      	lsls	r5, r0, #9
 8001546:	024e      	lsls	r6, r1, #9
 8001548:	004c      	lsls	r4, r1, #1
 800154a:	0fc3      	lsrs	r3, r0, #31
 800154c:	0a6d      	lsrs	r5, r5, #9
 800154e:	0e12      	lsrs	r2, r2, #24
 8001550:	0a76      	lsrs	r6, r6, #9
 8001552:	0e24      	lsrs	r4, r4, #24
 8001554:	0fc8      	lsrs	r0, r1, #31
 8001556:	2aff      	cmp	r2, #255	; 0xff
 8001558:	d00b      	beq.n	8001572 <__lesf2+0x32>
 800155a:	2cff      	cmp	r4, #255	; 0xff
 800155c:	d00d      	beq.n	800157a <__lesf2+0x3a>
 800155e:	2a00      	cmp	r2, #0
 8001560:	d11f      	bne.n	80015a2 <__lesf2+0x62>
 8001562:	2c00      	cmp	r4, #0
 8001564:	d116      	bne.n	8001594 <__lesf2+0x54>
 8001566:	2e00      	cmp	r6, #0
 8001568:	d114      	bne.n	8001594 <__lesf2+0x54>
 800156a:	2000      	movs	r0, #0
 800156c:	2d00      	cmp	r5, #0
 800156e:	d010      	beq.n	8001592 <__lesf2+0x52>
 8001570:	e009      	b.n	8001586 <__lesf2+0x46>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d10c      	bne.n	8001590 <__lesf2+0x50>
 8001576:	2cff      	cmp	r4, #255	; 0xff
 8001578:	d113      	bne.n	80015a2 <__lesf2+0x62>
 800157a:	2e00      	cmp	r6, #0
 800157c:	d108      	bne.n	8001590 <__lesf2+0x50>
 800157e:	2a00      	cmp	r2, #0
 8001580:	d008      	beq.n	8001594 <__lesf2+0x54>
 8001582:	4283      	cmp	r3, r0
 8001584:	d012      	beq.n	80015ac <__lesf2+0x6c>
 8001586:	2102      	movs	r1, #2
 8001588:	1e58      	subs	r0, r3, #1
 800158a:	4008      	ands	r0, r1
 800158c:	3801      	subs	r0, #1
 800158e:	e000      	b.n	8001592 <__lesf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	bd70      	pop	{r4, r5, r6, pc}
 8001594:	2d00      	cmp	r5, #0
 8001596:	d1f4      	bne.n	8001582 <__lesf2+0x42>
 8001598:	2800      	cmp	r0, #0
 800159a:	d1fa      	bne.n	8001592 <__lesf2+0x52>
 800159c:	2001      	movs	r0, #1
 800159e:	4240      	negs	r0, r0
 80015a0:	e7f7      	b.n	8001592 <__lesf2+0x52>
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d1ed      	bne.n	8001582 <__lesf2+0x42>
 80015a6:	2e00      	cmp	r6, #0
 80015a8:	d1eb      	bne.n	8001582 <__lesf2+0x42>
 80015aa:	e7ec      	b.n	8001586 <__lesf2+0x46>
 80015ac:	42a2      	cmp	r2, r4
 80015ae:	dc05      	bgt.n	80015bc <__lesf2+0x7c>
 80015b0:	dbf2      	blt.n	8001598 <__lesf2+0x58>
 80015b2:	42b5      	cmp	r5, r6
 80015b4:	d802      	bhi.n	80015bc <__lesf2+0x7c>
 80015b6:	d3ef      	bcc.n	8001598 <__lesf2+0x58>
 80015b8:	2000      	movs	r0, #0
 80015ba:	e7ea      	b.n	8001592 <__lesf2+0x52>
 80015bc:	4243      	negs	r3, r0
 80015be:	4158      	adcs	r0, r3
 80015c0:	0040      	lsls	r0, r0, #1
 80015c2:	3801      	subs	r0, #1
 80015c4:	e7e5      	b.n	8001592 <__lesf2+0x52>
 80015c6:	46c0      	nop			; (mov r8, r8)

080015c8 <__eqdf2>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	464e      	mov	r6, r9
 80015cc:	4645      	mov	r5, r8
 80015ce:	46de      	mov	lr, fp
 80015d0:	4657      	mov	r7, sl
 80015d2:	4690      	mov	r8, r2
 80015d4:	b5e0      	push	{r5, r6, r7, lr}
 80015d6:	0017      	movs	r7, r2
 80015d8:	031a      	lsls	r2, r3, #12
 80015da:	0b12      	lsrs	r2, r2, #12
 80015dc:	0005      	movs	r5, r0
 80015de:	4684      	mov	ip, r0
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <__eqdf2+0x80>)
 80015e2:	030e      	lsls	r6, r1, #12
 80015e4:	004c      	lsls	r4, r1, #1
 80015e6:	4691      	mov	r9, r2
 80015e8:	005a      	lsls	r2, r3, #1
 80015ea:	0fdb      	lsrs	r3, r3, #31
 80015ec:	469b      	mov	fp, r3
 80015ee:	0b36      	lsrs	r6, r6, #12
 80015f0:	0d64      	lsrs	r4, r4, #21
 80015f2:	0fc9      	lsrs	r1, r1, #31
 80015f4:	0d52      	lsrs	r2, r2, #21
 80015f6:	4284      	cmp	r4, r0
 80015f8:	d019      	beq.n	800162e <__eqdf2+0x66>
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d010      	beq.n	8001620 <__eqdf2+0x58>
 80015fe:	2001      	movs	r0, #1
 8001600:	4294      	cmp	r4, r2
 8001602:	d10e      	bne.n	8001622 <__eqdf2+0x5a>
 8001604:	454e      	cmp	r6, r9
 8001606:	d10c      	bne.n	8001622 <__eqdf2+0x5a>
 8001608:	2001      	movs	r0, #1
 800160a:	45c4      	cmp	ip, r8
 800160c:	d109      	bne.n	8001622 <__eqdf2+0x5a>
 800160e:	4559      	cmp	r1, fp
 8001610:	d017      	beq.n	8001642 <__eqdf2+0x7a>
 8001612:	2c00      	cmp	r4, #0
 8001614:	d105      	bne.n	8001622 <__eqdf2+0x5a>
 8001616:	0030      	movs	r0, r6
 8001618:	4328      	orrs	r0, r5
 800161a:	1e43      	subs	r3, r0, #1
 800161c:	4198      	sbcs	r0, r3
 800161e:	e000      	b.n	8001622 <__eqdf2+0x5a>
 8001620:	2001      	movs	r0, #1
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	0033      	movs	r3, r6
 8001630:	2001      	movs	r0, #1
 8001632:	432b      	orrs	r3, r5
 8001634:	d1f5      	bne.n	8001622 <__eqdf2+0x5a>
 8001636:	42a2      	cmp	r2, r4
 8001638:	d1f3      	bne.n	8001622 <__eqdf2+0x5a>
 800163a:	464b      	mov	r3, r9
 800163c:	433b      	orrs	r3, r7
 800163e:	d1f0      	bne.n	8001622 <__eqdf2+0x5a>
 8001640:	e7e2      	b.n	8001608 <__eqdf2+0x40>
 8001642:	2000      	movs	r0, #0
 8001644:	e7ed      	b.n	8001622 <__eqdf2+0x5a>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff

0800164c <__gedf2>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	4647      	mov	r7, r8
 8001650:	46ce      	mov	lr, r9
 8001652:	0004      	movs	r4, r0
 8001654:	0018      	movs	r0, r3
 8001656:	0016      	movs	r6, r2
 8001658:	031b      	lsls	r3, r3, #12
 800165a:	0b1b      	lsrs	r3, r3, #12
 800165c:	4d2d      	ldr	r5, [pc, #180]	; (8001714 <__gedf2+0xc8>)
 800165e:	004a      	lsls	r2, r1, #1
 8001660:	4699      	mov	r9, r3
 8001662:	b580      	push	{r7, lr}
 8001664:	0043      	lsls	r3, r0, #1
 8001666:	030f      	lsls	r7, r1, #12
 8001668:	46a4      	mov	ip, r4
 800166a:	46b0      	mov	r8, r6
 800166c:	0b3f      	lsrs	r7, r7, #12
 800166e:	0d52      	lsrs	r2, r2, #21
 8001670:	0fc9      	lsrs	r1, r1, #31
 8001672:	0d5b      	lsrs	r3, r3, #21
 8001674:	0fc0      	lsrs	r0, r0, #31
 8001676:	42aa      	cmp	r2, r5
 8001678:	d021      	beq.n	80016be <__gedf2+0x72>
 800167a:	42ab      	cmp	r3, r5
 800167c:	d013      	beq.n	80016a6 <__gedf2+0x5a>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d122      	bne.n	80016c8 <__gedf2+0x7c>
 8001682:	433c      	orrs	r4, r7
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <__gedf2+0x42>
 8001688:	464d      	mov	r5, r9
 800168a:	432e      	orrs	r6, r5
 800168c:	d022      	beq.n	80016d4 <__gedf2+0x88>
 800168e:	2c00      	cmp	r4, #0
 8001690:	d010      	beq.n	80016b4 <__gedf2+0x68>
 8001692:	4281      	cmp	r1, r0
 8001694:	d022      	beq.n	80016dc <__gedf2+0x90>
 8001696:	2002      	movs	r0, #2
 8001698:	3901      	subs	r1, #1
 800169a:	4008      	ands	r0, r1
 800169c:	3801      	subs	r0, #1
 800169e:	bcc0      	pop	{r6, r7}
 80016a0:	46b9      	mov	r9, r7
 80016a2:	46b0      	mov	r8, r6
 80016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a6:	464d      	mov	r5, r9
 80016a8:	432e      	orrs	r6, r5
 80016aa:	d129      	bne.n	8001700 <__gedf2+0xb4>
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d1f0      	bne.n	8001692 <__gedf2+0x46>
 80016b0:	433c      	orrs	r4, r7
 80016b2:	d1ee      	bne.n	8001692 <__gedf2+0x46>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d1f2      	bne.n	800169e <__gedf2+0x52>
 80016b8:	2001      	movs	r0, #1
 80016ba:	4240      	negs	r0, r0
 80016bc:	e7ef      	b.n	800169e <__gedf2+0x52>
 80016be:	003d      	movs	r5, r7
 80016c0:	4325      	orrs	r5, r4
 80016c2:	d11d      	bne.n	8001700 <__gedf2+0xb4>
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d0ee      	beq.n	80016a6 <__gedf2+0x5a>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e2      	bne.n	8001692 <__gedf2+0x46>
 80016cc:	464c      	mov	r4, r9
 80016ce:	4326      	orrs	r6, r4
 80016d0:	d1df      	bne.n	8001692 <__gedf2+0x46>
 80016d2:	e7e0      	b.n	8001696 <__gedf2+0x4a>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d0e1      	beq.n	800169e <__gedf2+0x52>
 80016da:	e7dc      	b.n	8001696 <__gedf2+0x4a>
 80016dc:	429a      	cmp	r2, r3
 80016de:	dc0a      	bgt.n	80016f6 <__gedf2+0xaa>
 80016e0:	dbe8      	blt.n	80016b4 <__gedf2+0x68>
 80016e2:	454f      	cmp	r7, r9
 80016e4:	d8d7      	bhi.n	8001696 <__gedf2+0x4a>
 80016e6:	d00e      	beq.n	8001706 <__gedf2+0xba>
 80016e8:	2000      	movs	r0, #0
 80016ea:	454f      	cmp	r7, r9
 80016ec:	d2d7      	bcs.n	800169e <__gedf2+0x52>
 80016ee:	2900      	cmp	r1, #0
 80016f0:	d0e2      	beq.n	80016b8 <__gedf2+0x6c>
 80016f2:	0008      	movs	r0, r1
 80016f4:	e7d3      	b.n	800169e <__gedf2+0x52>
 80016f6:	4243      	negs	r3, r0
 80016f8:	4158      	adcs	r0, r3
 80016fa:	0040      	lsls	r0, r0, #1
 80016fc:	3801      	subs	r0, #1
 80016fe:	e7ce      	b.n	800169e <__gedf2+0x52>
 8001700:	2002      	movs	r0, #2
 8001702:	4240      	negs	r0, r0
 8001704:	e7cb      	b.n	800169e <__gedf2+0x52>
 8001706:	45c4      	cmp	ip, r8
 8001708:	d8c5      	bhi.n	8001696 <__gedf2+0x4a>
 800170a:	2000      	movs	r0, #0
 800170c:	45c4      	cmp	ip, r8
 800170e:	d2c6      	bcs.n	800169e <__gedf2+0x52>
 8001710:	e7ed      	b.n	80016ee <__gedf2+0xa2>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff

08001718 <__ledf2>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	4647      	mov	r7, r8
 800171c:	46ce      	mov	lr, r9
 800171e:	0004      	movs	r4, r0
 8001720:	0018      	movs	r0, r3
 8001722:	0016      	movs	r6, r2
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	0b1b      	lsrs	r3, r3, #12
 8001728:	4d2c      	ldr	r5, [pc, #176]	; (80017dc <__ledf2+0xc4>)
 800172a:	004a      	lsls	r2, r1, #1
 800172c:	4699      	mov	r9, r3
 800172e:	b580      	push	{r7, lr}
 8001730:	0043      	lsls	r3, r0, #1
 8001732:	030f      	lsls	r7, r1, #12
 8001734:	46a4      	mov	ip, r4
 8001736:	46b0      	mov	r8, r6
 8001738:	0b3f      	lsrs	r7, r7, #12
 800173a:	0d52      	lsrs	r2, r2, #21
 800173c:	0fc9      	lsrs	r1, r1, #31
 800173e:	0d5b      	lsrs	r3, r3, #21
 8001740:	0fc0      	lsrs	r0, r0, #31
 8001742:	42aa      	cmp	r2, r5
 8001744:	d00d      	beq.n	8001762 <__ledf2+0x4a>
 8001746:	42ab      	cmp	r3, r5
 8001748:	d010      	beq.n	800176c <__ledf2+0x54>
 800174a:	2a00      	cmp	r2, #0
 800174c:	d127      	bne.n	800179e <__ledf2+0x86>
 800174e:	433c      	orrs	r4, r7
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <__ledf2+0x60>
 8001754:	464d      	mov	r5, r9
 8001756:	432e      	orrs	r6, r5
 8001758:	d10e      	bne.n	8001778 <__ledf2+0x60>
 800175a:	2000      	movs	r0, #0
 800175c:	2c00      	cmp	r4, #0
 800175e:	d015      	beq.n	800178c <__ledf2+0x74>
 8001760:	e00e      	b.n	8001780 <__ledf2+0x68>
 8001762:	003d      	movs	r5, r7
 8001764:	4325      	orrs	r5, r4
 8001766:	d110      	bne.n	800178a <__ledf2+0x72>
 8001768:	4293      	cmp	r3, r2
 800176a:	d118      	bne.n	800179e <__ledf2+0x86>
 800176c:	464d      	mov	r5, r9
 800176e:	432e      	orrs	r6, r5
 8001770:	d10b      	bne.n	800178a <__ledf2+0x72>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d102      	bne.n	800177c <__ledf2+0x64>
 8001776:	433c      	orrs	r4, r7
 8001778:	2c00      	cmp	r4, #0
 800177a:	d00b      	beq.n	8001794 <__ledf2+0x7c>
 800177c:	4281      	cmp	r1, r0
 800177e:	d014      	beq.n	80017aa <__ledf2+0x92>
 8001780:	2002      	movs	r0, #2
 8001782:	3901      	subs	r1, #1
 8001784:	4008      	ands	r0, r1
 8001786:	3801      	subs	r0, #1
 8001788:	e000      	b.n	800178c <__ledf2+0x74>
 800178a:	2002      	movs	r0, #2
 800178c:	bcc0      	pop	{r6, r7}
 800178e:	46b9      	mov	r9, r7
 8001790:	46b0      	mov	r8, r6
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	2800      	cmp	r0, #0
 8001796:	d1f9      	bne.n	800178c <__ledf2+0x74>
 8001798:	2001      	movs	r0, #1
 800179a:	4240      	negs	r0, r0
 800179c:	e7f6      	b.n	800178c <__ledf2+0x74>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ec      	bne.n	800177c <__ledf2+0x64>
 80017a2:	464c      	mov	r4, r9
 80017a4:	4326      	orrs	r6, r4
 80017a6:	d1e9      	bne.n	800177c <__ledf2+0x64>
 80017a8:	e7ea      	b.n	8001780 <__ledf2+0x68>
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dd04      	ble.n	80017b8 <__ledf2+0xa0>
 80017ae:	4243      	negs	r3, r0
 80017b0:	4158      	adcs	r0, r3
 80017b2:	0040      	lsls	r0, r0, #1
 80017b4:	3801      	subs	r0, #1
 80017b6:	e7e9      	b.n	800178c <__ledf2+0x74>
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbeb      	blt.n	8001794 <__ledf2+0x7c>
 80017bc:	454f      	cmp	r7, r9
 80017be:	d8df      	bhi.n	8001780 <__ledf2+0x68>
 80017c0:	d006      	beq.n	80017d0 <__ledf2+0xb8>
 80017c2:	2000      	movs	r0, #0
 80017c4:	454f      	cmp	r7, r9
 80017c6:	d2e1      	bcs.n	800178c <__ledf2+0x74>
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d0e5      	beq.n	8001798 <__ledf2+0x80>
 80017cc:	0008      	movs	r0, r1
 80017ce:	e7dd      	b.n	800178c <__ledf2+0x74>
 80017d0:	45c4      	cmp	ip, r8
 80017d2:	d8d5      	bhi.n	8001780 <__ledf2+0x68>
 80017d4:	2000      	movs	r0, #0
 80017d6:	45c4      	cmp	ip, r8
 80017d8:	d2d8      	bcs.n	800178c <__ledf2+0x74>
 80017da:	e7f5      	b.n	80017c8 <__ledf2+0xb0>
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <DAC_BEGIN>:
 * @brief Initialise the dac
 *
 */

uint8_t DAC_BEGIN()
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
	uint8_t status;
	status = DAC_A_B_RESET_UPDATE();
 80017e6:	1dfc      	adds	r4, r7, #7
 80017e8:	f000 f90a 	bl	8001a00 <DAC_A_B_RESET_UPDATE>
 80017ec:	0003      	movs	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
	status = DAC_A_B_PWR_UP();
 80017f0:	1dfc      	adds	r4, r7, #7
 80017f2:	f000 f8d5 	bl	80019a0 <DAC_A_B_PWR_UP>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
	status = DAC_WR_REG(CMD_EN_DIS_INTERNAL_REFERENCE, DATA_EN_INT_REF);
 80017fa:	1dfc      	adds	r4, r7, #7
 80017fc:	2101      	movs	r1, #1
 80017fe:	2038      	movs	r0, #56	; 0x38
 8001800:	f000 f852 	bl	80018a8 <DAC_WR_REG>
 8001804:	0003      	movs	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
	status = DAC_GAIN_SET(GAIN_SET_1);
 8001808:	1dfc      	adds	r4, r7, #7
 800180a:	2003      	movs	r0, #3
 800180c:	f000 f928 	bl	8001a60 <DAC_GAIN_SET>
 8001810:	0003      	movs	r3, r0
 8001812:	7023      	strb	r3, [r4, #0]
	status = DAC_WR_REG(CMD_SET_LDAC_REG, LDAC_INACTIVE);
 8001814:	1dfc      	adds	r4, r7, #7
 8001816:	2103      	movs	r1, #3
 8001818:	2030      	movs	r0, #48	; 0x30
 800181a:	f000 f845 	bl	80018a8 <DAC_WR_REG>
 800181e:	0003      	movs	r3, r0
 8001820:	7023      	strb	r3, [r4, #0]

	return status;
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b003      	add	sp, #12
 800182c:	bd90      	pop	{r4, r7, pc}

0800182e <DIN_CALC>:
void DAC_INIT();

uint16_t DIN_CALC(float voltageOut,uint8_t gain,float vref){
 800182e:	b5b0      	push	{r4, r5, r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	250b      	movs	r5, #11
 800183a:	197b      	adds	r3, r7, r5
 800183c:	1c0a      	adds	r2, r1, #0
 800183e:	701a      	strb	r2, [r3, #0]
	 * Gain is set by user, set to 1.
	 *
	 * Vref is set by user, internal ref 2.5V.
	 */

	uint16_t dIn = (voltageOut * 65536) / (vref * gain);
 8001840:	218f      	movs	r1, #143	; 0x8f
 8001842:	05c9      	lsls	r1, r1, #23
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7fe fe49 	bl	80004dc <__aeabi_fmul>
 800184a:	1c03      	adds	r3, r0, #0
 800184c:	1c1c      	adds	r4, r3, #0
 800184e:	197b      	adds	r3, r7, r5
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff f936 	bl	8000ac4 <__aeabi_i2f>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	1c18      	adds	r0, r3, #0
 800185e:	f7fe fe3d 	bl	80004dc <__aeabi_fmul>
 8001862:	1c03      	adds	r3, r0, #0
 8001864:	1c19      	adds	r1, r3, #0
 8001866:	1c20      	adds	r0, r4, #0
 8001868:	f7fe fd20 	bl	80002ac <__aeabi_fdiv>
 800186c:	1c03      	adds	r3, r0, #0
 800186e:	2516      	movs	r5, #22
 8001870:	197c      	adds	r4, r7, r5
 8001872:	1c18      	adds	r0, r3, #0
 8001874:	f7fe fce4 	bl	8000240 <__aeabi_f2uiz>
 8001878:	0003      	movs	r3, r0
 800187a:	8023      	strh	r3, [r4, #0]
	uint16_t rounded_din = round(dIn);
 800187c:	197b      	adds	r3, r7, r5
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fd35 	bl	80012f0 <__aeabi_ui2d>
 8001886:	0002      	movs	r2, r0
 8001888:	000b      	movs	r3, r1
 800188a:	2514      	movs	r5, #20
 800188c:	197c      	adds	r4, r7, r5
 800188e:	0010      	movs	r0, r2
 8001890:	0019      	movs	r1, r3
 8001892:	f7fe fced 	bl	8000270 <__aeabi_d2uiz>
 8001896:	0003      	movs	r3, r0
 8001898:	8023      	strh	r3, [r4, #0]
	return rounded_din;
 800189a:	197b      	adds	r3, r7, r5
 800189c:	881b      	ldrh	r3, [r3, #0]
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b006      	add	sp, #24
 80018a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018a8 <DAC_WR_REG>:

/*
 * @brief Generic write register
 */
uint8_t DAC_WR_REG(uint8_t cmd, uint16_t data)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0002      	movs	r2, r0
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	1c0a      	adds	r2, r1, #0
 80018b8:	801a      	strh	r2, [r3, #0]
    uint8_t status;
    uint8_t txData[3];

	txData[0] = cmd;
 80018ba:	210c      	movs	r1, #12
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	1dfa      	adds	r2, r7, #7
 80018c0:	7812      	ldrb	r2, [r2, #0]
 80018c2:	701a      	strb	r2, [r3, #0]
	txData[1] = ((data >> 8) & 0xFF);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	705a      	strb	r2, [r3, #1]
	txData[2] = (data & 0xFF);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	000c      	movs	r4, r1
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_RESET);
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <DAC_WR_REG+0x78>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 fe9f 	bl	8002628 <HAL_GPIO_WritePin>
	status = (HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY)==HAL_OK);
 80018ea:	2301      	movs	r3, #1
 80018ec:	425b      	negs	r3, r3
 80018ee:	1939      	adds	r1, r7, r4
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <DAC_WR_REG+0x7c>)
 80018f2:	2203      	movs	r2, #3
 80018f4:	f001 fd60 	bl	80033b8 <HAL_SPI_Transmit>
 80018f8:	0003      	movs	r3, r0
 80018fa:	425a      	negs	r2, r3
 80018fc:	4153      	adcs	r3, r2
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	240f      	movs	r4, #15
 8001902:	193b      	adds	r3, r7, r4
 8001904:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_SET);
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <DAC_WR_REG+0x78>)
 8001908:	2201      	movs	r2, #1
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	0018      	movs	r0, r3
 800190e:	f000 fe8b 	bl	8002628 <HAL_GPIO_WritePin>

	return status;
 8001912:	193b      	adds	r3, r7, r4
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b005      	add	sp, #20
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	48000400 	.word	0x48000400
 8001924:	2000008c 	.word	0x2000008c

08001928 <DAC_A_WR_UPDATE>:

/*
 *  Write and update DAC_A
 */
uint8_t DAC_A_WR_UPDATE(uint16_t data)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	uint8_t txData[3];

	txData[0] = CMD_WRITE_UPDATE_DAC_A;
 8001934:	210c      	movs	r1, #12
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2218      	movs	r2, #24
 800193a:	701a      	strb	r2, [r3, #0]
	txData[1] = ((data >> 8) & 0xFF);
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2da      	uxtb	r2, r3
 8001946:	187b      	adds	r3, r7, r1
 8001948:	705a      	strb	r2, [r3, #1]
	txData[2] = (data & 0xFF);
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	000c      	movs	r4, r1
 8001952:	187b      	adds	r3, r7, r1
 8001954:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_RESET);
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <DAC_A_WR_UPDATE+0x70>)
 8001958:	2200      	movs	r2, #0
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	0018      	movs	r0, r3
 800195e:	f000 fe63 	bl	8002628 <HAL_GPIO_WritePin>
	status = (HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY)==HAL_OK);
 8001962:	2301      	movs	r3, #1
 8001964:	425b      	negs	r3, r3
 8001966:	1939      	adds	r1, r7, r4
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <DAC_A_WR_UPDATE+0x74>)
 800196a:	2203      	movs	r2, #3
 800196c:	f001 fd24 	bl	80033b8 <HAL_SPI_Transmit>
 8001970:	0003      	movs	r3, r0
 8001972:	425a      	negs	r2, r3
 8001974:	4153      	adcs	r3, r2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	240f      	movs	r4, #15
 800197a:	193b      	adds	r3, r7, r4
 800197c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_SET);
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <DAC_A_WR_UPDATE+0x70>)
 8001980:	2201      	movs	r2, #1
 8001982:	2140      	movs	r1, #64	; 0x40
 8001984:	0018      	movs	r0, r3
 8001986:	f000 fe4f 	bl	8002628 <HAL_GPIO_WritePin>

	return status;
 800198a:	193b      	adds	r3, r7, r4
 800198c:	781b      	ldrb	r3, [r3, #0]

}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b005      	add	sp, #20
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	48000400 	.word	0x48000400
 800199c:	2000008c 	.word	0x2000008c

080019a0 <DAC_A_B_PWR_UP>:

/*
 *  Power up DAC_A and DAC_B
 */
uint8_t DAC_A_B_PWR_UP()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t txData[3];

	txData[0] = CMD_PWR_UP_DOWN_DAC;
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2220      	movs	r2, #32
 80019aa:	701a      	strb	r2, [r3, #0]
	txData[1] = ((DATA_PWR_UP_DAC_A_B >> 8) & 0xFF);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
	txData[2] = (DATA_PWR_UP_DAC_A_B & 0xFF);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2203      	movs	r2, #3
 80019b6:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_RESET);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <DAC_A_B_PWR_UP+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	2140      	movs	r1, #64	; 0x40
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fe32 	bl	8002628 <HAL_GPIO_WritePin>
	status = (HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY)==HAL_OK);
 80019c4:	2301      	movs	r3, #1
 80019c6:	425b      	negs	r3, r3
 80019c8:	1d39      	adds	r1, r7, #4
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <DAC_A_B_PWR_UP+0x5c>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	f001 fcf3 	bl	80033b8 <HAL_SPI_Transmit>
 80019d2:	0003      	movs	r3, r0
 80019d4:	425a      	negs	r2, r3
 80019d6:	4153      	adcs	r3, r2
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_SET);
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <DAC_A_B_PWR_UP+0x58>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	2140      	movs	r1, #64	; 0x40
 80019e4:	0018      	movs	r0, r3
 80019e6:	f000 fe1f 	bl	8002628 <HAL_GPIO_WritePin>

	return status;
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	48000400 	.word	0x48000400
 80019fc:	2000008c 	.word	0x2000008c

08001a00 <DAC_A_B_RESET_UPDATE>:

/*
 * Reset all registers, and update all DACs
 */
uint8_t DAC_A_B_RESET_UPDATE()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t txData[3];

	txData[0] = CMD_SOFTWARE_RST;
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2228      	movs	r2, #40	; 0x28
 8001a0a:	701a      	strb	r2, [r3, #0]
	txData[1] = ((DATA_RST_DAC_A_B_UPDATE >> 8) & 0xFF);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	705a      	strb	r2, [r3, #1]
	txData[2] = (DATA_RST_DAC_A_B_UPDATE & 0xFF);
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2201      	movs	r2, #1
 8001a16:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_RESET);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <DAC_A_B_RESET_UPDATE+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2140      	movs	r1, #64	; 0x40
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 fe02 	bl	8002628 <HAL_GPIO_WritePin>
	status = (HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY)==HAL_OK);
 8001a24:	2301      	movs	r3, #1
 8001a26:	425b      	negs	r3, r3
 8001a28:	1d39      	adds	r1, r7, #4
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <DAC_A_B_RESET_UPDATE+0x5c>)
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f001 fcc3 	bl	80033b8 <HAL_SPI_Transmit>
 8001a32:	0003      	movs	r3, r0
 8001a34:	425a      	negs	r2, r3
 8001a36:	4153      	adcs	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_SET);
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <DAC_A_B_RESET_UPDATE+0x58>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 fdef 	bl	8002628 <HAL_GPIO_WritePin>

	return status;
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	781b      	ldrb	r3, [r3, #0]
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	2000008c 	.word	0x2000008c

08001a60 <DAC_GAIN_SET>:


uint8_t DAC_GAIN_SET(uint16_t data)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	1dbb      	adds	r3, r7, #6
 8001a6a:	801a      	strh	r2, [r3, #0]
	uint8_t status;
	uint8_t txData[3];

	txData[0] = CMD_DAC_GAIN_SET;
 8001a6c:	210c      	movs	r1, #12
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2202      	movs	r2, #2
 8001a72:	701a      	strb	r2, [r3, #0]
	txData[1] = ((data >> 8) & 0xFF);
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	705a      	strb	r2, [r3, #1]
	txData[2] = (data & 0xFF);
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	000c      	movs	r4, r1
 8001a8a:	187b      	adds	r3, r7, r1
 8001a8c:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_RESET);
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <DAC_GAIN_SET+0x70>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fdc7 	bl	8002628 <HAL_GPIO_WritePin>
	status = (HAL_SPI_Transmit(&hspi1, txData, sizeof(txData), HAL_MAX_DELAY)==HAL_OK);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	1939      	adds	r1, r7, r4
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <DAC_GAIN_SET+0x74>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f001 fc88 	bl	80033b8 <HAL_SPI_Transmit>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	425a      	negs	r2, r3
 8001aac:	4153      	adcs	r3, r2
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	240f      	movs	r4, #15
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DAC_NSS_Pin, GPIO_PIN_SET);
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <DAC_GAIN_SET+0x70>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 fdb3 	bl	8002628 <HAL_GPIO_WritePin>

	return status;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b005      	add	sp, #20
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	2000008c 	.word	0x2000008c

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ade:	f000 fb13 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae2:	f000 f847 	bl	8001b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae6:	f000 f917 	bl	8001d18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aea:	f000 f8e5 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001aee:	f000 f8a3 	bl	8001c38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status = DAC_BEGIN();
 8001af2:	1dfc      	adds	r4, r7, #7
 8001af4:	f7ff fe74 	bl	80017e0 <DAC_BEGIN>
 8001af8:	0003      	movs	r3, r0
 8001afa:	7023      	strb	r3, [r4, #0]
  dIn = DIN_CALC(2.4, 1, 2.5);
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <main+0x84>)
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <main+0x88>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	1c18      	adds	r0, r3, #0
 8001b04:	f7ff fe93 	bl	800182e <DIN_CALC>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <main+0x8c>)
 8001b0e:	801a      	strh	r2, [r3, #0]

  status = DAC_A_WR_UPDATE(dIn);
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <main+0x8c>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	1dfc      	adds	r4, r7, #7
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff ff06 	bl	8001928 <DAC_A_WR_UPDATE>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	7023      	strb	r3, [r4, #0]
  if(!status){
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d112      	bne.n	8001b4e <main+0x76>
	  /*
	   * Error handling
	   */
	  sprintf(uartString, "Failed to update!\r\n");
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <main+0x90>)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <main+0x94>)
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f002 fc50 	bl	80043d4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)uartString, strlen(uartString), HAL_MAX_DELAY);
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <main+0x94>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7fe fae4 	bl	8000104 <strlen>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	2301      	movs	r3, #1
 8001b42:	425b      	negs	r3, r3
 8001b44:	4909      	ldr	r1, [pc, #36]	; (8001b6c <main+0x94>)
 8001b46:	480a      	ldr	r0, [pc, #40]	; (8001b70 <main+0x98>)
 8001b48:	f001 ff60 	bl	8003a0c <HAL_UART_Transmit>
	  return;
 8001b4c:	e000      	b.n	8001b50 <main+0x78>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <main+0x76>
	  return;
 8001b50:	46c0      	nop			; (mov r8, r8)
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b003      	add	sp, #12
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	40200000 	.word	0x40200000
 8001b60:	4019999a 	.word	0x4019999a
 8001b64:	200001aa 	.word	0x200001aa
 8001b68:	08004cc0 	.word	0x08004cc0
 8001b6c:	20000178 	.word	0x20000178
 8001b70:	200000f0 	.word	0x200000f0

08001b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b099      	sub	sp, #100	; 0x64
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	242c      	movs	r4, #44	; 0x2c
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	0018      	movs	r0, r3
 8001b80:	2334      	movs	r3, #52	; 0x34
 8001b82:	001a      	movs	r2, r3
 8001b84:	2100      	movs	r1, #0
 8001b86:	f002 fc1d 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8a:	231c      	movs	r3, #28
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2310      	movs	r3, #16
 8001b92:	001a      	movs	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	f002 fc15 	bl	80043c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9a:	003b      	movs	r3, r7
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	231c      	movs	r3, #28
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f002 fc0e 	bl	80043c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba8:	0021      	movs	r1, r4
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2202      	movs	r2, #2
 8001bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	2210      	movs	r2, #16
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	22a0      	movs	r2, #160	; 0xa0
 8001bce:	0392      	lsls	r2, r2, #14
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 fd42 	bl	8002664 <HAL_RCC_OscConfig>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001be4:	f000 f92a 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	211c      	movs	r1, #28
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2101      	movs	r1, #1
 8001c06:	0018      	movs	r0, r3
 8001c08:	f001 f8b2 	bl	8002d70 <HAL_RCC_ClockConfig>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c10:	f000 f914 	bl	8001e3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c14:	003b      	movs	r3, r7
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c1a:	003b      	movs	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	003b      	movs	r3, r7
 8001c22:	0018      	movs	r0, r3
 8001c24:	f001 fa10 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c2c:	f000 f906 	bl	8001e3c <Error_Handler>
  }
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b019      	add	sp, #100	; 0x64
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <MX_SPI1_Init+0x7c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c44:	2282      	movs	r2, #130	; 0x82
 8001c46:	0052      	lsls	r2, r2, #1
 8001c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	0212      	lsls	r2, r2, #8
 8001c50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c54:	22e0      	movs	r2, #224	; 0xe0
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c70:	2208      	movs	r2, #8
 8001c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c94:	2208      	movs	r2, #8
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <MX_SPI1_Init+0x78>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f001 fad4 	bl	8003248 <HAL_SPI_Init>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001ca4:	f000 f8ca 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	2000008c 	.word	0x2000008c
 8001cb4:	40013000 	.word	0x40013000

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <MX_USART2_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cc4:	22e1      	movs	r2, #225	; 0xe1
 8001cc6:	0252      	lsls	r2, r2, #9
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <MX_USART2_UART_Init+0x58>)
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 fe31 	bl	8003964 <HAL_UART_Init>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f000 f899 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200000f0 	.word	0x200000f0
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	2414      	movs	r4, #20
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	0018      	movs	r0, r3
 8001d24:	2314      	movs	r3, #20
 8001d26:	001a      	movs	r2, r3
 8001d28:	2100      	movs	r1, #0
 8001d2a:	f002 fb4b 	bl	80043c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0309      	lsls	r1, r1, #12
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	03c9      	lsls	r1, r1, #15
 8001d54:	430a      	orrs	r2, r1
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	03db      	lsls	r3, r3, #15
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	0289      	lsls	r1, r1, #10
 8001d70:	430a      	orrs	r2, r1
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	02c9      	lsls	r1, r1, #11
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_GPIO_Init+0x118>)
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	02db      	lsls	r3, r3, #11
 8001d98:	4013      	ands	r3, r2
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d9e:	2390      	movs	r3, #144	; 0x90
 8001da0:	05db      	lsls	r3, r3, #23
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fc3e 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_NSS_GPIO_Port, DAC_NSS_Pin, GPIO_PIN_RESET);
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <MX_GPIO_Init+0x11c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fc38 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	0192      	lsls	r2, r2, #6
 8001dbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	2284      	movs	r2, #132	; 0x84
 8001dc4:	0392      	lsls	r2, r2, #14
 8001dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <MX_GPIO_Init+0x120>)
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	0010      	movs	r0, r2
 8001dd6:	f000 faaf 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	2220      	movs	r2, #32
 8001dde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	2201      	movs	r2, #1
 8001de4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001df2:	193a      	adds	r2, r7, r4
 8001df4:	2390      	movs	r3, #144	; 0x90
 8001df6:	05db      	lsls	r3, r3, #23
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 fa9c 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_NSS_Pin */
  GPIO_InitStruct.Pin = DAC_NSS_Pin;
 8001e00:	0021      	movs	r1, r4
 8001e02:	187b      	adds	r3, r7, r1
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DAC_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <MX_GPIO_Init+0x11c>)
 8001e1e:	0019      	movs	r1, r3
 8001e20:	0010      	movs	r0, r2
 8001e22:	f000 fa89 	bl	8002338 <HAL_GPIO_Init>

}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b00b      	add	sp, #44	; 0x2c
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_MspInit+0x44>)
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_MspInit+0x44>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	619a      	str	r2, [r3, #24]
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_MspInit+0x44>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_MspInit+0x44>)
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_MspInit+0x44>)
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0549      	lsls	r1, r1, #21
 8001e70:	430a      	orrs	r2, r1
 8001e72:	61da      	str	r2, [r3, #28]
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_MspInit+0x44>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	055b      	lsls	r3, r3, #21
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b08b      	sub	sp, #44	; 0x2c
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	2414      	movs	r4, #20
 8001e9a:	193b      	adds	r3, r7, r4
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	2314      	movs	r3, #20
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	f002 fa8e 	bl	80043c4 <memset>
  if(hspi->Instance==SPI1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <HAL_SPI_MspInit+0xd8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d155      	bne.n	8001f5e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0149      	lsls	r1, r1, #5
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	015b      	lsls	r3, r3, #5
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0289      	lsls	r1, r1, #10
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	02c9      	lsls	r1, r1, #11
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_SPI_MspInit+0xdc>)
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	02db      	lsls	r3, r3, #11
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	193b      	adds	r3, r7, r4
 8001f0e:	2202      	movs	r2, #2
 8001f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f24:	193a      	adds	r2, r7, r4
 8001f26:	2390      	movs	r3, #144	; 0x90
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f000 fa03 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f32:	0021      	movs	r1, r4
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2208      	movs	r2, #8
 8001f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <HAL_SPI_MspInit+0xe0>)
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f000 f9ed 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b00b      	add	sp, #44	; 0x2c
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48000400 	.word	0x48000400

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b08b      	sub	sp, #44	; 0x2c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	2414      	movs	r4, #20
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	2314      	movs	r3, #20
 8001f84:	001a      	movs	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	f002 fa1c 	bl	80043c4 <memset>
  if(huart->Instance==USART2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_UART_MspInit+0x90>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d132      	bne.n	8001ffc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0289      	lsls	r1, r1, #10
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	0289      	lsls	r1, r1, #10
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UART_MspInit+0x94>)
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fce:	0021      	movs	r1, r4
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2202      	movs	r2, #2
 8001fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	2201      	movs	r2, #1
 8001fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	187a      	adds	r2, r7, r1
 8001ff0:	2390      	movs	r3, #144	; 0x90
 8001ff2:	05db      	lsls	r3, r3, #23
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f000 f99e 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b00b      	add	sp, #44	; 0x2c
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	40004400 	.word	0x40004400
 8002008:	40021000 	.word	0x40021000

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002030:	f000 f8b2 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	; (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f002 f980 	bl	8004370 <__errno>
 8002070:	0003      	movs	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	2301      	movs	r3, #1
 8002078:	425b      	negs	r3, r3
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <_sbrk+0x64>)
 800208c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b006      	add	sp, #24
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20008000 	.word	0x20008000
 800209c:	00000400 	.word	0x00000400
 80020a0:	200001ac 	.word	0x200001ac
 80020a4:	200001c8 	.word	0x200001c8

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b8:	f7ff fff6 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	; (80020f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <LoopForever+0xe>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	; (8002100 <LoopForever+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020e2:	f002 f94b 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020e6:	f7ff fcf7 	bl	8001ad8 <main>

080020ea <LoopForever>:

LoopForever:
    b LoopForever
 80020ea:	e7fe      	b.n	80020ea <LoopForever>
  ldr   r0, =_estack
 80020ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020f8:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 80020fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002100:	200001c4 	.word	0x200001c4

08002104 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_COMP_IRQHandler>
	...

08002108 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_Init+0x24>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_Init+0x24>)
 8002112:	2110      	movs	r1, #16
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f809 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211e:	f7ff fe93 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_InitTick+0x5c>)
 800213a:	681c      	ldr	r4, [r3, #0]
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_InitTick+0x60>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	0019      	movs	r1, r3
 8002142:	23fa      	movs	r3, #250	; 0xfa
 8002144:	0098      	lsls	r0, r3, #2
 8002146:	f7fd ffef 	bl	8000128 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	0019      	movs	r1, r3
 800214e:	0020      	movs	r0, r4
 8002150:	f7fd ffea 	bl	8000128 <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f8e1 	bl	800231e <HAL_SYSTICK_Config>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e00f      	b.n	8002184 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d80b      	bhi.n	8002182 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	2200      	movs	r2, #0
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f8be 	bl	80022f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_InitTick+0x64>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b003      	add	sp, #12
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	20000000 	.word	0x20000000
 8002190:	20000008 	.word	0x20000008
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_IncTick+0x20>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	18d2      	adds	r2, r2, r3
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_IncTick+0x20>)
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	20000008 	.word	0x20000008
 80021b8:	200001b0 	.word	0x200001b0

080021bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_GetTick+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	200001b0 	.word	0x200001b0

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	0002      	movs	r2, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b7f      	cmp	r3, #127	; 0x7f
 80021e4:	d828      	bhi.n	8002238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e6:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <__NVIC_SetPriority+0xd4>)
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	33c0      	adds	r3, #192	; 0xc0
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	589b      	ldr	r3, [r3, r2]
 80021f6:	1dfa      	adds	r2, r7, #7
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	0011      	movs	r1, r2
 80021fc:	2203      	movs	r2, #3
 80021fe:	400a      	ands	r2, r1
 8002200:	00d2      	lsls	r2, r2, #3
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	4091      	lsls	r1, r2
 8002206:	000a      	movs	r2, r1
 8002208:	43d2      	mvns	r2, r2
 800220a:	401a      	ands	r2, r3
 800220c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	401a      	ands	r2, r3
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	0018      	movs	r0, r3
 800221c:	2303      	movs	r3, #3
 800221e:	4003      	ands	r3, r0
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002224:	481f      	ldr	r0, [pc, #124]	; (80022a4 <__NVIC_SetPriority+0xd4>)
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b25b      	sxtb	r3, r3
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	430a      	orrs	r2, r1
 8002230:	33c0      	adds	r3, #192	; 0xc0
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002236:	e031      	b.n	800229c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002238:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <__NVIC_SetPriority+0xd8>)
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	0019      	movs	r1, r3
 8002240:	230f      	movs	r3, #15
 8002242:	400b      	ands	r3, r1
 8002244:	3b08      	subs	r3, #8
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3306      	adds	r3, #6
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	18d3      	adds	r3, r2, r3
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1dfa      	adds	r2, r7, #7
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	0011      	movs	r1, r2
 8002258:	2203      	movs	r2, #3
 800225a:	400a      	ands	r2, r1
 800225c:	00d2      	lsls	r2, r2, #3
 800225e:	21ff      	movs	r1, #255	; 0xff
 8002260:	4091      	lsls	r1, r2
 8002262:	000a      	movs	r2, r1
 8002264:	43d2      	mvns	r2, r2
 8002266:	401a      	ands	r2, r3
 8002268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	401a      	ands	r2, r3
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	0018      	movs	r0, r3
 8002278:	2303      	movs	r3, #3
 800227a:	4003      	ands	r3, r0
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002280:	4809      	ldr	r0, [pc, #36]	; (80022a8 <__NVIC_SetPriority+0xd8>)
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	001c      	movs	r4, r3
 8002288:	230f      	movs	r3, #15
 800228a:	4023      	ands	r3, r4
 800228c:	3b08      	subs	r3, #8
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	430a      	orrs	r2, r1
 8002292:	3306      	adds	r3, #6
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	18c3      	adds	r3, r0, r3
 8002298:	3304      	adds	r3, #4
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b003      	add	sp, #12
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	045b      	lsls	r3, r3, #17
 80022bc:	429a      	cmp	r2, r3
 80022be:	d301      	bcc.n	80022c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c0:	2301      	movs	r3, #1
 80022c2:	e010      	b.n	80022e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <SysTick_Config+0x44>)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	3a01      	subs	r2, #1
 80022ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022cc:	2301      	movs	r3, #1
 80022ce:	425b      	negs	r3, r3
 80022d0:	2103      	movs	r1, #3
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff ff7c 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x44>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x44>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	210f      	movs	r1, #15
 8002300:	187b      	adds	r3, r7, r1
 8002302:	1c02      	adds	r2, r0, #0
 8002304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	187b      	adds	r3, r7, r1
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b25b      	sxtb	r3, r3
 800230e:	0011      	movs	r1, r2
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff ff5d 	bl	80021d0 <__NVIC_SetPriority>
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b004      	add	sp, #16
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ffbf 	bl	80022ac <SysTick_Config>
 800232e:	0003      	movs	r3, r0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	e155      	b.n	80025f4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4091      	lsls	r1, r2
 8002352:	000a      	movs	r2, r1
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d100      	bne.n	8002360 <HAL_GPIO_Init+0x28>
 800235e:	e146      	b.n	80025ee <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	2b01      	cmp	r3, #1
 800236a:	d005      	beq.n	8002378 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2203      	movs	r2, #3
 8002372:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002374:	2b02      	cmp	r3, #2
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	409a      	lsls	r2, r3
 800239a:	0013      	movs	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	2201      	movs	r2, #1
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2203      	movs	r2, #3
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d017      	beq.n	8002416 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	43da      	mvns	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	409a      	lsls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	4013      	ands	r3, r2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	0092      	lsls	r2, r2, #2
 800242c:	58d3      	ldr	r3, [r2, r3]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2107      	movs	r1, #7
 800244e:	400b      	ands	r3, r1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	409a      	lsls	r2, r3
 8002478:	0013      	movs	r3, r2
 800247a:	43da      	mvns	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2203      	movs	r2, #3
 8002488:	401a      	ands	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	029b      	lsls	r3, r3, #10
 80024a6:	4013      	ands	r3, r2
 80024a8:	d100      	bne.n	80024ac <HAL_GPIO_Init+0x174>
 80024aa:	e0a0      	b.n	80025ee <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2203      	movs	r2, #3
 80024d6:	4013      	ands	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	220f      	movs	r2, #15
 80024dc:	409a      	lsls	r2, r3
 80024de:	0013      	movs	r3, r2
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	2390      	movs	r3, #144	; 0x90
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x1ee>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1ea>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	; (8002618 <HAL_GPIO_Init+0x2e0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1e6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a45      	ldr	r2, [pc, #276]	; (800261c <HAL_GPIO_Init+0x2e4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1e2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a44      	ldr	r2, [pc, #272]	; (8002620 <HAL_GPIO_Init+0x2e8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1de>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002516:	2305      	movs	r3, #5
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x1f0>
 8002526:	2300      	movs	r3, #0
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	2103      	movs	r1, #3
 800252c:	400a      	ands	r2, r1
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	035b      	lsls	r3, r3, #13
 800255e:	4013      	ands	r3, r2
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43da      	mvns	r2, r3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	4013      	ands	r3, r2
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43da      	mvns	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	029b      	lsls	r3, r3, #10
 80025b2:	4013      	ands	r3, r2
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	4013      	ands	r3, r2
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_GPIO_Init+0x2ec>)
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	40da      	lsrs	r2, r3
 80025fc:	1e13      	subs	r3, r2, #0
 80025fe:	d000      	beq.n	8002602 <HAL_GPIO_Init+0x2ca>
 8002600:	e6a2      	b.n	8002348 <HAL_GPIO_Init+0x10>
  } 
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b006      	add	sp, #24
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	0008      	movs	r0, r1
 8002632:	0011      	movs	r1, r2
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	1c02      	adds	r2, r0, #0
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	1c0a      	adds	r2, r1, #0
 800263e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002640:	1c7b      	adds	r3, r7, #1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002648:	1cbb      	adds	r3, r7, #2
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	1cbb      	adds	r3, r7, #2
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f000 fb76 	bl	8002d64 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d100      	bne.n	8002684 <HAL_RCC_OscConfig+0x20>
 8002682:	e08e      	b.n	80027a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002684:	4bc5      	ldr	r3, [pc, #788]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	220c      	movs	r2, #12
 800268a:	4013      	ands	r3, r2
 800268c:	2b04      	cmp	r3, #4
 800268e:	d00e      	beq.n	80026ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002690:	4bc2      	ldr	r3, [pc, #776]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	220c      	movs	r2, #12
 8002696:	4013      	ands	r3, r2
 8002698:	2b08      	cmp	r3, #8
 800269a:	d117      	bne.n	80026cc <HAL_RCC_OscConfig+0x68>
 800269c:	4bbf      	ldr	r3, [pc, #764]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23c0      	movs	r3, #192	; 0xc0
 80026a2:	025b      	lsls	r3, r3, #9
 80026a4:	401a      	ands	r2, r3
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	025b      	lsls	r3, r3, #9
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10e      	bne.n	80026cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	4bbb      	ldr	r3, [pc, #748]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCC_OscConfig+0x58>
 80026ba:	e071      	b.n	80027a0 <HAL_RCC_OscConfig+0x13c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d000      	beq.n	80026c6 <HAL_RCC_OscConfig+0x62>
 80026c4:	e06c      	b.n	80027a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f000 fb4c 	bl	8002d64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x80>
 80026d4:	4bb1      	ldr	r3, [pc, #708]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4bb0      	ldr	r3, [pc, #704]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0249      	lsls	r1, r1, #9
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e02f      	b.n	8002744 <HAL_RCC_OscConfig+0xe0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0xa2>
 80026ec:	4bab      	ldr	r3, [pc, #684]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4baa      	ldr	r3, [pc, #680]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026f2:	49ab      	ldr	r1, [pc, #684]	; (80029a0 <HAL_RCC_OscConfig+0x33c>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	4ba8      	ldr	r3, [pc, #672]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4ba7      	ldr	r3, [pc, #668]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80026fe:	49a9      	ldr	r1, [pc, #676]	; (80029a4 <HAL_RCC_OscConfig+0x340>)
 8002700:	400a      	ands	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e01e      	b.n	8002744 <HAL_RCC_OscConfig+0xe0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10e      	bne.n	800272c <HAL_RCC_OscConfig+0xc8>
 800270e:	4ba3      	ldr	r3, [pc, #652]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4ba2      	ldr	r3, [pc, #648]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	02c9      	lsls	r1, r1, #11
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	4b9f      	ldr	r3, [pc, #636]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0249      	lsls	r1, r1, #9
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0xe0>
 800272c:	4b9b      	ldr	r3, [pc, #620]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002732:	499b      	ldr	r1, [pc, #620]	; (80029a0 <HAL_RCC_OscConfig+0x33c>)
 8002734:	400a      	ands	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	4b98      	ldr	r3, [pc, #608]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b97      	ldr	r3, [pc, #604]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800273e:	4999      	ldr	r1, [pc, #612]	; (80029a4 <HAL_RCC_OscConfig+0x340>)
 8002740:	400a      	ands	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d014      	beq.n	8002776 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fd36 	bl	80021bc <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002756:	f7ff fd31 	bl	80021bc <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e2fd      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002768:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	4013      	ands	r3, r2
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0xf2>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff fd21 	bl	80021bc <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002780:	f7ff fd1c 	bl	80021bc <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e2e8      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x11c>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d100      	bne.n	80027ae <HAL_RCC_OscConfig+0x14a>
 80027ac:	e06c      	b.n	8002888 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027ae:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	220c      	movs	r2, #12
 80027b4:	4013      	ands	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027b8:	4b78      	ldr	r3, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	220c      	movs	r2, #12
 80027be:	4013      	ands	r3, r2
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d11f      	bne.n	8002804 <HAL_RCC_OscConfig+0x1a0>
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	401a      	ands	r2, r3
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2202      	movs	r2, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x188>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e2bb      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	22f8      	movs	r2, #248	; 0xf8
 80027f2:	4393      	bics	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00da      	lsls	r2, r3, #3
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e041      	b.n	8002888 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d024      	beq.n	8002856 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002812:	2101      	movs	r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fcd0 	bl	80021bc <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7ff fccb 	bl	80021bc <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e297      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d0f1      	beq.n	8002822 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22f8      	movs	r2, #248	; 0xf8
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00da      	lsls	r2, r3, #3
 800284e:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e018      	b.n	8002888 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b51      	ldr	r3, [pc, #324]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800285c:	2101      	movs	r1, #1
 800285e:	438a      	bics	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7ff fcab 	bl	80021bc <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fca6 	bl	80021bc <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e272      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2202      	movs	r2, #2
 8002884:	4013      	ands	r3, r2
 8002886:	d1f1      	bne.n	800286c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	4013      	ands	r3, r2
 8002890:	d036      	beq.n	8002900 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b40      	ldr	r3, [pc, #256]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800289c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80028a0:	2101      	movs	r1, #1
 80028a2:	430a      	orrs	r2, r1
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fc89 	bl	80021bc <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff fc84 	bl	80021bc <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e250      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f1      	beq.n	80028b0 <HAL_RCC_OscConfig+0x24c>
 80028cc:	e018      	b.n	8002900 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80028d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff fc6f 	bl	80021bc <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff fc6a 	bl	80021bc <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e236      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x338>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2202      	movs	r2, #2
 80028fc:	4013      	ands	r3, r2
 80028fe:	d1f1      	bne.n	80028e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2204      	movs	r2, #4
 8002906:	4013      	ands	r3, r2
 8002908:	d100      	bne.n	800290c <HAL_RCC_OscConfig+0x2a8>
 800290a:	e0b5      	b.n	8002a78 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290c:	201f      	movs	r0, #31
 800290e:	183b      	adds	r3, r7, r0
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	055b      	lsls	r3, r3, #21
 800291c:	4013      	ands	r3, r2
 800291e:	d110      	bne.n	8002942 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	0549      	lsls	r1, r1, #21
 800292a:	430a      	orrs	r2, r1
 800292c:	61da      	str	r2, [r3, #28]
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	055b      	lsls	r3, r3, #21
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800293c:	183b      	adds	r3, r7, r0
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_OscConfig+0x344>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCC_OscConfig+0x344>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_RCC_OscConfig+0x344>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0049      	lsls	r1, r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7ff fc2e 	bl	80021bc <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7ff fc29 	bl	80021bc <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e1f5      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x344>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4013      	ands	r3, r2
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10f      	bne.n	80029ac <HAL_RCC_OscConfig+0x348>
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x338>)
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_RCC_OscConfig+0x338>)
 8002992:	2101      	movs	r1, #1
 8002994:	430a      	orrs	r2, r1
 8002996:	621a      	str	r2, [r3, #32]
 8002998:	e036      	b.n	8002a08 <HAL_RCC_OscConfig+0x3a4>
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40021000 	.word	0x40021000
 80029a0:	fffeffff 	.word	0xfffeffff
 80029a4:	fffbffff 	.word	0xfffbffff
 80029a8:	40007000 	.word	0x40007000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x36a>
 80029b4:	4bca      	ldr	r3, [pc, #808]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4bc9      	ldr	r3, [pc, #804]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	438a      	bics	r2, r1
 80029be:	621a      	str	r2, [r3, #32]
 80029c0:	4bc7      	ldr	r3, [pc, #796]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	4bc6      	ldr	r3, [pc, #792]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029c6:	2104      	movs	r1, #4
 80029c8:	438a      	bics	r2, r1
 80029ca:	621a      	str	r2, [r3, #32]
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x3a4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x38c>
 80029d6:	4bc2      	ldr	r3, [pc, #776]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	4bc1      	ldr	r3, [pc, #772]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029dc:	2104      	movs	r1, #4
 80029de:	430a      	orrs	r2, r1
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	4bbf      	ldr	r3, [pc, #764]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	4bbe      	ldr	r3, [pc, #760]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	621a      	str	r2, [r3, #32]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x3a4>
 80029f0:	4bbb      	ldr	r3, [pc, #748]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4bba      	ldr	r3, [pc, #744]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	438a      	bics	r2, r1
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	4bb7      	ldr	r3, [pc, #732]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a02:	2104      	movs	r1, #4
 8002a04:	438a      	bics	r2, r1
 8002a06:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d014      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7ff fbd4 	bl	80021bc <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7ff fbcf 	bl	80021bc <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	4aaf      	ldr	r2, [pc, #700]	; (8002ce4 <HAL_RCC_OscConfig+0x680>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e19a      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	4bac      	ldr	r3, [pc, #688]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2202      	movs	r2, #2
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3b6>
 8002a38:	e013      	b.n	8002a62 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fbbf 	bl	80021bc <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	e009      	b.n	8002a58 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7ff fbba 	bl	80021bc <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4aa5      	ldr	r2, [pc, #660]	; (8002ce4 <HAL_RCC_OscConfig+0x680>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e185      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	4ba1      	ldr	r3, [pc, #644]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a62:	231f      	movs	r3, #31
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b9c      	ldr	r3, [pc, #624]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	4b9b      	ldr	r3, [pc, #620]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a72:	499d      	ldr	r1, [pc, #628]	; (8002ce8 <HAL_RCC_OscConfig+0x684>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d12a      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a8a:	4b95      	ldr	r3, [pc, #596]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	4b94      	ldr	r3, [pc, #592]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a90:	2104      	movs	r1, #4
 8002a92:	430a      	orrs	r2, r1
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a96:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fb8b 	bl	80021bc <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002aac:	f7ff fb86 	bl	80021bc <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e152      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f1      	beq.n	8002aac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ac8:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	22f8      	movs	r2, #248	; 0xf8
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	00da      	lsls	r2, r3, #3
 8002ad8:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ade:	e034      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	3305      	adds	r3, #5
 8002ae6:	d111      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ae8:	4b7d      	ldr	r3, [pc, #500]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	2104      	movs	r1, #4
 8002af0:	438a      	bics	r2, r1
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002af4:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	22f8      	movs	r2, #248	; 0xf8
 8002afa:	4393      	bics	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	00da      	lsls	r2, r3, #3
 8002b04:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b06:	430a      	orrs	r2, r1
 8002b08:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0a:	e01e      	b.n	8002b4a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b0c:	4b74      	ldr	r3, [pc, #464]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b10:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b12:	2104      	movs	r1, #4
 8002b14:	430a      	orrs	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b18:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1c:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	438a      	bics	r2, r1
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7ff fb4a 	bl	80021bc <HAL_GetTick>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b2e:	f7ff fb45 	bl	80021bc <HAL_GetTick>
 8002b32:	0002      	movs	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e111      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d1f1      	bne.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	4013      	ands	r3, r2
 8002b52:	d05c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b54:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	220c      	movs	r2, #12
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d00e      	beq.n	8002b7e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b60:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	220c      	movs	r2, #12
 8002b66:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d114      	bne.n	8002b96 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	23c0      	movs	r3, #192	; 0xc0
 8002b72:	025b      	lsls	r3, r3, #9
 8002b74:	401a      	ands	r2, r3
 8002b76:	23c0      	movs	r3, #192	; 0xc0
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b7e:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	029b      	lsls	r3, r3, #10
 8002b86:	4013      	ands	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_RCC_OscConfig+0x5a8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d03c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0e6      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01b      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba2:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	0249      	lsls	r1, r1, #9
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb06 	bl	80021bc <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb6:	f7ff fb01 	bl	80021bc <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0cd      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bc8:	4b45      	ldr	r3, [pc, #276]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x552>
 8002bd4:	e01b      	b.n	8002c0e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bd6:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002bdc:	4943      	ldr	r1, [pc, #268]	; (8002cec <HAL_RCC_OscConfig+0x688>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7ff faeb 	bl	80021bc <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bec:	f7ff fae6 	bl	80021bc <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0b2      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bfe:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4013      	ands	r3, r2
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x588>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c0c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5b4>
 8002c16:	e0a4      	b.n	8002d62 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	220c      	movs	r2, #12
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d100      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5c2>
 8002c24:	e078      	b.n	8002d18 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d14c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c34:	492e      	ldr	r1, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x68c>)
 8002c36:	400a      	ands	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fabf 	bl	80021bc <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff faba 	bl	80021bc <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e086      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	049b      	lsls	r3, r3, #18
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	220f      	movs	r2, #15
 8002c68:	4393      	bics	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_RCC_OscConfig+0x690>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	0449      	lsls	r1, r1, #17
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fa8d 	bl	80021bc <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7ff fa88 	bl	80021bc <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e054      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	049b      	lsls	r3, r3, #18
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x644>
 8002cc6:	e04c      	b.n	8002d62 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <HAL_RCC_OscConfig+0x68c>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff fa72 	bl	80021bc <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x6a6>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	00001388 	.word	0x00001388
 8002ce8:	efffffff 	.word	0xefffffff
 8002cec:	fffeffff 	.word	0xfffeffff
 8002cf0:	feffffff 	.word	0xfeffffff
 8002cf4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7ff fa60 	bl	80021bc <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e02c      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_RCC_OscConfig+0x708>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	049b      	lsls	r3, r3, #18
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x694>
 8002d16:	e024      	b.n	8002d62 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01f      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x708>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x708>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	23c0      	movs	r3, #192	; 0xc0
 8002d34:	025b      	lsls	r3, r3, #9
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d10e      	bne.n	8002d5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	220f      	movs	r2, #15
 8002d44:	401a      	ands	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	23f0      	movs	r3, #240	; 0xf0
 8002d52:	039b      	lsls	r3, r3, #14
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b008      	add	sp, #32
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0bf      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d911      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	4393      	bics	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0a6      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d006      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002dca:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002dd0:	21e0      	movs	r1, #224	; 0xe0
 8002dd2:	00c9      	lsls	r1, r1, #3
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	22f0      	movs	r2, #240	; 0xf0
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d04c      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	4013      	ands	r3, r2
 8002e08:	d120      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07a      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	049b      	lsls	r3, r3, #18
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d114      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06e      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4013      	ands	r3, r2
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e062      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e05b      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4c:	4b30      	ldr	r3, [pc, #192]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	4393      	bics	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e60:	f7ff f9ac 	bl	80021bc <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7ff f9a7 	bl	80021bc <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <HAL_RCC_ClockConfig+0x1a4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e042      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	220c      	movs	r2, #12
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1ec      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d211      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4393      	bics	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_ClockConfig+0x19c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e020      	b.n	8002f04 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_RCC_ClockConfig+0x1a8>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ee0:	f000 f820 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee4:	0001      	movs	r1, r0
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x1a0>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	220f      	movs	r2, #15
 8002eee:	4013      	ands	r3, r2
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_RCC_ClockConfig+0x1ac>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	40da      	lsrs	r2, r3
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1b0>)
 8002efa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff f917 	bl	8002130 <HAL_InitTick>
  
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	00001388 	.word	0x00001388
 8002f18:	fffff8ff 	.word	0xfffff8ff
 8002f1c:	08004d94 	.word	0x08004d94
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	220c      	movs	r2, #12
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d046      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xb8>
 8002f4e:	d848      	bhi.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d002      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x36>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d003      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x3c>
 8002f58:	e043      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f5a:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f5c:	613b      	str	r3, [r7, #16]
      break;
 8002f5e:	e043      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	0c9b      	lsrs	r3, r3, #18
 8002f64:	220f      	movs	r2, #15
 8002f66:	4013      	ands	r3, r2
 8002f68:	4a24      	ldr	r2, [pc, #144]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xd8>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	220f      	movs	r2, #15
 8002f74:	4013      	ands	r3, r2
 8002f76:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	23c0      	movs	r3, #192	; 0xc0
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	401a      	ands	r2, r3
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	481a      	ldr	r0, [pc, #104]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f90:	f7fd f8ca 	bl	8000128 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	001a      	movs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4353      	muls	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e01a      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	23c0      	movs	r3, #192	; 0xc0
 8002fa4:	025b      	lsls	r3, r3, #9
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	23c0      	movs	r3, #192	; 0xc0
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d109      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002fb4:	f7fd f8b8 	bl	8000128 <__udivsi3>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	001a      	movs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4353      	muls	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fc8:	f7fd f8ae 	bl	8000128 <__udivsi3>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	001a      	movs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4353      	muls	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	613b      	str	r3, [r7, #16]
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002fde:	613b      	str	r3, [r7, #16]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002fe4:	613b      	str	r3, [r7, #16]
      break;
 8002fe6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fe8:	693b      	ldr	r3, [r7, #16]
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b006      	add	sp, #24
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	08004dac 	.word	0x08004dac
 8003000:	08004dbc 	.word	0x08004dbc
 8003004:	02dc6c00 	.word	0x02dc6c00

08003008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_RCC_GetHCLKFreq+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	20000000 	.word	0x20000000

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003020:	f7ff fff2 	bl	8003008 <HAL_RCC_GetHCLKFreq>
 8003024:	0001      	movs	r1, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	40d9      	lsrs	r1, r3
 8003036:	000b      	movs	r3, r1
}    
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40021000 	.word	0x40021000
 8003044:	08004da4 	.word	0x08004da4

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	025b      	lsls	r3, r3, #9
 8003060:	4013      	ands	r3, r2
 8003062:	d100      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003064:	e08e      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003066:	2017      	movs	r0, #23
 8003068:	183b      	adds	r3, r7, r0
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b6e      	ldr	r3, [pc, #440]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	4013      	ands	r3, r2
 8003078:	d110      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	4b6a      	ldr	r3, [pc, #424]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0549      	lsls	r1, r1, #21
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	055b      	lsls	r3, r3, #21
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	183b      	adds	r3, r7, r0
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d11a      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	0049      	lsls	r1, r1, #1
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7ff f881 	bl	80021bc <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	e008      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7ff f87c 	bl	80021bc <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0a6      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	23c0      	movs	r3, #192	; 0xc0
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d034      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	23c0      	movs	r3, #192	; 0xc0
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d02c      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a4a      	ldr	r2, [pc, #296]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0249      	lsls	r1, r1, #9
 8003114:	430a      	orrs	r2, r1
 8003116:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	4b42      	ldr	r3, [pc, #264]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800311e:	4945      	ldr	r1, [pc, #276]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003120:	400a      	ands	r2, r1
 8003122:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003124:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7ff f843 	bl	80021bc <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313a:	e009      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7ff f83e 	bl	80021bc <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e067      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	4b35      	ldr	r3, [pc, #212]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d0f0      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315a:	4b33      	ldr	r3, [pc, #204]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a34      	ldr	r2, [pc, #208]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800316a:	430a      	orrs	r2, r1
 800316c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800316e:	2317      	movs	r3, #23
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800317e:	492f      	ldr	r1, [pc, #188]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003180:	400a      	ands	r2, r1
 8003182:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	d009      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	2203      	movs	r2, #3
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	4a23      	ldr	r2, [pc, #140]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031bc:	430a      	orrs	r2, r1
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	02db      	lsls	r3, r3, #11
 80031c8:	4013      	ands	r3, r2
 80031ca:	d009      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	0019      	movs	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031dc:	430a      	orrs	r2, r1
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2220      	movs	r2, #32
 80031e6:	4013      	ands	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	2210      	movs	r2, #16
 80031f0:	4393      	bics	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4013      	ands	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	4393      	bics	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800321a:	430a      	orrs	r2, r1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b006      	add	sp, #24
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	fffffcff 	.word	0xfffffcff
 8003234:	fffeffff 	.word	0xfffeffff
 8003238:	00001388 	.word	0x00001388
 800323c:	efffffff 	.word	0xefffffff
 8003240:	fffcffff 	.word	0xfffcffff
 8003244:	fff3ffff 	.word	0xfff3ffff

08003248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0a8      	b.n	80033ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	2382      	movs	r3, #130	; 0x82
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	429a      	cmp	r2, r3
 800326c:	d009      	beq.n	8003282 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
 8003274:	e005      	b.n	8003282 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	225d      	movs	r2, #93	; 0x5d
 800328c:	5c9b      	ldrb	r3, [r3, r2]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	225c      	movs	r2, #92	; 0x5c
 8003298:	2100      	movs	r1, #0
 800329a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7fe fdf6 	bl	8001e90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	225d      	movs	r2, #93	; 0x5d
 80032a8:	2102      	movs	r1, #2
 80032aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2140      	movs	r1, #64	; 0x40
 80032b8:	438a      	bics	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	23e0      	movs	r3, #224	; 0xe0
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d902      	bls.n	80032ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	015b      	lsls	r3, r3, #5
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	23f0      	movs	r3, #240	; 0xf0
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	429a      	cmp	r2, r3
 80032de:	d008      	beq.n	80032f2 <HAL_SPI_Init+0xaa>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	23e0      	movs	r3, #224	; 0xe0
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	2382      	movs	r3, #130	; 0x82
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	2384      	movs	r3, #132	; 0x84
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	400b      	ands	r3, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2102      	movs	r1, #2
 800330e:	400b      	ands	r3, r1
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2101      	movs	r1, #1
 8003318:	400b      	ands	r3, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6999      	ldr	r1, [r3, #24]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	400b      	ands	r3, r1
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2138      	movs	r1, #56	; 0x38
 800332e:	400b      	ands	r3, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	400b      	ands	r3, r1
 800333a:	431a      	orrs	r2, r3
 800333c:	0011      	movs	r1, r2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	401a      	ands	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	2204      	movs	r2, #4
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2110      	movs	r1, #16
 8003360:	400b      	ands	r3, r1
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003368:	2108      	movs	r1, #8
 800336a:	400b      	ands	r3, r1
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	23f0      	movs	r3, #240	; 0xf0
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	0011      	movs	r1, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	015b      	lsls	r3, r3, #5
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4907      	ldr	r1, [pc, #28]	; (80033b4 <HAL_SPI_Init+0x16c>)
 8003398:	400a      	ands	r2, r1
 800339a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	225d      	movs	r2, #93	; 0x5d
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b004      	add	sp, #16
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	fffff7ff 	.word	0xfffff7ff

080033b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	1dbb      	adds	r3, r7, #6
 80033c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	225c      	movs	r2, #92	; 0x5c
 80033d4:	5c9b      	ldrb	r3, [r3, r2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_SPI_Transmit+0x26>
 80033da:	2302      	movs	r3, #2
 80033dc:	e147      	b.n	800366e <HAL_SPI_Transmit+0x2b6>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	225c      	movs	r2, #92	; 0x5c
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e6:	f7fe fee9 	bl	80021bc <HAL_GetTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033ee:	2316      	movs	r3, #22
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	1dba      	adds	r2, r7, #6
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	225d      	movs	r2, #93	; 0x5d
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d004      	beq.n	800340e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003404:	231f      	movs	r3, #31
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
    goto error;
 800340c:	e128      	b.n	8003660 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_SPI_Transmit+0x64>
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800341c:	231f      	movs	r3, #31
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
    goto error;
 8003424:	e11c      	b.n	8003660 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	225d      	movs	r2, #93	; 0x5d
 800342a:	2103      	movs	r1, #3
 800342c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1dba      	adds	r2, r7, #6
 800343e:	8812      	ldrh	r2, [r2, #0]
 8003440:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1dba      	adds	r2, r7, #6
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2244      	movs	r2, #68	; 0x44
 8003454:	2100      	movs	r1, #0
 8003456:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2246      	movs	r2, #70	; 0x46
 800345c:	2100      	movs	r1, #0
 800345e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	429a      	cmp	r2, r3
 8003476:	d110      	bne.n	800349a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	438a      	bics	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	01c9      	lsls	r1, r1, #7
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d007      	beq.n	80034b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	23e0      	movs	r3, #224	; 0xe0
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d952      	bls.n	800356a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_SPI_Transmit+0x11e>
 80034cc:	2316      	movs	r3, #22
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d143      	bne.n	800355e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	1c9a      	adds	r2, r3, #2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034fa:	e030      	b.n	800355e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d112      	bne.n	8003530 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800352e:	e016      	b.n	800355e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003530:	f7fe fe44 	bl	80021bc <HAL_GetTick>
 8003534:	0002      	movs	r2, r0
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d802      	bhi.n	8003546 <HAL_SPI_Transmit+0x18e>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_SPI_Transmit+0x194>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d108      	bne.n	800355e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800354c:	231f      	movs	r3, #31
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2203      	movs	r2, #3
 8003552:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	225d      	movs	r2, #93	; 0x5d
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]
          goto error;
 800355c:	e080      	b.n	8003660 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1c9      	bne.n	80034fc <HAL_SPI_Transmit+0x144>
 8003568:	e053      	b.n	8003612 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_SPI_Transmit+0x1c4>
 8003572:	2316      	movs	r3, #22
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d145      	bne.n	8003608 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80035a2:	e031      	b.n	8003608 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035d8:	e016      	b.n	8003608 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035da:	f7fe fdef 	bl	80021bc <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d802      	bhi.n	80035f0 <HAL_SPI_Transmit+0x238>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Transmit+0x23e>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80035f6:	231f      	movs	r3, #31
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2203      	movs	r2, #3
 80035fc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	225d      	movs	r2, #93	; 0x5d
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
          goto error;
 8003606:	e02b      	b.n	8003660 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1c8      	bne.n	80035a4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f95d 	bl	80038d8 <SPI_EndRxTxTransaction>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d002      	beq.n	8003628 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800364e:	231f      	movs	r3, #31
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	e003      	b.n	8003660 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	225d      	movs	r2, #93	; 0x5d
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	225c      	movs	r2, #92	; 0x5c
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003668:	231f      	movs	r3, #31
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	781b      	ldrb	r3, [r3, #0]
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b008      	add	sp, #32
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003688:	f7fe fd98 	bl	80021bc <HAL_GetTick>
 800368c:	0002      	movs	r2, r0
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003698:	f7fe fd90 	bl	80021bc <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a0:	4b3a      	ldr	r3, [pc, #232]	; (800378c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	0d1b      	lsrs	r3, r3, #20
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	4353      	muls	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ae:	e058      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	d055      	beq.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b6:	f7fe fd81 	bl	80021bc <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d902      	bls.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x54>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d142      	bne.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	21e0      	movs	r1, #224	; 0xe0
 80036d8:	438a      	bics	r2, r1
 80036da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2382      	movs	r3, #130	; 0x82
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d113      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x98>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d005      	beq.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d107      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2140      	movs	r1, #64	; 0x40
 800370c:	438a      	bics	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	019b      	lsls	r3, r3, #6
 8003718:	429a      	cmp	r2, r3
 800371a:	d110      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	491a      	ldr	r1, [pc, #104]	; (8003790 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0189      	lsls	r1, r1, #6
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	225d      	movs	r2, #93	; 0x5d
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	225c      	movs	r2, #92	; 0x5c
 800374a:	2100      	movs	r1, #0
 800374c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e017      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3b01      	subs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	425a      	negs	r2, r3
 8003772:	4153      	adcs	r3, r2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	001a      	movs	r2, r3
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d197      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b008      	add	sp, #32
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000000 	.word	0x20000000
 8003790:	ffffdfff 	.word	0xffffdfff

08003794 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037a2:	2317      	movs	r3, #23
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037aa:	f7fe fd07 	bl	80021bc <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037ba:	f7fe fcff 	bl	80021bc <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	0013      	movs	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	00da      	lsls	r2, r3, #3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	0d1b      	lsrs	r3, r3, #20
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	4353      	muls	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037e0:	e068      	b.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	23c0      	movs	r3, #192	; 0xc0
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d10a      	bne.n	8003802 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	2117      	movs	r1, #23
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	d055      	beq.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003808:	f7fe fcd8 	bl	80021bc <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	429a      	cmp	r2, r3
 8003816:	d902      	bls.n	800381e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d142      	bne.n	80038a4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	21e0      	movs	r1, #224	; 0xe0
 800382a:	438a      	bics	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	2382      	movs	r3, #130	; 0x82
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	429a      	cmp	r2, r3
 8003838:	d113      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0xce>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	429a      	cmp	r2, r3
 8003844:	d005      	beq.n	8003852 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	429a      	cmp	r2, r3
 8003850:	d107      	bne.n	8003862 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2140      	movs	r1, #64	; 0x40
 800385e:	438a      	bics	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	429a      	cmp	r2, r3
 800386c:	d110      	bne.n	8003890 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4916      	ldr	r1, [pc, #88]	; (80038d4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800387a:	400a      	ands	r2, r1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	0189      	lsls	r1, r1, #6
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	225d      	movs	r2, #93	; 0x5d
 8003894:	2101      	movs	r1, #1
 8003896:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	225c      	movs	r2, #92	; 0x5c
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e010      	b.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d18e      	bne.n	80037e2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b00a      	add	sp, #40	; 0x28
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000000 	.word	0x20000000
 80038d4:	ffffdfff 	.word	0xffffdfff

080038d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	23c0      	movs	r3, #192	; 0xc0
 80038e8:	0159      	lsls	r1, r3, #5
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	0013      	movs	r3, r2
 80038f2:	2200      	movs	r2, #0
 80038f4:	f7ff ff4e 	bl	8003794 <SPI_WaitFifoStateUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d007      	beq.n	800390c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	2220      	movs	r2, #32
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e027      	b.n	800395c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	0013      	movs	r3, r2
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	f7ff fead 	bl	8003678 <SPI_WaitFlagStateUntilTimeout>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d007      	beq.n	8003932 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	2220      	movs	r2, #32
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e014      	b.n	800395c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	00d9      	lsls	r1, r3, #3
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	0013      	movs	r3, r2
 8003940:	2200      	movs	r2, #0
 8003942:	f7ff ff27 	bl	8003794 <SPI_WaitFifoStateUntilTimeout>
 8003946:	1e03      	subs	r3, r0, #0
 8003948:	d007      	beq.n	800395a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	2220      	movs	r2, #32
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e000      	b.n	800395c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e044      	b.n	8003a00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2278      	movs	r2, #120	; 0x78
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f7fe faf3 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2224      	movs	r2, #36	; 0x24
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 f8d0 	bl	8003b4c <UART_SetConfig>
 80039ac:	0003      	movs	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e024      	b.n	8003a00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 faab 	bl	8003f1c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	490d      	ldr	r1, [pc, #52]	; (8003a08 <HAL_UART_Init+0xa4>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	212a      	movs	r1, #42	; 0x2a
 80039e2:	438a      	bics	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2101      	movs	r1, #1
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fb43 	bl	8004084 <UART_CheckIdleState>
 80039fe:	0003      	movs	r3, r0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	ffffb7ff 	.word	0xffffb7ff

08003a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	1dbb      	adds	r3, r7, #6
 8003a1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d000      	beq.n	8003a26 <HAL_UART_Transmit+0x1a>
 8003a24:	e08d      	b.n	8003b42 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_UART_Transmit+0x28>
 8003a2c:	1dbb      	adds	r3, r7, #6
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e085      	b.n	8003b44 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d109      	bne.n	8003a58 <HAL_UART_Transmit+0x4c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e075      	b.n	8003b44 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2284      	movs	r2, #132	; 0x84
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2221      	movs	r2, #33	; 0x21
 8003a64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a66:	f7fe fba9 	bl	80021bc <HAL_GetTick>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1dba      	adds	r2, r7, #6
 8003a72:	2150      	movs	r1, #80	; 0x50
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1dba      	adds	r2, r7, #6
 8003a7c:	2152      	movs	r1, #82	; 0x52
 8003a7e:	8812      	ldrh	r2, [r2, #0]
 8003a80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	015b      	lsls	r3, r3, #5
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Transmit+0x94>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003aa8:	e030      	b.n	8003b0c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	0013      	movs	r3, r2
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	f000 fb8c 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d004      	beq.n	8003aca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e03c      	b.n	8003b44 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	881a      	ldrh	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	05d2      	lsls	r2, r2, #23
 8003ada:	0dd2      	lsrs	r2, r2, #23
 8003adc:	b292      	uxth	r2, r2
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e008      	b.n	8003afa <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b292      	uxth	r2, r2
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2252      	movs	r2, #82	; 0x52
 8003afe:	5a9b      	ldrh	r3, [r3, r2]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b299      	uxth	r1, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2252      	movs	r2, #82	; 0x52
 8003b0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2252      	movs	r2, #82	; 0x52
 8003b10:	5a9b      	ldrh	r3, [r3, r2]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1c8      	bne.n	8003aaa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	0013      	movs	r3, r2
 8003b22:	2200      	movs	r2, #0
 8003b24:	2140      	movs	r1, #64	; 0x40
 8003b26:	f000 fb55 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	1e03      	subs	r3, r0, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e005      	b.n	8003b44 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b008      	add	sp, #32
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b54:	231e      	movs	r3, #30
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4abe      	ldr	r2, [pc, #760]	; (8003e74 <UART_SetConfig+0x328>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4ab9      	ldr	r2, [pc, #740]	; (8003e78 <UART_SetConfig+0x32c>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4ab0      	ldr	r2, [pc, #704]	; (8003e7c <UART_SetConfig+0x330>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4aac      	ldr	r2, [pc, #688]	; (8003e80 <UART_SetConfig+0x334>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d127      	bne.n	8003c22 <UART_SetConfig+0xd6>
 8003bd2:	4bac      	ldr	r3, [pc, #688]	; (8003e84 <UART_SetConfig+0x338>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d00d      	beq.n	8003bfa <UART_SetConfig+0xae>
 8003bde:	d81b      	bhi.n	8003c18 <UART_SetConfig+0xcc>
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d014      	beq.n	8003c0e <UART_SetConfig+0xc2>
 8003be4:	d818      	bhi.n	8003c18 <UART_SetConfig+0xcc>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <UART_SetConfig+0xa4>
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d00a      	beq.n	8003c04 <UART_SetConfig+0xb8>
 8003bee:	e013      	b.n	8003c18 <UART_SetConfig+0xcc>
 8003bf0:	231f      	movs	r3, #31
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e0bd      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003bfa:	231f      	movs	r3, #31
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e0b8      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c04:	231f      	movs	r3, #31
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e0b3      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c0e:	231f      	movs	r3, #31
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2208      	movs	r2, #8
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e0ae      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c18:	231f      	movs	r3, #31
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e0a9      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a98      	ldr	r2, [pc, #608]	; (8003e88 <UART_SetConfig+0x33c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d134      	bne.n	8003c96 <UART_SetConfig+0x14a>
 8003c2c:	4b95      	ldr	r3, [pc, #596]	; (8003e84 <UART_SetConfig+0x338>)
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	23c0      	movs	r3, #192	; 0xc0
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	4013      	ands	r3, r2
 8003c36:	22c0      	movs	r2, #192	; 0xc0
 8003c38:	0292      	lsls	r2, r2, #10
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d017      	beq.n	8003c6e <UART_SetConfig+0x122>
 8003c3e:	22c0      	movs	r2, #192	; 0xc0
 8003c40:	0292      	lsls	r2, r2, #10
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d822      	bhi.n	8003c8c <UART_SetConfig+0x140>
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	0292      	lsls	r2, r2, #10
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <UART_SetConfig+0x136>
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	0292      	lsls	r2, r2, #10
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d81a      	bhi.n	8003c8c <UART_SetConfig+0x140>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <UART_SetConfig+0x118>
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	0252      	lsls	r2, r2, #9
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00a      	beq.n	8003c78 <UART_SetConfig+0x12c>
 8003c62:	e013      	b.n	8003c8c <UART_SetConfig+0x140>
 8003c64:	231f      	movs	r3, #31
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e083      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2202      	movs	r2, #2
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e07e      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c78:	231f      	movs	r3, #31
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e079      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c82:	231f      	movs	r3, #31
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e074      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c8c:	231f      	movs	r3, #31
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2210      	movs	r2, #16
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	e06f      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7c      	ldr	r2, [pc, #496]	; (8003e8c <UART_SetConfig+0x340>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d134      	bne.n	8003d0a <UART_SetConfig+0x1be>
 8003ca0:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <UART_SetConfig+0x338>)
 8003ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca4:	23c0      	movs	r3, #192	; 0xc0
 8003ca6:	031b      	lsls	r3, r3, #12
 8003ca8:	4013      	ands	r3, r2
 8003caa:	22c0      	movs	r2, #192	; 0xc0
 8003cac:	0312      	lsls	r2, r2, #12
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d017      	beq.n	8003ce2 <UART_SetConfig+0x196>
 8003cb2:	22c0      	movs	r2, #192	; 0xc0
 8003cb4:	0312      	lsls	r2, r2, #12
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d822      	bhi.n	8003d00 <UART_SetConfig+0x1b4>
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	0312      	lsls	r2, r2, #12
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <UART_SetConfig+0x1aa>
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	0312      	lsls	r2, r2, #12
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d81a      	bhi.n	8003d00 <UART_SetConfig+0x1b4>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <UART_SetConfig+0x18c>
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	02d2      	lsls	r2, r2, #11
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00a      	beq.n	8003cec <UART_SetConfig+0x1a0>
 8003cd6:	e013      	b.n	8003d00 <UART_SetConfig+0x1b4>
 8003cd8:	231f      	movs	r3, #31
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e049      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e044      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003cec:	231f      	movs	r3, #31
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e03f      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003cf6:	231f      	movs	r3, #31
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e03a      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d00:	231f      	movs	r3, #31
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2210      	movs	r2, #16
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e035      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <UART_SetConfig+0x344>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d104      	bne.n	8003d1e <UART_SetConfig+0x1d2>
 8003d14:	231f      	movs	r3, #31
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e02b      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <UART_SetConfig+0x348>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d104      	bne.n	8003d32 <UART_SetConfig+0x1e6>
 8003d28:	231f      	movs	r3, #31
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	e021      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <UART_SetConfig+0x34c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d104      	bne.n	8003d46 <UART_SetConfig+0x1fa>
 8003d3c:	231f      	movs	r3, #31
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e017      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <UART_SetConfig+0x350>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d104      	bne.n	8003d5a <UART_SetConfig+0x20e>
 8003d50:	231f      	movs	r3, #31
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e00d      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a50      	ldr	r2, [pc, #320]	; (8003ea0 <UART_SetConfig+0x354>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d104      	bne.n	8003d6e <UART_SetConfig+0x222>
 8003d64:	231f      	movs	r3, #31
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e003      	b.n	8003d76 <UART_SetConfig+0x22a>
 8003d6e:	231f      	movs	r3, #31
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2210      	movs	r2, #16
 8003d74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d15c      	bne.n	8003e3c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003d82:	231f      	movs	r3, #31
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d015      	beq.n	8003db8 <UART_SetConfig+0x26c>
 8003d8c:	dc18      	bgt.n	8003dc0 <UART_SetConfig+0x274>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d00d      	beq.n	8003dae <UART_SetConfig+0x262>
 8003d92:	dc15      	bgt.n	8003dc0 <UART_SetConfig+0x274>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <UART_SetConfig+0x252>
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d005      	beq.n	8003da8 <UART_SetConfig+0x25c>
 8003d9c:	e010      	b.n	8003dc0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f7ff f93d 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8003da2:	0003      	movs	r3, r0
 8003da4:	61bb      	str	r3, [r7, #24]
        break;
 8003da6:	e012      	b.n	8003dce <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <UART_SetConfig+0x358>)
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e00f      	b.n	8003dce <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dae:	f7ff f8b9 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8003db2:	0003      	movs	r3, r0
 8003db4:	61bb      	str	r3, [r7, #24]
        break;
 8003db6:	e00a      	b.n	8003dce <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	61bb      	str	r3, [r7, #24]
        break;
 8003dbe:	e006      	b.n	8003dce <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dc4:	231e      	movs	r3, #30
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
        break;
 8003dcc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d100      	bne.n	8003dd6 <UART_SetConfig+0x28a>
 8003dd4:	e095      	b.n	8003f02 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	005a      	lsls	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	18d2      	adds	r2, r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0019      	movs	r1, r3
 8003de8:	0010      	movs	r0, r2
 8003dea:	f7fc f99d 	bl	8000128 <__udivsi3>
 8003dee:	0003      	movs	r3, r0
 8003df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d91c      	bls.n	8003e32 <UART_SetConfig+0x2e6>
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d217      	bcs.n	8003e32 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	200e      	movs	r0, #14
 8003e08:	183b      	adds	r3, r7, r0
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2207      	movs	r2, #7
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b299      	uxth	r1, r3
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	183a      	adds	r2, r7, r0
 8003e20:	8812      	ldrh	r2, [r2, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	183a      	adds	r2, r7, r0
 8003e2c:	8812      	ldrh	r2, [r2, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e067      	b.n	8003f02 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e32:	231e      	movs	r3, #30
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e062      	b.n	8003f02 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e3c:	231f      	movs	r3, #31
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d030      	beq.n	8003ea8 <UART_SetConfig+0x35c>
 8003e46:	dc33      	bgt.n	8003eb0 <UART_SetConfig+0x364>
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d00d      	beq.n	8003e68 <UART_SetConfig+0x31c>
 8003e4c:	dc30      	bgt.n	8003eb0 <UART_SetConfig+0x364>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <UART_SetConfig+0x30c>
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d005      	beq.n	8003e62 <UART_SetConfig+0x316>
 8003e56:	e02b      	b.n	8003eb0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7ff f8e0 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	61bb      	str	r3, [r7, #24]
        break;
 8003e60:	e02d      	b.n	8003ebe <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <UART_SetConfig+0x358>)
 8003e64:	61bb      	str	r3, [r7, #24]
        break;
 8003e66:	e02a      	b.n	8003ebe <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e68:	f7ff f85c 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	61bb      	str	r3, [r7, #24]
        break;
 8003e70:	e025      	b.n	8003ebe <UART_SetConfig+0x372>
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	efff69f3 	.word	0xefff69f3
 8003e78:	ffffcfff 	.word	0xffffcfff
 8003e7c:	fffff4ff 	.word	0xfffff4ff
 8003e80:	40013800 	.word	0x40013800
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40004400 	.word	0x40004400
 8003e8c:	40004800 	.word	0x40004800
 8003e90:	40004c00 	.word	0x40004c00
 8003e94:	40005000 	.word	0x40005000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	40011800 	.word	0x40011800
 8003ea0:	40011c00 	.word	0x40011c00
 8003ea4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	021b      	lsls	r3, r3, #8
 8003eac:	61bb      	str	r3, [r7, #24]
        break;
 8003eae:	e006      	b.n	8003ebe <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eb4:	231e      	movs	r3, #30
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
        break;
 8003ebc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01e      	beq.n	8003f02 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	085a      	lsrs	r2, r3, #1
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	18d2      	adds	r2, r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	0010      	movs	r0, r2
 8003ed6:	f7fc f927 	bl	8000128 <__udivsi3>
 8003eda:	0003      	movs	r3, r0
 8003edc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d90a      	bls.n	8003efa <UART_SetConfig+0x3ae>
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	025b      	lsls	r3, r3, #9
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d205      	bcs.n	8003efa <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	e003      	b.n	8003f02 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003efa:	231e      	movs	r3, #30
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f0e:	231e      	movs	r3, #30
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	781b      	ldrb	r3, [r3, #0]
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b008      	add	sp, #32
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <UART_AdvFeatureConfig+0x144>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a43      	ldr	r2, [pc, #268]	; (8004064 <UART_AdvFeatureConfig+0x148>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a3b      	ldr	r2, [pc, #236]	; (8004068 <UART_AdvFeatureConfig+0x14c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2208      	movs	r2, #8
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <UART_AdvFeatureConfig+0x150>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <UART_AdvFeatureConfig+0x154>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4a25      	ldr	r2, [pc, #148]	; (8004074 <UART_AdvFeatureConfig+0x158>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <UART_AdvFeatureConfig+0x15c>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	035b      	lsls	r3, r3, #13
 800401a:	429a      	cmp	r2, r3
 800401c:	d10b      	bne.n	8004036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <UART_AdvFeatureConfig+0x160>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	4013      	ands	r3, r2
 800403e:	d00b      	beq.n	8004058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <UART_AdvFeatureConfig+0x164>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}
 8004060:	fffdffff 	.word	0xfffdffff
 8004064:	fffeffff 	.word	0xfffeffff
 8004068:	fffbffff 	.word	0xfffbffff
 800406c:	ffff7fff 	.word	0xffff7fff
 8004070:	ffffefff 	.word	0xffffefff
 8004074:	ffffdfff 	.word	0xffffdfff
 8004078:	ffefffff 	.word	0xffefffff
 800407c:	ff9fffff 	.word	0xff9fffff
 8004080:	fff7ffff 	.word	0xfff7ffff

08004084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b092      	sub	sp, #72	; 0x48
 8004088:	af02      	add	r7, sp, #8
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2284      	movs	r2, #132	; 0x84
 8004090:	2100      	movs	r1, #0
 8004092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004094:	f7fe f892 	bl	80021bc <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2208      	movs	r2, #8
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d12c      	bne.n	8004104 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	2280      	movs	r2, #128	; 0x80
 80040ae:	0391      	lsls	r1, r2, #14
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4a46      	ldr	r2, [pc, #280]	; (80041cc <UART_CheckIdleState+0x148>)
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f000 f88c 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d021      	beq.n	8004104 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ca:	2301      	movs	r3, #1
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	438a      	bics	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2278      	movs	r2, #120	; 0x78
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05f      	b.n	80041c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
 800410e:	2b04      	cmp	r3, #4
 8004110:	d146      	bne.n	80041a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	03d1      	lsls	r1, r2, #15
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <UART_CheckIdleState+0x148>)
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	f000 f858 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d03b      	beq.n	80041a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	60fb      	str	r3, [r7, #12]
  return(result);
 800412e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
 8004132:	2301      	movs	r3, #1
 8004134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4921      	ldr	r1, [pc, #132]	; (80041d0 <UART_CheckIdleState+0x14c>)
 800414a:	400a      	ands	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415a:	f3ef 8310 	mrs	r3, PRIMASK
 800415e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
 8004164:	2301      	movs	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	438a      	bics	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	2120      	movs	r1, #32
 8004192:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2278      	movs	r2, #120	; 0x78
 8004198:	2100      	movs	r1, #0
 800419a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e011      	b.n	80041c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	2120      	movs	r1, #32
 80041ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2278      	movs	r2, #120	; 0x78
 80041be:	2100      	movs	r1, #0
 80041c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b010      	add	sp, #64	; 0x40
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	01ffffff 	.word	0x01ffffff
 80041d0:	fffffedf 	.word	0xfffffedf

080041d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	e04b      	b.n	800427e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3301      	adds	r3, #1
 80041ea:	d048      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fd ffe6 	bl	80021bc <HAL_GetTick>
 80041f0:	0002      	movs	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <UART_WaitOnFlagUntilTimeout+0x2e>
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e04b      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	d035      	beq.n	800427e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	2208      	movs	r2, #8
 800421a:	4013      	ands	r3, r2
 800421c:	2b08      	cmp	r3, #8
 800421e:	d111      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2208      	movs	r2, #8
 8004226:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f83c 	bl	80042a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2284      	movs	r2, #132	; 0x84
 8004234:	2108      	movs	r1, #8
 8004236:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2278      	movs	r2, #120	; 0x78
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e02c      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	401a      	ands	r2, r3
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	429a      	cmp	r2, r3
 8004256:	d112      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f000 f81f 	bl	80042a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2284      	movs	r2, #132	; 0x84
 800426e:	2120      	movs	r1, #32
 8004270:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2278      	movs	r2, #120	; 0x78
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e00f      	b.n	800429e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	425a      	negs	r2, r3
 800428e:	4153      	adcs	r3, r2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	001a      	movs	r2, r3
 8004294:	1dfb      	adds	r3, r7, #7
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d0a4      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b004      	add	sp, #16
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08e      	sub	sp, #56	; 0x38
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b0:	f3ef 8310 	mrs	r3, PRIMASK
 80042b4:	617b      	str	r3, [r7, #20]
  return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4926      	ldr	r1, [pc, #152]	; (800436c <UART_EndRxTransfer+0xc4>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e2:	f3ef 8310 	mrs	r3, PRIMASK
 80042e6:	623b      	str	r3, [r7, #32]
  return(result);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
 80042ec:	2301      	movs	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2101      	movs	r1, #1
 8004304:	438a      	bics	r2, r1
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	2b01      	cmp	r3, #1
 800431a:	d118      	bne.n	800434e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431c:	f3ef 8310 	mrs	r3, PRIMASK
 8004320:	60bb      	str	r3, [r7, #8]
  return(result);
 8004322:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004326:	2301      	movs	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2110      	movs	r1, #16
 800433e:	438a      	bics	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	2120      	movs	r1, #32
 8004354:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b00e      	add	sp, #56	; 0x38
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	fffffedf 	.word	0xfffffedf

08004370 <__errno>:
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <__errno+0x8>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4770      	bx	lr
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	2000000c 	.word	0x2000000c

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	2600      	movs	r6, #0
 8004380:	4d0c      	ldr	r5, [pc, #48]	; (80043b4 <__libc_init_array+0x38>)
 8004382:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004384:	1b64      	subs	r4, r4, r5
 8004386:	10a4      	asrs	r4, r4, #2
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	2600      	movs	r6, #0
 800438e:	f000 fc8b 	bl	8004ca8 <_init>
 8004392:	4d0a      	ldr	r5, [pc, #40]	; (80043bc <__libc_init_array+0x40>)
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <__libc_init_array+0x44>)
 8004396:	1b64      	subs	r4, r4, r5
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	00b3      	lsls	r3, r6, #2
 80043a2:	58eb      	ldr	r3, [r5, r3]
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	00b3      	lsls	r3, r6, #2
 80043ac:	58eb      	ldr	r3, [r5, r3]
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	08004e00 	.word	0x08004e00
 80043b8:	08004e00 	.word	0x08004e00
 80043bc:	08004e00 	.word	0x08004e00
 80043c0:	08004e04 	.word	0x08004e04

080043c4 <memset>:
 80043c4:	0003      	movs	r3, r0
 80043c6:	1882      	adds	r2, r0, r2
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	7019      	strb	r1, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <siprintf>:
 80043d4:	b40e      	push	{r1, r2, r3}
 80043d6:	b500      	push	{lr}
 80043d8:	490b      	ldr	r1, [pc, #44]	; (8004408 <siprintf+0x34>)
 80043da:	b09c      	sub	sp, #112	; 0x70
 80043dc:	ab1d      	add	r3, sp, #116	; 0x74
 80043de:	9002      	str	r0, [sp, #8]
 80043e0:	9006      	str	r0, [sp, #24]
 80043e2:	9107      	str	r1, [sp, #28]
 80043e4:	9104      	str	r1, [sp, #16]
 80043e6:	4809      	ldr	r0, [pc, #36]	; (800440c <siprintf+0x38>)
 80043e8:	4909      	ldr	r1, [pc, #36]	; (8004410 <siprintf+0x3c>)
 80043ea:	cb04      	ldmia	r3!, {r2}
 80043ec:	9105      	str	r1, [sp, #20]
 80043ee:	6800      	ldr	r0, [r0, #0]
 80043f0:	a902      	add	r1, sp, #8
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	f000 f870 	bl	80044d8 <_svfiprintf_r>
 80043f8:	2300      	movs	r3, #0
 80043fa:	9a02      	ldr	r2, [sp, #8]
 80043fc:	7013      	strb	r3, [r2, #0]
 80043fe:	b01c      	add	sp, #112	; 0x70
 8004400:	bc08      	pop	{r3}
 8004402:	b003      	add	sp, #12
 8004404:	4718      	bx	r3
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	7fffffff 	.word	0x7fffffff
 800440c:	2000000c 	.word	0x2000000c
 8004410:	ffff0208 	.word	0xffff0208

08004414 <__ssputs_r>:
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004416:	688e      	ldr	r6, [r1, #8]
 8004418:	b085      	sub	sp, #20
 800441a:	0007      	movs	r7, r0
 800441c:	000c      	movs	r4, r1
 800441e:	9203      	str	r2, [sp, #12]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	429e      	cmp	r6, r3
 8004424:	d83c      	bhi.n	80044a0 <__ssputs_r+0x8c>
 8004426:	2390      	movs	r3, #144	; 0x90
 8004428:	898a      	ldrh	r2, [r1, #12]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	421a      	tst	r2, r3
 800442e:	d034      	beq.n	800449a <__ssputs_r+0x86>
 8004430:	6909      	ldr	r1, [r1, #16]
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	6960      	ldr	r0, [r4, #20]
 8004436:	1a5b      	subs	r3, r3, r1
 8004438:	9302      	str	r3, [sp, #8]
 800443a:	2303      	movs	r3, #3
 800443c:	4343      	muls	r3, r0
 800443e:	0fdd      	lsrs	r5, r3, #31
 8004440:	18ed      	adds	r5, r5, r3
 8004442:	9b01      	ldr	r3, [sp, #4]
 8004444:	9802      	ldr	r0, [sp, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	181b      	adds	r3, r3, r0
 800444a:	106d      	asrs	r5, r5, #1
 800444c:	42ab      	cmp	r3, r5
 800444e:	d900      	bls.n	8004452 <__ssputs_r+0x3e>
 8004450:	001d      	movs	r5, r3
 8004452:	0553      	lsls	r3, r2, #21
 8004454:	d532      	bpl.n	80044bc <__ssputs_r+0xa8>
 8004456:	0029      	movs	r1, r5
 8004458:	0038      	movs	r0, r7
 800445a:	f000 fb53 	bl	8004b04 <_malloc_r>
 800445e:	1e06      	subs	r6, r0, #0
 8004460:	d109      	bne.n	8004476 <__ssputs_r+0x62>
 8004462:	230c      	movs	r3, #12
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	2001      	movs	r0, #1
 800446a:	89a2      	ldrh	r2, [r4, #12]
 800446c:	4240      	negs	r0, r0
 800446e:	4313      	orrs	r3, r2
 8004470:	81a3      	strh	r3, [r4, #12]
 8004472:	b005      	add	sp, #20
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	9a02      	ldr	r2, [sp, #8]
 8004478:	6921      	ldr	r1, [r4, #16]
 800447a:	f000 faba 	bl	80049f2 <memcpy>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <__ssputs_r+0xc0>)
 8004482:	401a      	ands	r2, r3
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	4313      	orrs	r3, r2
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	6126      	str	r6, [r4, #16]
 800448e:	18f6      	adds	r6, r6, r3
 8004490:	6026      	str	r6, [r4, #0]
 8004492:	6165      	str	r5, [r4, #20]
 8004494:	9e01      	ldr	r6, [sp, #4]
 8004496:	1aed      	subs	r5, r5, r3
 8004498:	60a5      	str	r5, [r4, #8]
 800449a:	9b01      	ldr	r3, [sp, #4]
 800449c:	429e      	cmp	r6, r3
 800449e:	d900      	bls.n	80044a2 <__ssputs_r+0x8e>
 80044a0:	9e01      	ldr	r6, [sp, #4]
 80044a2:	0032      	movs	r2, r6
 80044a4:	9903      	ldr	r1, [sp, #12]
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f000 faac 	bl	8004a04 <memmove>
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	2000      	movs	r0, #0
 80044b0:	1b9b      	subs	r3, r3, r6
 80044b2:	60a3      	str	r3, [r4, #8]
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	199e      	adds	r6, r3, r6
 80044b8:	6026      	str	r6, [r4, #0]
 80044ba:	e7da      	b.n	8004472 <__ssputs_r+0x5e>
 80044bc:	002a      	movs	r2, r5
 80044be:	0038      	movs	r0, r7
 80044c0:	f000 fb96 	bl	8004bf0 <_realloc_r>
 80044c4:	1e06      	subs	r6, r0, #0
 80044c6:	d1e0      	bne.n	800448a <__ssputs_r+0x76>
 80044c8:	0038      	movs	r0, r7
 80044ca:	6921      	ldr	r1, [r4, #16]
 80044cc:	f000 faae 	bl	8004a2c <_free_r>
 80044d0:	e7c7      	b.n	8004462 <__ssputs_r+0x4e>
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	fffffb7f 	.word	0xfffffb7f

080044d8 <_svfiprintf_r>:
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b0a1      	sub	sp, #132	; 0x84
 80044dc:	9003      	str	r0, [sp, #12]
 80044de:	001d      	movs	r5, r3
 80044e0:	898b      	ldrh	r3, [r1, #12]
 80044e2:	000f      	movs	r7, r1
 80044e4:	0016      	movs	r6, r2
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	d511      	bpl.n	800450e <_svfiprintf_r+0x36>
 80044ea:	690b      	ldr	r3, [r1, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10e      	bne.n	800450e <_svfiprintf_r+0x36>
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	f000 fb07 	bl	8004b04 <_malloc_r>
 80044f6:	6038      	str	r0, [r7, #0]
 80044f8:	6138      	str	r0, [r7, #16]
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d105      	bne.n	800450a <_svfiprintf_r+0x32>
 80044fe:	230c      	movs	r3, #12
 8004500:	9a03      	ldr	r2, [sp, #12]
 8004502:	3801      	subs	r0, #1
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	b021      	add	sp, #132	; 0x84
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450a:	2340      	movs	r3, #64	; 0x40
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	2300      	movs	r3, #0
 8004510:	ac08      	add	r4, sp, #32
 8004512:	6163      	str	r3, [r4, #20]
 8004514:	3320      	adds	r3, #32
 8004516:	7663      	strb	r3, [r4, #25]
 8004518:	3310      	adds	r3, #16
 800451a:	76a3      	strb	r3, [r4, #26]
 800451c:	9507      	str	r5, [sp, #28]
 800451e:	0035      	movs	r5, r6
 8004520:	782b      	ldrb	r3, [r5, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <_svfiprintf_r+0x52>
 8004526:	2b25      	cmp	r3, #37	; 0x25
 8004528:	d147      	bne.n	80045ba <_svfiprintf_r+0xe2>
 800452a:	1bab      	subs	r3, r5, r6
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	42b5      	cmp	r5, r6
 8004530:	d00c      	beq.n	800454c <_svfiprintf_r+0x74>
 8004532:	0032      	movs	r2, r6
 8004534:	0039      	movs	r1, r7
 8004536:	9803      	ldr	r0, [sp, #12]
 8004538:	f7ff ff6c 	bl	8004414 <__ssputs_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d100      	bne.n	8004542 <_svfiprintf_r+0x6a>
 8004540:	e0ae      	b.n	80046a0 <_svfiprintf_r+0x1c8>
 8004542:	6962      	ldr	r2, [r4, #20]
 8004544:	9b05      	ldr	r3, [sp, #20]
 8004546:	4694      	mov	ip, r2
 8004548:	4463      	add	r3, ip
 800454a:	6163      	str	r3, [r4, #20]
 800454c:	782b      	ldrb	r3, [r5, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d100      	bne.n	8004554 <_svfiprintf_r+0x7c>
 8004552:	e0a5      	b.n	80046a0 <_svfiprintf_r+0x1c8>
 8004554:	2201      	movs	r2, #1
 8004556:	2300      	movs	r3, #0
 8004558:	4252      	negs	r2, r2
 800455a:	6062      	str	r2, [r4, #4]
 800455c:	a904      	add	r1, sp, #16
 800455e:	3254      	adds	r2, #84	; 0x54
 8004560:	1852      	adds	r2, r2, r1
 8004562:	1c6e      	adds	r6, r5, #1
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	60e3      	str	r3, [r4, #12]
 8004568:	60a3      	str	r3, [r4, #8]
 800456a:	7013      	strb	r3, [r2, #0]
 800456c:	65a3      	str	r3, [r4, #88]	; 0x58
 800456e:	2205      	movs	r2, #5
 8004570:	7831      	ldrb	r1, [r6, #0]
 8004572:	4854      	ldr	r0, [pc, #336]	; (80046c4 <_svfiprintf_r+0x1ec>)
 8004574:	f000 fa32 	bl	80049dc <memchr>
 8004578:	1c75      	adds	r5, r6, #1
 800457a:	2800      	cmp	r0, #0
 800457c:	d11f      	bne.n	80045be <_svfiprintf_r+0xe6>
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	06d3      	lsls	r3, r2, #27
 8004582:	d504      	bpl.n	800458e <_svfiprintf_r+0xb6>
 8004584:	2353      	movs	r3, #83	; 0x53
 8004586:	a904      	add	r1, sp, #16
 8004588:	185b      	adds	r3, r3, r1
 800458a:	2120      	movs	r1, #32
 800458c:	7019      	strb	r1, [r3, #0]
 800458e:	0713      	lsls	r3, r2, #28
 8004590:	d504      	bpl.n	800459c <_svfiprintf_r+0xc4>
 8004592:	2353      	movs	r3, #83	; 0x53
 8004594:	a904      	add	r1, sp, #16
 8004596:	185b      	adds	r3, r3, r1
 8004598:	212b      	movs	r1, #43	; 0x2b
 800459a:	7019      	strb	r1, [r3, #0]
 800459c:	7833      	ldrb	r3, [r6, #0]
 800459e:	2b2a      	cmp	r3, #42	; 0x2a
 80045a0:	d016      	beq.n	80045d0 <_svfiprintf_r+0xf8>
 80045a2:	0035      	movs	r5, r6
 80045a4:	2100      	movs	r1, #0
 80045a6:	200a      	movs	r0, #10
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	782a      	ldrb	r2, [r5, #0]
 80045ac:	1c6e      	adds	r6, r5, #1
 80045ae:	3a30      	subs	r2, #48	; 0x30
 80045b0:	2a09      	cmp	r2, #9
 80045b2:	d94e      	bls.n	8004652 <_svfiprintf_r+0x17a>
 80045b4:	2900      	cmp	r1, #0
 80045b6:	d111      	bne.n	80045dc <_svfiprintf_r+0x104>
 80045b8:	e017      	b.n	80045ea <_svfiprintf_r+0x112>
 80045ba:	3501      	adds	r5, #1
 80045bc:	e7b0      	b.n	8004520 <_svfiprintf_r+0x48>
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <_svfiprintf_r+0x1ec>)
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	1ac0      	subs	r0, r0, r3
 80045c4:	2301      	movs	r3, #1
 80045c6:	4083      	lsls	r3, r0
 80045c8:	4313      	orrs	r3, r2
 80045ca:	002e      	movs	r6, r5
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	e7ce      	b.n	800456e <_svfiprintf_r+0x96>
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9107      	str	r1, [sp, #28]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db01      	blt.n	80045e0 <_svfiprintf_r+0x108>
 80045dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80045de:	e004      	b.n	80045ea <_svfiprintf_r+0x112>
 80045e0:	425b      	negs	r3, r3
 80045e2:	60e3      	str	r3, [r4, #12]
 80045e4:	2302      	movs	r3, #2
 80045e6:	4313      	orrs	r3, r2
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	782b      	ldrb	r3, [r5, #0]
 80045ec:	2b2e      	cmp	r3, #46	; 0x2e
 80045ee:	d10a      	bne.n	8004606 <_svfiprintf_r+0x12e>
 80045f0:	786b      	ldrb	r3, [r5, #1]
 80045f2:	2b2a      	cmp	r3, #42	; 0x2a
 80045f4:	d135      	bne.n	8004662 <_svfiprintf_r+0x18a>
 80045f6:	9b07      	ldr	r3, [sp, #28]
 80045f8:	3502      	adds	r5, #2
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	9207      	str	r2, [sp, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	db2b      	blt.n	800465c <_svfiprintf_r+0x184>
 8004604:	9309      	str	r3, [sp, #36]	; 0x24
 8004606:	4e30      	ldr	r6, [pc, #192]	; (80046c8 <_svfiprintf_r+0x1f0>)
 8004608:	2203      	movs	r2, #3
 800460a:	0030      	movs	r0, r6
 800460c:	7829      	ldrb	r1, [r5, #0]
 800460e:	f000 f9e5 	bl	80049dc <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d006      	beq.n	8004624 <_svfiprintf_r+0x14c>
 8004616:	2340      	movs	r3, #64	; 0x40
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	4083      	lsls	r3, r0
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	3501      	adds	r5, #1
 8004620:	4313      	orrs	r3, r2
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	7829      	ldrb	r1, [r5, #0]
 8004626:	2206      	movs	r2, #6
 8004628:	4828      	ldr	r0, [pc, #160]	; (80046cc <_svfiprintf_r+0x1f4>)
 800462a:	1c6e      	adds	r6, r5, #1
 800462c:	7621      	strb	r1, [r4, #24]
 800462e:	f000 f9d5 	bl	80049dc <memchr>
 8004632:	2800      	cmp	r0, #0
 8004634:	d03c      	beq.n	80046b0 <_svfiprintf_r+0x1d8>
 8004636:	4b26      	ldr	r3, [pc, #152]	; (80046d0 <_svfiprintf_r+0x1f8>)
 8004638:	2b00      	cmp	r3, #0
 800463a:	d125      	bne.n	8004688 <_svfiprintf_r+0x1b0>
 800463c:	2207      	movs	r2, #7
 800463e:	9b07      	ldr	r3, [sp, #28]
 8004640:	3307      	adds	r3, #7
 8004642:	4393      	bics	r3, r2
 8004644:	3308      	adds	r3, #8
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	6963      	ldr	r3, [r4, #20]
 800464a:	9a04      	ldr	r2, [sp, #16]
 800464c:	189b      	adds	r3, r3, r2
 800464e:	6163      	str	r3, [r4, #20]
 8004650:	e765      	b.n	800451e <_svfiprintf_r+0x46>
 8004652:	4343      	muls	r3, r0
 8004654:	0035      	movs	r5, r6
 8004656:	2101      	movs	r1, #1
 8004658:	189b      	adds	r3, r3, r2
 800465a:	e7a6      	b.n	80045aa <_svfiprintf_r+0xd2>
 800465c:	2301      	movs	r3, #1
 800465e:	425b      	negs	r3, r3
 8004660:	e7d0      	b.n	8004604 <_svfiprintf_r+0x12c>
 8004662:	2300      	movs	r3, #0
 8004664:	200a      	movs	r0, #10
 8004666:	001a      	movs	r2, r3
 8004668:	3501      	adds	r5, #1
 800466a:	6063      	str	r3, [r4, #4]
 800466c:	7829      	ldrb	r1, [r5, #0]
 800466e:	1c6e      	adds	r6, r5, #1
 8004670:	3930      	subs	r1, #48	; 0x30
 8004672:	2909      	cmp	r1, #9
 8004674:	d903      	bls.n	800467e <_svfiprintf_r+0x1a6>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0c5      	beq.n	8004606 <_svfiprintf_r+0x12e>
 800467a:	9209      	str	r2, [sp, #36]	; 0x24
 800467c:	e7c3      	b.n	8004606 <_svfiprintf_r+0x12e>
 800467e:	4342      	muls	r2, r0
 8004680:	0035      	movs	r5, r6
 8004682:	2301      	movs	r3, #1
 8004684:	1852      	adds	r2, r2, r1
 8004686:	e7f1      	b.n	800466c <_svfiprintf_r+0x194>
 8004688:	ab07      	add	r3, sp, #28
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	003a      	movs	r2, r7
 800468e:	0021      	movs	r1, r4
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <_svfiprintf_r+0x1fc>)
 8004692:	9803      	ldr	r0, [sp, #12]
 8004694:	e000      	b.n	8004698 <_svfiprintf_r+0x1c0>
 8004696:	bf00      	nop
 8004698:	9004      	str	r0, [sp, #16]
 800469a:	9b04      	ldr	r3, [sp, #16]
 800469c:	3301      	adds	r3, #1
 800469e:	d1d3      	bne.n	8004648 <_svfiprintf_r+0x170>
 80046a0:	89bb      	ldrh	r3, [r7, #12]
 80046a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80046a4:	065b      	lsls	r3, r3, #25
 80046a6:	d400      	bmi.n	80046aa <_svfiprintf_r+0x1d2>
 80046a8:	e72d      	b.n	8004506 <_svfiprintf_r+0x2e>
 80046aa:	2001      	movs	r0, #1
 80046ac:	4240      	negs	r0, r0
 80046ae:	e72a      	b.n	8004506 <_svfiprintf_r+0x2e>
 80046b0:	ab07      	add	r3, sp, #28
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	003a      	movs	r2, r7
 80046b6:	0021      	movs	r1, r4
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <_svfiprintf_r+0x1fc>)
 80046ba:	9803      	ldr	r0, [sp, #12]
 80046bc:	f000 f87c 	bl	80047b8 <_printf_i>
 80046c0:	e7ea      	b.n	8004698 <_svfiprintf_r+0x1c0>
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	08004dcc 	.word	0x08004dcc
 80046c8:	08004dd2 	.word	0x08004dd2
 80046cc:	08004dd6 	.word	0x08004dd6
 80046d0:	00000000 	.word	0x00000000
 80046d4:	08004415 	.word	0x08004415

080046d8 <_printf_common>:
 80046d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046da:	0015      	movs	r5, r2
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	688a      	ldr	r2, [r1, #8]
 80046e0:	690b      	ldr	r3, [r1, #16]
 80046e2:	000c      	movs	r4, r1
 80046e4:	9000      	str	r0, [sp, #0]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	da00      	bge.n	80046ec <_printf_common+0x14>
 80046ea:	0013      	movs	r3, r2
 80046ec:	0022      	movs	r2, r4
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	3243      	adds	r2, #67	; 0x43
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	d001      	beq.n	80046fc <_printf_common+0x24>
 80046f8:	3301      	adds	r3, #1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	069b      	lsls	r3, r3, #26
 8004700:	d502      	bpl.n	8004708 <_printf_common+0x30>
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	3302      	adds	r3, #2
 8004706:	602b      	str	r3, [r5, #0]
 8004708:	6822      	ldr	r2, [r4, #0]
 800470a:	2306      	movs	r3, #6
 800470c:	0017      	movs	r7, r2
 800470e:	401f      	ands	r7, r3
 8004710:	421a      	tst	r2, r3
 8004712:	d027      	beq.n	8004764 <_printf_common+0x8c>
 8004714:	0023      	movs	r3, r4
 8004716:	3343      	adds	r3, #67	; 0x43
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	4193      	sbcs	r3, r2
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	0692      	lsls	r2, r2, #26
 8004722:	d430      	bmi.n	8004786 <_printf_common+0xae>
 8004724:	0022      	movs	r2, r4
 8004726:	9901      	ldr	r1, [sp, #4]
 8004728:	9800      	ldr	r0, [sp, #0]
 800472a:	9e08      	ldr	r6, [sp, #32]
 800472c:	3243      	adds	r2, #67	; 0x43
 800472e:	47b0      	blx	r6
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d025      	beq.n	8004780 <_printf_common+0xa8>
 8004734:	2306      	movs	r3, #6
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	682a      	ldr	r2, [r5, #0]
 800473a:	68e1      	ldr	r1, [r4, #12]
 800473c:	2500      	movs	r5, #0
 800473e:	4003      	ands	r3, r0
 8004740:	2b04      	cmp	r3, #4
 8004742:	d103      	bne.n	800474c <_printf_common+0x74>
 8004744:	1a8d      	subs	r5, r1, r2
 8004746:	43eb      	mvns	r3, r5
 8004748:	17db      	asrs	r3, r3, #31
 800474a:	401d      	ands	r5, r3
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	6922      	ldr	r2, [r4, #16]
 8004750:	4293      	cmp	r3, r2
 8004752:	dd01      	ble.n	8004758 <_printf_common+0x80>
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	18ed      	adds	r5, r5, r3
 8004758:	2700      	movs	r7, #0
 800475a:	42bd      	cmp	r5, r7
 800475c:	d120      	bne.n	80047a0 <_printf_common+0xc8>
 800475e:	2000      	movs	r0, #0
 8004760:	e010      	b.n	8004784 <_printf_common+0xac>
 8004762:	3701      	adds	r7, #1
 8004764:	68e3      	ldr	r3, [r4, #12]
 8004766:	682a      	ldr	r2, [r5, #0]
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	42bb      	cmp	r3, r7
 800476c:	ddd2      	ble.n	8004714 <_printf_common+0x3c>
 800476e:	0022      	movs	r2, r4
 8004770:	2301      	movs	r3, #1
 8004772:	9901      	ldr	r1, [sp, #4]
 8004774:	9800      	ldr	r0, [sp, #0]
 8004776:	9e08      	ldr	r6, [sp, #32]
 8004778:	3219      	adds	r2, #25
 800477a:	47b0      	blx	r6
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d1f0      	bne.n	8004762 <_printf_common+0x8a>
 8004780:	2001      	movs	r0, #1
 8004782:	4240      	negs	r0, r0
 8004784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004786:	2030      	movs	r0, #48	; 0x30
 8004788:	18e1      	adds	r1, r4, r3
 800478a:	3143      	adds	r1, #67	; 0x43
 800478c:	7008      	strb	r0, [r1, #0]
 800478e:	0021      	movs	r1, r4
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	3145      	adds	r1, #69	; 0x45
 8004794:	7809      	ldrb	r1, [r1, #0]
 8004796:	18a2      	adds	r2, r4, r2
 8004798:	3243      	adds	r2, #67	; 0x43
 800479a:	3302      	adds	r3, #2
 800479c:	7011      	strb	r1, [r2, #0]
 800479e:	e7c1      	b.n	8004724 <_printf_common+0x4c>
 80047a0:	0022      	movs	r2, r4
 80047a2:	2301      	movs	r3, #1
 80047a4:	9901      	ldr	r1, [sp, #4]
 80047a6:	9800      	ldr	r0, [sp, #0]
 80047a8:	9e08      	ldr	r6, [sp, #32]
 80047aa:	321a      	adds	r2, #26
 80047ac:	47b0      	blx	r6
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d0e6      	beq.n	8004780 <_printf_common+0xa8>
 80047b2:	3701      	adds	r7, #1
 80047b4:	e7d1      	b.n	800475a <_printf_common+0x82>
	...

080047b8 <_printf_i>:
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b08b      	sub	sp, #44	; 0x2c
 80047bc:	9206      	str	r2, [sp, #24]
 80047be:	000a      	movs	r2, r1
 80047c0:	3243      	adds	r2, #67	; 0x43
 80047c2:	9307      	str	r3, [sp, #28]
 80047c4:	9005      	str	r0, [sp, #20]
 80047c6:	9204      	str	r2, [sp, #16]
 80047c8:	7e0a      	ldrb	r2, [r1, #24]
 80047ca:	000c      	movs	r4, r1
 80047cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047ce:	2a78      	cmp	r2, #120	; 0x78
 80047d0:	d807      	bhi.n	80047e2 <_printf_i+0x2a>
 80047d2:	2a62      	cmp	r2, #98	; 0x62
 80047d4:	d809      	bhi.n	80047ea <_printf_i+0x32>
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d100      	bne.n	80047dc <_printf_i+0x24>
 80047da:	e0c1      	b.n	8004960 <_printf_i+0x1a8>
 80047dc:	2a58      	cmp	r2, #88	; 0x58
 80047de:	d100      	bne.n	80047e2 <_printf_i+0x2a>
 80047e0:	e08c      	b.n	80048fc <_printf_i+0x144>
 80047e2:	0026      	movs	r6, r4
 80047e4:	3642      	adds	r6, #66	; 0x42
 80047e6:	7032      	strb	r2, [r6, #0]
 80047e8:	e022      	b.n	8004830 <_printf_i+0x78>
 80047ea:	0010      	movs	r0, r2
 80047ec:	3863      	subs	r0, #99	; 0x63
 80047ee:	2815      	cmp	r0, #21
 80047f0:	d8f7      	bhi.n	80047e2 <_printf_i+0x2a>
 80047f2:	f7fb fc8f 	bl	8000114 <__gnu_thumb1_case_shi>
 80047f6:	0016      	.short	0x0016
 80047f8:	fff6001f 	.word	0xfff6001f
 80047fc:	fff6fff6 	.word	0xfff6fff6
 8004800:	001ffff6 	.word	0x001ffff6
 8004804:	fff6fff6 	.word	0xfff6fff6
 8004808:	fff6fff6 	.word	0xfff6fff6
 800480c:	003600a8 	.word	0x003600a8
 8004810:	fff6009a 	.word	0xfff6009a
 8004814:	00b9fff6 	.word	0x00b9fff6
 8004818:	0036fff6 	.word	0x0036fff6
 800481c:	fff6fff6 	.word	0xfff6fff6
 8004820:	009e      	.short	0x009e
 8004822:	0026      	movs	r6, r4
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	3642      	adds	r6, #66	; 0x42
 8004828:	1d11      	adds	r1, r2, #4
 800482a:	6019      	str	r1, [r3, #0]
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	7033      	strb	r3, [r6, #0]
 8004830:	2301      	movs	r3, #1
 8004832:	e0a7      	b.n	8004984 <_printf_i+0x1cc>
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	1d0a      	adds	r2, r1, #4
 800483a:	0605      	lsls	r5, r0, #24
 800483c:	d50b      	bpl.n	8004856 <_printf_i+0x9e>
 800483e:	680d      	ldr	r5, [r1, #0]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	2d00      	cmp	r5, #0
 8004844:	da03      	bge.n	800484e <_printf_i+0x96>
 8004846:	232d      	movs	r3, #45	; 0x2d
 8004848:	9a04      	ldr	r2, [sp, #16]
 800484a:	426d      	negs	r5, r5
 800484c:	7013      	strb	r3, [r2, #0]
 800484e:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <_printf_i+0x21c>)
 8004850:	270a      	movs	r7, #10
 8004852:	9303      	str	r3, [sp, #12]
 8004854:	e01b      	b.n	800488e <_printf_i+0xd6>
 8004856:	680d      	ldr	r5, [r1, #0]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	0641      	lsls	r1, r0, #25
 800485c:	d5f1      	bpl.n	8004842 <_printf_i+0x8a>
 800485e:	b22d      	sxth	r5, r5
 8004860:	e7ef      	b.n	8004842 <_printf_i+0x8a>
 8004862:	680d      	ldr	r5, [r1, #0]
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	1d08      	adds	r0, r1, #4
 8004868:	6018      	str	r0, [r3, #0]
 800486a:	062e      	lsls	r6, r5, #24
 800486c:	d501      	bpl.n	8004872 <_printf_i+0xba>
 800486e:	680d      	ldr	r5, [r1, #0]
 8004870:	e003      	b.n	800487a <_printf_i+0xc2>
 8004872:	066d      	lsls	r5, r5, #25
 8004874:	d5fb      	bpl.n	800486e <_printf_i+0xb6>
 8004876:	680d      	ldr	r5, [r1, #0]
 8004878:	b2ad      	uxth	r5, r5
 800487a:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <_printf_i+0x21c>)
 800487c:	2708      	movs	r7, #8
 800487e:	9303      	str	r3, [sp, #12]
 8004880:	2a6f      	cmp	r2, #111	; 0x6f
 8004882:	d000      	beq.n	8004886 <_printf_i+0xce>
 8004884:	3702      	adds	r7, #2
 8004886:	0023      	movs	r3, r4
 8004888:	2200      	movs	r2, #0
 800488a:	3343      	adds	r3, #67	; 0x43
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	6863      	ldr	r3, [r4, #4]
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	db03      	blt.n	800489e <_printf_i+0xe6>
 8004896:	2204      	movs	r2, #4
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	4391      	bics	r1, r2
 800489c:	6021      	str	r1, [r4, #0]
 800489e:	2d00      	cmp	r5, #0
 80048a0:	d102      	bne.n	80048a8 <_printf_i+0xf0>
 80048a2:	9e04      	ldr	r6, [sp, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <_printf_i+0x10a>
 80048a8:	9e04      	ldr	r6, [sp, #16]
 80048aa:	0028      	movs	r0, r5
 80048ac:	0039      	movs	r1, r7
 80048ae:	f7fb fcc1 	bl	8000234 <__aeabi_uidivmod>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	3e01      	subs	r6, #1
 80048b6:	5c5b      	ldrb	r3, [r3, r1]
 80048b8:	7033      	strb	r3, [r6, #0]
 80048ba:	002b      	movs	r3, r5
 80048bc:	0005      	movs	r5, r0
 80048be:	429f      	cmp	r7, r3
 80048c0:	d9f3      	bls.n	80048aa <_printf_i+0xf2>
 80048c2:	2f08      	cmp	r7, #8
 80048c4:	d109      	bne.n	80048da <_printf_i+0x122>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07db      	lsls	r3, r3, #31
 80048ca:	d506      	bpl.n	80048da <_printf_i+0x122>
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	6922      	ldr	r2, [r4, #16]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	dc02      	bgt.n	80048da <_printf_i+0x122>
 80048d4:	2330      	movs	r3, #48	; 0x30
 80048d6:	3e01      	subs	r6, #1
 80048d8:	7033      	strb	r3, [r6, #0]
 80048da:	9b04      	ldr	r3, [sp, #16]
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	9b07      	ldr	r3, [sp, #28]
 80048e2:	0021      	movs	r1, r4
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	9805      	ldr	r0, [sp, #20]
 80048e8:	9b06      	ldr	r3, [sp, #24]
 80048ea:	aa09      	add	r2, sp, #36	; 0x24
 80048ec:	f7ff fef4 	bl	80046d8 <_printf_common>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d14c      	bne.n	800498e <_printf_i+0x1d6>
 80048f4:	2001      	movs	r0, #1
 80048f6:	4240      	negs	r0, r0
 80048f8:	b00b      	add	sp, #44	; 0x2c
 80048fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fc:	3145      	adds	r1, #69	; 0x45
 80048fe:	700a      	strb	r2, [r1, #0]
 8004900:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <_printf_i+0x21c>)
 8004902:	9203      	str	r2, [sp, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	6821      	ldr	r1, [r4, #0]
 8004908:	ca20      	ldmia	r2!, {r5}
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	0608      	lsls	r0, r1, #24
 800490e:	d516      	bpl.n	800493e <_printf_i+0x186>
 8004910:	07cb      	lsls	r3, r1, #31
 8004912:	d502      	bpl.n	800491a <_printf_i+0x162>
 8004914:	2320      	movs	r3, #32
 8004916:	4319      	orrs	r1, r3
 8004918:	6021      	str	r1, [r4, #0]
 800491a:	2710      	movs	r7, #16
 800491c:	2d00      	cmp	r5, #0
 800491e:	d1b2      	bne.n	8004886 <_printf_i+0xce>
 8004920:	2320      	movs	r3, #32
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	439a      	bics	r2, r3
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	e7ad      	b.n	8004886 <_printf_i+0xce>
 800492a:	2220      	movs	r2, #32
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	6022      	str	r2, [r4, #0]
 8004932:	0022      	movs	r2, r4
 8004934:	2178      	movs	r1, #120	; 0x78
 8004936:	3245      	adds	r2, #69	; 0x45
 8004938:	7011      	strb	r1, [r2, #0]
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <_printf_i+0x220>)
 800493c:	e7e1      	b.n	8004902 <_printf_i+0x14a>
 800493e:	0648      	lsls	r0, r1, #25
 8004940:	d5e6      	bpl.n	8004910 <_printf_i+0x158>
 8004942:	b2ad      	uxth	r5, r5
 8004944:	e7e4      	b.n	8004910 <_printf_i+0x158>
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	680d      	ldr	r5, [r1, #0]
 800494a:	1d10      	adds	r0, r2, #4
 800494c:	6949      	ldr	r1, [r1, #20]
 800494e:	6018      	str	r0, [r3, #0]
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	062e      	lsls	r6, r5, #24
 8004954:	d501      	bpl.n	800495a <_printf_i+0x1a2>
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0x1a8>
 800495a:	066d      	lsls	r5, r5, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0x19e>
 800495e:	8019      	strh	r1, [r3, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	9e04      	ldr	r6, [sp, #16]
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	e7bb      	b.n	80048e0 <_printf_i+0x128>
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	1d11      	adds	r1, r2, #4
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	6816      	ldr	r6, [r2, #0]
 8004970:	2100      	movs	r1, #0
 8004972:	0030      	movs	r0, r6
 8004974:	6862      	ldr	r2, [r4, #4]
 8004976:	f000 f831 	bl	80049dc <memchr>
 800497a:	2800      	cmp	r0, #0
 800497c:	d001      	beq.n	8004982 <_printf_i+0x1ca>
 800497e:	1b80      	subs	r0, r0, r6
 8004980:	6060      	str	r0, [r4, #4]
 8004982:	6863      	ldr	r3, [r4, #4]
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	2300      	movs	r3, #0
 8004988:	9a04      	ldr	r2, [sp, #16]
 800498a:	7013      	strb	r3, [r2, #0]
 800498c:	e7a8      	b.n	80048e0 <_printf_i+0x128>
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	0032      	movs	r2, r6
 8004992:	9906      	ldr	r1, [sp, #24]
 8004994:	9805      	ldr	r0, [sp, #20]
 8004996:	9d07      	ldr	r5, [sp, #28]
 8004998:	47a8      	blx	r5
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d0aa      	beq.n	80048f4 <_printf_i+0x13c>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	d415      	bmi.n	80049d0 <_printf_i+0x218>
 80049a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	4298      	cmp	r0, r3
 80049aa:	daa5      	bge.n	80048f8 <_printf_i+0x140>
 80049ac:	0018      	movs	r0, r3
 80049ae:	e7a3      	b.n	80048f8 <_printf_i+0x140>
 80049b0:	0022      	movs	r2, r4
 80049b2:	2301      	movs	r3, #1
 80049b4:	9906      	ldr	r1, [sp, #24]
 80049b6:	9805      	ldr	r0, [sp, #20]
 80049b8:	9e07      	ldr	r6, [sp, #28]
 80049ba:	3219      	adds	r2, #25
 80049bc:	47b0      	blx	r6
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d098      	beq.n	80048f4 <_printf_i+0x13c>
 80049c2:	3501      	adds	r5, #1
 80049c4:	68e3      	ldr	r3, [r4, #12]
 80049c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	42ab      	cmp	r3, r5
 80049cc:	dcf0      	bgt.n	80049b0 <_printf_i+0x1f8>
 80049ce:	e7e9      	b.n	80049a4 <_printf_i+0x1ec>
 80049d0:	2500      	movs	r5, #0
 80049d2:	e7f7      	b.n	80049c4 <_printf_i+0x20c>
 80049d4:	08004ddd 	.word	0x08004ddd
 80049d8:	08004dee 	.word	0x08004dee

080049dc <memchr>:
 80049dc:	b2c9      	uxtb	r1, r1
 80049de:	1882      	adds	r2, r0, r2
 80049e0:	4290      	cmp	r0, r2
 80049e2:	d101      	bne.n	80049e8 <memchr+0xc>
 80049e4:	2000      	movs	r0, #0
 80049e6:	4770      	bx	lr
 80049e8:	7803      	ldrb	r3, [r0, #0]
 80049ea:	428b      	cmp	r3, r1
 80049ec:	d0fb      	beq.n	80049e6 <memchr+0xa>
 80049ee:	3001      	adds	r0, #1
 80049f0:	e7f6      	b.n	80049e0 <memchr+0x4>

080049f2 <memcpy>:
 80049f2:	2300      	movs	r3, #0
 80049f4:	b510      	push	{r4, lr}
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d100      	bne.n	80049fc <memcpy+0xa>
 80049fa:	bd10      	pop	{r4, pc}
 80049fc:	5ccc      	ldrb	r4, [r1, r3]
 80049fe:	54c4      	strb	r4, [r0, r3]
 8004a00:	3301      	adds	r3, #1
 8004a02:	e7f8      	b.n	80049f6 <memcpy+0x4>

08004a04 <memmove>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4288      	cmp	r0, r1
 8004a08:	d902      	bls.n	8004a10 <memmove+0xc>
 8004a0a:	188b      	adds	r3, r1, r2
 8004a0c:	4298      	cmp	r0, r3
 8004a0e:	d303      	bcc.n	8004a18 <memmove+0x14>
 8004a10:	2300      	movs	r3, #0
 8004a12:	e007      	b.n	8004a24 <memmove+0x20>
 8004a14:	5c8b      	ldrb	r3, [r1, r2]
 8004a16:	5483      	strb	r3, [r0, r2]
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	d2fb      	bcs.n	8004a14 <memmove+0x10>
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	5ccc      	ldrb	r4, [r1, r3]
 8004a20:	54c4      	strb	r4, [r0, r3]
 8004a22:	3301      	adds	r3, #1
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1fa      	bne.n	8004a1e <memmove+0x1a>
 8004a28:	e7f8      	b.n	8004a1c <memmove+0x18>
	...

08004a2c <_free_r>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	0005      	movs	r5, r0
 8004a30:	2900      	cmp	r1, #0
 8004a32:	d010      	beq.n	8004a56 <_free_r+0x2a>
 8004a34:	1f0c      	subs	r4, r1, #4
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da00      	bge.n	8004a3e <_free_r+0x12>
 8004a3c:	18e4      	adds	r4, r4, r3
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f000 f918 	bl	8004c74 <__malloc_lock>
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <_free_r+0x90>)
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <_free_r+0x2c>
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	6014      	str	r4, [r2, #0]
 8004a50:	0028      	movs	r0, r5
 8004a52:	f000 f917 	bl	8004c84 <__malloc_unlock>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d908      	bls.n	8004a6e <_free_r+0x42>
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	1860      	adds	r0, r4, r1
 8004a60:	4283      	cmp	r3, r0
 8004a62:	d1f3      	bne.n	8004a4c <_free_r+0x20>
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	1841      	adds	r1, r0, r1
 8004a6a:	6021      	str	r1, [r4, #0]
 8004a6c:	e7ee      	b.n	8004a4c <_free_r+0x20>
 8004a6e:	001a      	movs	r2, r3
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <_free_r+0x4e>
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	d9f9      	bls.n	8004a6e <_free_r+0x42>
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	1850      	adds	r0, r2, r1
 8004a7e:	42a0      	cmp	r0, r4
 8004a80:	d10b      	bne.n	8004a9a <_free_r+0x6e>
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	1809      	adds	r1, r1, r0
 8004a86:	1850      	adds	r0, r2, r1
 8004a88:	6011      	str	r1, [r2, #0]
 8004a8a:	4283      	cmp	r3, r0
 8004a8c:	d1e0      	bne.n	8004a50 <_free_r+0x24>
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	1841      	adds	r1, r0, r1
 8004a94:	6011      	str	r1, [r2, #0]
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e7da      	b.n	8004a50 <_free_r+0x24>
 8004a9a:	42a0      	cmp	r0, r4
 8004a9c:	d902      	bls.n	8004aa4 <_free_r+0x78>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	e7d5      	b.n	8004a50 <_free_r+0x24>
 8004aa4:	6821      	ldr	r1, [r4, #0]
 8004aa6:	1860      	adds	r0, r4, r1
 8004aa8:	4283      	cmp	r3, r0
 8004aaa:	d103      	bne.n	8004ab4 <_free_r+0x88>
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	1841      	adds	r1, r0, r1
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6054      	str	r4, [r2, #4]
 8004ab8:	e7ca      	b.n	8004a50 <_free_r+0x24>
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	200001b4 	.word	0x200001b4

08004ac0 <sbrk_aligned>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4e0f      	ldr	r6, [pc, #60]	; (8004b00 <sbrk_aligned+0x40>)
 8004ac4:	000d      	movs	r5, r1
 8004ac6:	6831      	ldr	r1, [r6, #0]
 8004ac8:	0004      	movs	r4, r0
 8004aca:	2900      	cmp	r1, #0
 8004acc:	d102      	bne.n	8004ad4 <sbrk_aligned+0x14>
 8004ace:	f000 f8bf 	bl	8004c50 <_sbrk_r>
 8004ad2:	6030      	str	r0, [r6, #0]
 8004ad4:	0029      	movs	r1, r5
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	f000 f8ba 	bl	8004c50 <_sbrk_r>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d00a      	beq.n	8004af6 <sbrk_aligned+0x36>
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	1cc5      	adds	r5, r0, #3
 8004ae4:	439d      	bics	r5, r3
 8004ae6:	42a8      	cmp	r0, r5
 8004ae8:	d007      	beq.n	8004afa <sbrk_aligned+0x3a>
 8004aea:	1a29      	subs	r1, r5, r0
 8004aec:	0020      	movs	r0, r4
 8004aee:	f000 f8af 	bl	8004c50 <_sbrk_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d101      	bne.n	8004afa <sbrk_aligned+0x3a>
 8004af6:	2501      	movs	r5, #1
 8004af8:	426d      	negs	r5, r5
 8004afa:	0028      	movs	r0, r5
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	200001b8 	.word	0x200001b8

08004b04 <_malloc_r>:
 8004b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b06:	2203      	movs	r2, #3
 8004b08:	1ccb      	adds	r3, r1, #3
 8004b0a:	4393      	bics	r3, r2
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	0006      	movs	r6, r0
 8004b10:	001f      	movs	r7, r3
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d232      	bcs.n	8004b7c <_malloc_r+0x78>
 8004b16:	270c      	movs	r7, #12
 8004b18:	42b9      	cmp	r1, r7
 8004b1a:	d831      	bhi.n	8004b80 <_malloc_r+0x7c>
 8004b1c:	0030      	movs	r0, r6
 8004b1e:	f000 f8a9 	bl	8004c74 <__malloc_lock>
 8004b22:	4d32      	ldr	r5, [pc, #200]	; (8004bec <_malloc_r+0xe8>)
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	001c      	movs	r4, r3
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	d12e      	bne.n	8004b8a <_malloc_r+0x86>
 8004b2c:	0039      	movs	r1, r7
 8004b2e:	0030      	movs	r0, r6
 8004b30:	f7ff ffc6 	bl	8004ac0 <sbrk_aligned>
 8004b34:	0004      	movs	r4, r0
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d11e      	bne.n	8004b78 <_malloc_r+0x74>
 8004b3a:	682c      	ldr	r4, [r5, #0]
 8004b3c:	0025      	movs	r5, r4
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	d14a      	bne.n	8004bd8 <_malloc_r+0xd4>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	0029      	movs	r1, r5
 8004b46:	18e3      	adds	r3, r4, r3
 8004b48:	0030      	movs	r0, r6
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	f000 f880 	bl	8004c50 <_sbrk_r>
 8004b50:	9b01      	ldr	r3, [sp, #4]
 8004b52:	4283      	cmp	r3, r0
 8004b54:	d143      	bne.n	8004bde <_malloc_r+0xda>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	3703      	adds	r7, #3
 8004b5a:	1aff      	subs	r7, r7, r3
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	439f      	bics	r7, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	2f0c      	cmp	r7, #12
 8004b64:	d200      	bcs.n	8004b68 <_malloc_r+0x64>
 8004b66:	270c      	movs	r7, #12
 8004b68:	0039      	movs	r1, r7
 8004b6a:	0030      	movs	r0, r6
 8004b6c:	f7ff ffa8 	bl	8004ac0 <sbrk_aligned>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d034      	beq.n	8004bde <_malloc_r+0xda>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	19df      	adds	r7, r3, r7
 8004b78:	6027      	str	r7, [r4, #0]
 8004b7a:	e013      	b.n	8004ba4 <_malloc_r+0xa0>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dacb      	bge.n	8004b18 <_malloc_r+0x14>
 8004b80:	230c      	movs	r3, #12
 8004b82:	2500      	movs	r5, #0
 8004b84:	6033      	str	r3, [r6, #0]
 8004b86:	0028      	movs	r0, r5
 8004b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	1bd1      	subs	r1, r2, r7
 8004b8e:	d420      	bmi.n	8004bd2 <_malloc_r+0xce>
 8004b90:	290b      	cmp	r1, #11
 8004b92:	d917      	bls.n	8004bc4 <_malloc_r+0xc0>
 8004b94:	19e2      	adds	r2, r4, r7
 8004b96:	6027      	str	r7, [r4, #0]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d111      	bne.n	8004bc0 <_malloc_r+0xbc>
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	6053      	str	r3, [r2, #4]
 8004ba4:	0030      	movs	r0, r6
 8004ba6:	0025      	movs	r5, r4
 8004ba8:	f000 f86c 	bl	8004c84 <__malloc_unlock>
 8004bac:	2207      	movs	r2, #7
 8004bae:	350b      	adds	r5, #11
 8004bb0:	1d23      	adds	r3, r4, #4
 8004bb2:	4395      	bics	r5, r2
 8004bb4:	1aea      	subs	r2, r5, r3
 8004bb6:	429d      	cmp	r5, r3
 8004bb8:	d0e5      	beq.n	8004b86 <_malloc_r+0x82>
 8004bba:	1b5b      	subs	r3, r3, r5
 8004bbc:	50a3      	str	r3, [r4, r2]
 8004bbe:	e7e2      	b.n	8004b86 <_malloc_r+0x82>
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	e7ec      	b.n	8004b9e <_malloc_r+0x9a>
 8004bc4:	6862      	ldr	r2, [r4, #4]
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	d101      	bne.n	8004bce <_malloc_r+0xca>
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	e7ea      	b.n	8004ba4 <_malloc_r+0xa0>
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	e7e8      	b.n	8004ba4 <_malloc_r+0xa0>
 8004bd2:	0023      	movs	r3, r4
 8004bd4:	6864      	ldr	r4, [r4, #4]
 8004bd6:	e7a7      	b.n	8004b28 <_malloc_r+0x24>
 8004bd8:	002c      	movs	r4, r5
 8004bda:	686d      	ldr	r5, [r5, #4]
 8004bdc:	e7af      	b.n	8004b3e <_malloc_r+0x3a>
 8004bde:	230c      	movs	r3, #12
 8004be0:	0030      	movs	r0, r6
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	f000 f84e 	bl	8004c84 <__malloc_unlock>
 8004be8:	e7cd      	b.n	8004b86 <_malloc_r+0x82>
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	200001b4 	.word	0x200001b4

08004bf0 <_realloc_r>:
 8004bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf2:	0007      	movs	r7, r0
 8004bf4:	000e      	movs	r6, r1
 8004bf6:	0014      	movs	r4, r2
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	d105      	bne.n	8004c08 <_realloc_r+0x18>
 8004bfc:	0011      	movs	r1, r2
 8004bfe:	f7ff ff81 	bl	8004b04 <_malloc_r>
 8004c02:	0005      	movs	r5, r0
 8004c04:	0028      	movs	r0, r5
 8004c06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d103      	bne.n	8004c14 <_realloc_r+0x24>
 8004c0c:	f7ff ff0e 	bl	8004a2c <_free_r>
 8004c10:	0025      	movs	r5, r4
 8004c12:	e7f7      	b.n	8004c04 <_realloc_r+0x14>
 8004c14:	f000 f83e 	bl	8004c94 <_malloc_usable_size_r>
 8004c18:	9001      	str	r0, [sp, #4]
 8004c1a:	4284      	cmp	r4, r0
 8004c1c:	d803      	bhi.n	8004c26 <_realloc_r+0x36>
 8004c1e:	0035      	movs	r5, r6
 8004c20:	0843      	lsrs	r3, r0, #1
 8004c22:	42a3      	cmp	r3, r4
 8004c24:	d3ee      	bcc.n	8004c04 <_realloc_r+0x14>
 8004c26:	0021      	movs	r1, r4
 8004c28:	0038      	movs	r0, r7
 8004c2a:	f7ff ff6b 	bl	8004b04 <_malloc_r>
 8004c2e:	1e05      	subs	r5, r0, #0
 8004c30:	d0e8      	beq.n	8004c04 <_realloc_r+0x14>
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	0022      	movs	r2, r4
 8004c36:	429c      	cmp	r4, r3
 8004c38:	d900      	bls.n	8004c3c <_realloc_r+0x4c>
 8004c3a:	001a      	movs	r2, r3
 8004c3c:	0031      	movs	r1, r6
 8004c3e:	0028      	movs	r0, r5
 8004c40:	f7ff fed7 	bl	80049f2 <memcpy>
 8004c44:	0031      	movs	r1, r6
 8004c46:	0038      	movs	r0, r7
 8004c48:	f7ff fef0 	bl	8004a2c <_free_r>
 8004c4c:	e7da      	b.n	8004c04 <_realloc_r+0x14>
	...

08004c50 <_sbrk_r>:
 8004c50:	2300      	movs	r3, #0
 8004c52:	b570      	push	{r4, r5, r6, lr}
 8004c54:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x20>)
 8004c56:	0004      	movs	r4, r0
 8004c58:	0008      	movs	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fd f9ee 	bl	800203c <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d103      	bne.n	8004c6c <_sbrk_r+0x1c>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d000      	beq.n	8004c6c <_sbrk_r+0x1c>
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	200001bc 	.word	0x200001bc

08004c74 <__malloc_lock>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	4802      	ldr	r0, [pc, #8]	; (8004c80 <__malloc_lock+0xc>)
 8004c78:	f000 f814 	bl	8004ca4 <__retarget_lock_acquire_recursive>
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	200001c0 	.word	0x200001c0

08004c84 <__malloc_unlock>:
 8004c84:	b510      	push	{r4, lr}
 8004c86:	4802      	ldr	r0, [pc, #8]	; (8004c90 <__malloc_unlock+0xc>)
 8004c88:	f000 f80d 	bl	8004ca6 <__retarget_lock_release_recursive>
 8004c8c:	bd10      	pop	{r4, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	200001c0 	.word	0x200001c0

08004c94 <_malloc_usable_size_r>:
 8004c94:	1f0b      	subs	r3, r1, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1f18      	subs	r0, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da01      	bge.n	8004ca2 <_malloc_usable_size_r+0xe>
 8004c9e:	580b      	ldr	r3, [r1, r0]
 8004ca0:	18c0      	adds	r0, r0, r3
 8004ca2:	4770      	bx	lr

08004ca4 <__retarget_lock_acquire_recursive>:
 8004ca4:	4770      	bx	lr

08004ca6 <__retarget_lock_release_recursive>:
 8004ca6:	4770      	bx	lr

08004ca8 <_init>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr

08004cb4 <_fini>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr
